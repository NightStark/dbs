cscope 15 /mnt/sda1/langyanjun/work/BXO2050n_2_Fit_Dev/apps/odhcp/odhcpd/src -q 0000010744 0000964758
	@blob.c

19 
	~"blob.h
"

21 
boﬁ


22 
	$blob_buf„r_grow
(
blob_buf
 *
buf
, 
möÀn
)

24 
blob_buf
 *
√w
;

25 
dñè
 = ((
möÀn
 / 256) + 1) * 256;

26 
√w
 = 
	`ªÆloc
(
buf
->buf, buf->
buÊí
 + 
dñè
);

27 i‡(
√w
) {

28 
buf
->bu‡
√w
;

29 
	`mem£t
(
buf
->bu‡+ buf->
buÊí
, 0, 
dñè
);

30 
buf
->
buÊí
 +
dñè
;

32  !!
√w
;

33 
	}
}

36 
	$blob_öô
(
blob_©å
 *
©å
, 
id
, 
Àn
)

38 
Àn
 &
BLOB_ATTR_LEN_MASK
;

39 
Àn
 |(
id
 << 
BLOB_ATTR_ID_SHIFT
Ë& 
BLOB_ATTR_ID_MASK
;

40 
©å
->
id_Àn
 = 
	`˝u_to_be32
(
Àn
);

41 
	}
}

43 
ölöe
 
blob_©å
 *

44 
	$off£t_to_©å
(
blob_buf
 *
buf
, 
off£t
)

46 *
±r
 = (*)
buf
->bu‡+ 
off£t
 - 
BLOB_COOKIE
;

47  
±r
;

48 
	}
}

50 
ölöe
 

51 
	$©å_to_off£t
(
blob_buf
 *
buf
, 
blob_©å
 *
©å
)

53  (*)
©å
 - (*Ë
buf
->bu‡+ 
BLOB_COOKIE
;

54 
	}
}

56 
boﬁ


57 
	$blob_buf_grow
(
blob_buf
 *
buf
, 
ªquúed
)

59 
off£t_hód
 = 
	`©å_to_off£t
(
buf
, buf->
hód
);

61 i‡(!
buf
->
grow
 || !buf->
	`grow
(buf, 
ªquúed
))

62  
Ál£
;

64 
buf
->
hód
 = 
	`off£t_to_©å
(buf, 
off£t_hód
);

65  
åue
;

66 
	}
}

68 
blob_©å
 *

69 
	$blob_add
(
blob_buf
 *
buf
, 
blob_©å
 *
pos
, 
id
, 
∑ylﬂd
)

71 
off£t
 = 
	`©å_to_off£t
(
buf
, 
pos
);

72 
ªquúed
 = (
off£t
 - 
BLOB_COOKIE
 + (
blob_©å
Ë+ 
∑ylﬂd
Ë- 
buf
->
buÊí
;

73 
blob_©å
 *
©å
;

75 i‡(
ªquúed
 > 0) {

76 i‡(!
	`blob_buf_grow
(
buf
, 
ªquúed
))

77  
NULL
;

78 
©å
 = 
	`off£t_to_©å
(
buf
, 
off£t
);

80 
©å
 = 
pos
;

83 
	`blob_öô
(
©å
, 
id
, 
∑ylﬂd
 + (
blob_©å
));

84 
	`blob_fûl_∑d
(
©å
);

85  
©å
;

86 
	}
}

89 
	$blob_buf_öô
(
blob_buf
 *
buf
, 
id
)

91 i‡(!
buf
->
grow
)

92 
buf
->
grow
 = 
blob_buf„r_grow
;

94 
buf
->
hód
 = buf->buf;

95 i‡(
	`blob_add
(
buf
, buf->buf, 
id
, 0Ë=
NULL
)

96  -
ENOMEM
;

99 
	}
}

102 
	$blob_buf_‰ì
(
blob_buf
 *
buf
)

104 
	`‰ì
(
buf
->buf);

105 
buf
->bu‡
NULL
;

106 
buf
->
buÊí
 = 0;

107 
	}
}

110 
	$blob_fûl_∑d
(
blob_©å
 *
©å
)

112 *
buf
 = (*Ë
©å
;

113 
Àn
 = 
	`blob_∑d_Àn
(
©å
);

114 
dñè
 = 
Àn
 - 
	`blob_øw_Àn
(
©å
);

116 i‡(
dñè
 > 0)

117 
	`mem£t
(
buf
 + 
Àn
 - 
dñè
, 0, delta);

118 
	}
}

121 
	$blob_£t_øw_Àn
(
blob_©å
 *
©å
, 
Àn
)

123 
Àn
 &
BLOB_ATTR_LEN_MASK
;

124 
©å
->
id_Àn
 &~
	`˝u_to_be32
(
BLOB_ATTR_LEN_MASK
);

125 
©å
->
id_Àn
 |
	`˝u_to_be32
(
Àn
);

126 
	}
}

128 
blob_©å
 *

129 
	$blob_√w
(
blob_buf
 *
buf
, 
id
, 
∑ylﬂd
)

131 
blob_©å
 *
©å
;

133 
©å
 = 
	`blob_add
(
buf
, 
	`blob_√xt
(buf->
hód
), 
id
, 
∑ylﬂd
);

134 i‡(!
©å
)

135  
NULL
;

137 
	`blob_£t_øw_Àn
(
buf
->
hód
, 
	`blob_∑d_Àn
(buf->hódË+ blob_∑d_Àn(
©å
));

138  
©å
;

139 
	}
}

141 
blob_©å
 *

142 
	$blob_put_øw
(
blob_buf
 *
buf
, c⁄° *
±r
, 
Àn
)

144 
blob_©å
 *
©å
;

146 i‡(
Àn
 < (
blob_©å
Ë|| !
±r
)

147  
NULL
;

149 
©å
 = 
	`blob_add
(
buf
, 
	`blob_√xt
(buf->
hód
), 0, 
Àn
 - (
blob_©å
));

150 i‡(!
©å
)

151  
NULL
;

152 
	`blob_£t_øw_Àn
(
buf
->
hód
, 
	`blob_∑d_Àn
(buf->hódË+ 
Àn
);

153 
	`mem˝y
(
©å
, 
±r
, 
Àn
);

154  
©å
;

155 
	}
}

157 
blob_©å
 *

158 
	$blob_put
(
blob_buf
 *
buf
, 
id
, c⁄° *
±r
, 
Àn
)

160 
blob_©å
 *
©å
;

162 
©å
 = 
	`blob_√w
(
buf
, 
id
, 
Àn
);

163 i‡(!
©å
)

164  
NULL
;

166 i‡(
±r
)

167 
	`mem˝y
(
	`blob_d©a
(
©å
), 
±r
, 
Àn
);

168  
©å
;

169 
	}
}

172 
	$blob_√°_°¨t
(
blob_buf
 *
buf
, 
id
)

174 
off£t
 = 
	`©å_to_off£t
(
buf
, buf->
hód
);

175 
buf
->
hód
 = 
	`blob_√w
(buf, 
id
, 0);

176 i‡(!
buf
->
hód
)

177  
NULL
;

178  (*Ë
off£t
;

179 
	}
}

182 
	$blob_√°_íd
(
blob_buf
 *
buf
, *
cookõ
)

184 
blob_©å
 *
©å
 = 
	`off£t_to_©å
(
buf
, (Ë
cookõ
);

185 
	`blob_£t_øw_Àn
(
©å
, 
	`blob_∑d_Àn
◊ârË+ 
	`blob_Àn
(
buf
->
hód
));

186 
buf
->
hód
 = 
©å
;

187 
	}
}

189 c⁄° 
	gblob_ty≥_möÀn
[
BLOB_ATTR_LAST
] = {

190 [
BLOB_ATTR_STRING
] = 1,

191 [
BLOB_ATTR_INT8
] = (
uöt8_t
),

192 [
BLOB_ATTR_INT16
] = (
uöt16_t
),

193 [
BLOB_ATTR_INT32
] = (
uöt32_t
),

194 [
BLOB_ATTR_INT64
] = (
uöt64_t
),

197 
boﬁ


198 
	$blob_check_ty≥
(c⁄° *
±r
, 
Àn
, 
ty≥
)

200 c⁄° *
d©a
 = 
±r
;

202 i‡(
ty≥
 >
BLOB_ATTR_LAST
)

203  
Ál£
;

205 i‡(
ty≥
 >
BLOB_ATTR_INT8
 &&Åy≥ <
BLOB_ATTR_INT64
) {

206 i‡(
Àn
 !
blob_ty≥_möÀn
[
ty≥
])

207  
Ál£
;

209 i‡(
Àn
 < 
blob_ty≥_möÀn
[
ty≥
])

210  
Ál£
;

213 i‡(
ty≥
 =
BLOB_ATTR_STRING
 && 
d©a
[
Àn
 - 1] != 0)

214  
Ál£
;

216  
åue
;

217 
	}
}

220 
	$blob_∑r£
(
blob_©å
 *
©å
, blob_©å **
d©a
, c⁄° 
blob_©å_öfo
 *
öfo
, 
max
)

222 
blob_©å
 *
pos
;

223 
found
 = 0;

224 
ªm
;

226 
	`mem£t
(
d©a
, 0, (
blob_©å
 *Ë* 
max
);

227 
	`blob_f‹_óch_©å
(
pos
, 
©å
, 
ªm
) {

228 
id
 = 
	`blob_id
(
pos
);

229 
Àn
 = 
	`blob_Àn
(
pos
);

231 i‡(
id
 >
max
)

234 i‡(
öfo
) {

235 
ty≥
 = 
öfo
[
id
].type;

237 i‡(
ty≥
 < 
BLOB_ATTR_LAST
) {

238 i‡(!
	`blob_check_ty≥
(
	`blob_d©a
(
pos
), 
Àn
, 
ty≥
))

242 i‡(
öfo
[
id
].
möÀn
 && 
Àn
 < info[id].minlen)

245 i‡(
öfo
[
id
].
maxÀn
 && 
Àn
 > info[id].maxlen)

248 i‡(
öfo
[
id
].
vÆid©e
 && !öfo[id].
	`vÆid©e
(&öfo[id], 
pos
))

252 i‡(!
d©a
[
id
])

253 
found
++;

255 
d©a
[
id
] = 
pos
;

257  
found
;

258 
	}
}

260 
boﬁ


261 
	$blob_©å_equÆ
(c⁄° 
blob_©å
 *
a1
, c⁄° blob_©å *
a2
)

263 i‡(!
a1
 && !
a2
)

264  
åue
;

266 i‡(!
a1
 || !
a2
)

267  
Ál£
;

269 i‡(
	`blob_∑d_Àn
(
a1
Ë!blob_∑d_Àn(
a2
))

270  
Ál£
;

272  !
	`memcmp
(
a1
, 
a2
, 
	`blob_∑d_Àn
(a1));

273 
	}
}

275 
blob_©å
 *

276 
	$blob_memdup
(
blob_©å
 *
©å
)

278 
blob_©å
 *
ªt
;

279 
size
 = 
	`blob_∑d_Àn
(
©å
);

281 
ªt
 = 
	`mÆloc
(
size
);

282 i‡(!
ªt
)

283  
NULL
;

285 
	`mem˝y
(
ªt
, 
©å
, 
size
);

286  
ªt
;

287 
	}
}

	@blob.h

19 #i‚de‡
_BLOB_H__


20 
	#_BLOB_H__


	)

22 
	~<°dboﬁ.h
>

23 
	~<°dlib.h
>

24 
	~<°döt.h
>

25 
	~<°rög.h
>

26 
	~<°dio.h
>

27 
	~<î∫o.h
>

29 
	~"utûs.h
"

31 
	#BLOB_COOKIE
 0x01234567

	)

34 
	mBLOB_ATTR_UNSPEC
,

35 
	mBLOB_ATTR_NESTED
,

36 
	mBLOB_ATTR_BINARY
,

37 
	mBLOB_ATTR_STRING
,

38 
	mBLOB_ATTR_INT8
,

39 
	mBLOB_ATTR_INT16
,

40 
	mBLOB_ATTR_INT32
,

41 
	mBLOB_ATTR_INT64
,

42 
	mBLOB_ATTR_LAST


45 
	#BLOB_ATTR_ID_MASK
 0x7f000000

	)

46 
	#BLOB_ATTR_ID_SHIFT
 24

	)

47 
	#BLOB_ATTR_LEN_MASK
 0x00ffffff

	)

48 
	#BLOB_ATTR_ALIGN
 4

	)

49 
	#BLOB_ATTR_EXTENDED
 0x80000000

	)

51 
	sblob_©å
 {

52 
uöt32_t
 
	mid_Àn
;

53 
	md©a
[];

54 } 
	g__∑cked
;

56 
	sblob_©å_öfo
 {

57 
	mty≥
;

58 
	mmöÀn
;

59 
	mmaxÀn
;

60 
boﬁ
 (*
vÆid©e
)(c⁄° 
	mblob_©å_öfo
 *, 
	mblob_©å
 *);

63 
	sblob_buf
 {

64 
blob_©å
 *
	mhód
;

65 
boﬁ
 (*
grow
)(
blob_buf
 *
	mbuf
, 
	mmöÀn
);

66 
	mbuÊí
;

67 *
	mbuf
;

73 
ölöe
 *

74 
	$blob_d©a
(c⁄° 
blob_©å
 *
©å
)

76  (*Ë
©å
->
d©a
;

77 
	}
}

82 
ölöe
 

83 
	$blob_id
(c⁄° 
blob_©å
 *
©å
)

85 
id
 = (
	`be32_to_˝u
(
©å
->
id_Àn
Ë& 
BLOB_ATTR_ID_MASK
Ë>> 
BLOB_ATTR_ID_SHIFT
;

86  
id
;

87 
	}
}

89 
ölöe
 
boﬁ


90 
	$blob_is_exãnded
(c⁄° 
blob_©å
 *
©å
)

92  !!(
©å
->
id_Àn
 & 
	`˝u_to_be32
(
BLOB_ATTR_EXTENDED
));

93 
	}
}

98 
ölöe
 

99 
	$blob_Àn
(c⁄° 
blob_©å
 *
©å
)

101  (
	`be32_to_˝u
(
©å
->
id_Àn
Ë& 
BLOB_ATTR_LEN_MASK
Ë- (
blob_©å
);

102 
	}
}

107 
ölöe
 

108 
	$blob_øw_Àn
(c⁄° 
blob_©å
 *
©å
)

110  
	`blob_Àn
(
©å
Ë+ (
blob_©å
);

111 
	}
}

116 
ölöe
 

117 
	$blob_∑d_Àn
(c⁄° 
blob_©å
 *
©å
)

119 
Àn
 = 
	`blob_øw_Àn
(
©å
);

120 
Àn
 = (À¿+ 
BLOB_ATTR_ALIGN
 - 1) & ~(BLOB_ATTR_ALIGN - 1);

121  
Àn
;

122 
	}
}

124 
ölöe
 
uöt8_t


125 
	$blob_gë_u8
(c⁄° 
blob_©å
 *
©å
)

127  *((
uöt8_t
 *Ë
©å
->
d©a
);

128 
	}
}

130 
ölöe
 
uöt16_t


131 
	$blob_gë_u16
(c⁄° 
blob_©å
 *
©å
)

133 
uöt16_t
 *
tmp
 = (uöt16_t*)
©å
->
d©a
;

134  
	`be16_to_˝u
(*
tmp
);

135 
	}
}

137 
ölöe
 
uöt32_t


138 
	$blob_gë_u32
(c⁄° 
blob_©å
 *
©å
)

140 
uöt32_t
 *
tmp
 = (uöt32_t*)
©å
->
d©a
;

141  
	`be32_to_˝u
(*
tmp
);

142 
	}
}

144 
ölöe
 
uöt64_t


145 
	$blob_gë_u64
(c⁄° 
blob_©å
 *
©å
)

147 
uöt32_t
 *
±r
 = (uöt32_à*Ë
	`blob_d©a
(
©å
);

148 
uöt64_t
 
tmp
 = ((uöt64_tË
	`be32_to_˝u
(
±r
[0])) << 32;

149 
tmp
 |
	`be32_to_˝u
(
±r
[1]);

150  
tmp
;

151 
	}
}

153 
ölöe
 
öt8_t


154 
	$blob_gë_öt8
(c⁄° 
blob_©å
 *
©å
)

156  
	`blob_gë_u8
(
©å
);

157 
	}
}

159 
ölöe
 
öt16_t


160 
	$blob_gë_öt16
(c⁄° 
blob_©å
 *
©å
)

162  
	`blob_gë_u16
(
©å
);

163 
	}
}

165 
ölöe
 
öt32_t


166 
	$blob_gë_öt32
(c⁄° 
blob_©å
 *
©å
)

168  
	`blob_gë_u32
(
©å
);

169 
	}
}

171 
ölöe
 
öt64_t


172 
	$blob_gë_öt64
(c⁄° 
blob_©å
 *
©å
)

174  
	`blob_gë_u64
(
©å
);

175 
	}
}

177 
ölöe
 const *

178 
	$blob_gë_°rög
(c⁄° 
blob_©å
 *
©å
)

180  
©å
->
d©a
;

181 
	}
}

183 
ölöe
 
blob_©å
 *

184 
	$blob_√xt
(c⁄° 
blob_©å
 *
©å
)

186  (
blob_©å
 *Ë((*Ë
©å
 + 
	`blob_∑d_Àn
(attr));

187 
	}
}

189 
blob_fûl_∑d
(
blob_©å
 *
©å
);

190 
blob_£t_øw_Àn
(
blob_©å
 *
©å
, 
Àn
);

191 
boﬁ
 
blob_©å_equÆ
(c⁄° 
blob_©å
 *
a1
, c⁄° blob_©å *
a2
);

192 
blob_buf_öô
(
blob_buf
 *
buf
, 
id
);

193 
blob_buf_‰ì
(
blob_buf
 *
buf
);

194 
boﬁ
 
blob_buf_grow
(
blob_buf
 *
buf
, 
ªquúed
);

195 
blob_©å
 *
blob_√w
(
blob_buf
 *
buf
, 
id
, 
∑ylﬂd
);

196 *
blob_√°_°¨t
(
blob_buf
 *
buf
, 
id
);

197 
blob_√°_íd
(
blob_buf
 *
buf
, *
cookõ
);

198 
blob_©å
 *
blob_put
(
blob_buf
 *
buf
, 
id
, c⁄° *
±r
, 
Àn
);

199 
boﬁ
 
blob_check_ty≥
(c⁄° *
±r
, 
Àn
, 
ty≥
);

200 
blob_∑r£
(
blob_©å
 *
©å
, blob_©å **
d©a
, c⁄° 
blob_©å_öfo
 *
öfo
, 
max
);

201 
blob_©å
 *
blob_memdup
(blob_©å *
©å
);

202 
blob_©å
 *
blob_put_øw
(
blob_buf
 *
buf
, c⁄° *
±r
, 
Àn
);

204 
ölöe
 
blob_©å
 *

205 
	$blob_put_°rög
(
blob_buf
 *
buf
, 
id
, c⁄° *
°r
)

207  
	`blob_put
(
buf
, 
id
, 
°r
, 
	`°æí
(str) + 1);

208 
	}
}

210 
ölöe
 
blob_©å
 *

211 
	$blob_put_u8
(
blob_buf
 *
buf
, 
id
, 
uöt8_t
 
vÆ
)

213  
	`blob_put
(
buf
, 
id
, &
vÆ
, (val));

214 
	}
}

216 
ölöe
 
blob_©å
 *

217 
	$blob_put_u16
(
blob_buf
 *
buf
, 
id
, 
uöt16_t
 
vÆ
)

219 
vÆ
 = 
	`˝u_to_be16
(val);

220  
	`blob_put
(
buf
, 
id
, &
vÆ
, (val));

221 
	}
}

223 
ölöe
 
blob_©å
 *

224 
	$blob_put_u32
(
blob_buf
 *
buf
, 
id
, 
uöt32_t
 
vÆ
)

226 
vÆ
 = 
	`˝u_to_be32
(val);

227  
	`blob_put
(
buf
, 
id
, &
vÆ
, (val));

228 
	}
}

230 
ölöe
 
blob_©å
 *

231 
	$blob_put_u64
(
blob_buf
 *
buf
, 
id
, 
uöt64_t
 
vÆ
)

233 
vÆ
 = 
	`˝u_to_be64
(val);

234  
	`blob_put
(
buf
, 
id
, &
vÆ
, (val));

235 
	}
}

237 
	#blob_put_öt8
 
blob_put_u8


	)

238 
	#blob_put_öt16
 
blob_put_u16


	)

239 
	#blob_put_öt32
 
blob_put_u32


	)

240 
	#blob_put_öt64
 
blob_put_u64


	)

242 
	#__blob_f‹_óch_©å
(
pos
, 
©å
, 
ªm
) \

243 
pos
 = (*Ë
©å
; \

244 
ªm
 > 0 && (
	`blob_∑d_Àn
(
pos
) <=Ñem) && \

245 (
	`blob_∑d_Àn
(
pos
Ë>(
blob_©å
)); \

246 
ªm
 -
	`blob_∑d_Àn
(
pos
),Öo†
	`blob_√xt
’os))

	)

249 
	#blob_f‹_óch_©å
(
pos
, 
©å
, 
ªm
) \

250 
ªm
 = 
©å
 ? 
	`blob_Àn
(attr) : 0, \

251 
pos
 = 
©å
 ? 
	`blob_d©a
(attr) : 0; \

252 
ªm
 > 0 && (
	`blob_∑d_Àn
(
pos
) <=Ñem) && \

253 (
	`blob_∑d_Àn
(
pos
Ë>(
blob_©å
)); \

254 
ªm
 -
	`blob_∑d_Àn
(
pos
),Öo†
	`blob_√xt
’os))

	)

	@blobmsg.c

16 
	~"blobmsg.h
"

18 c⁄° 
	gblob_ty≥
[
__BLOBMSG_TYPE_LAST
] = {

19 [
BLOBMSG_TYPE_INT8
] = 
BLOB_ATTR_INT8
,

20 [
BLOBMSG_TYPE_INT16
] = 
BLOB_ATTR_INT16
,

21 [
BLOBMSG_TYPE_INT32
] = 
BLOB_ATTR_INT32
,

22 [
BLOBMSG_TYPE_INT64
] = 
BLOB_ATTR_INT64
,

23 [
BLOBMSG_TYPE_STRING
] = 
BLOB_ATTR_STRING
,

24 [
BLOBMSG_TYPE_UNSPEC
] = 
BLOB_ATTR_BINARY
,

27 
uöt16_t


28 
	$blobmsg_«mñí
(c⁄° 
blobmsg_hdr
 *
hdr
)

30  
	`be16_to_˝u
(
hdr
->
«mñí
);

31 
	}
}

33 
boﬁ
 
	$blobmsg_check_©å
(c⁄° 
blob_©å
 *
©å
, 
boﬁ
 
«me
)

35 c⁄° 
blobmsg_hdr
 *
hdr
;

36 c⁄° *
d©a
;

37 
id
, 
Àn
;

39 i‡(
	`blob_Àn
(
©å
Ë< (
blobmsg_hdr
))

40  
Ál£
;

42 
hdr
 = (*Ë
©å
->
d©a
;

43 i‡(!
hdr
->
«mñí
 && 
«me
)

44  
Ál£
;

46 i‡(
	`blobmsg_«mñí
(
hdr
Ë> 
	`blob_Àn
(
©å
Ë- (
blobmsg_hdr
))

47  
Ál£
;

49 i‡(
hdr
->
«me
[
	`blobmsg_«mñí
(hdr)] != 0)

50  
Ál£
;

52 
id
 = 
	`blob_id
(
©å
);

53 
Àn
 = 
	`blobmsg_d©a_Àn
(
©å
);

54 
d©a
 = 
	`blobmsg_d©a
(
©å
);

56 i‡(
id
 > 
BLOBMSG_TYPE_LAST
)

57  
Ál£
;

59 i‡(!
blob_ty≥
[
id
])

60  
åue
;

62  
	`blob_check_ty≥
(
d©a
, 
Àn
, 
blob_ty≥
[
id
]);

63 
	}
}

65 
	$blobmsg_check_¨øy
(c⁄° 
blob_©å
 *
©å
, 
ty≥
)

67 
blob_©å
 *
cur
;

68 
boﬁ
 
«me
;

69 
ªm
;

70 
size
 = 0;

72 
	`blobmsg_ty≥
(
©å
)) {

73 
BLOBMSG_TYPE_TABLE
:

74 
«me
 = 
åue
;

76 
BLOBMSG_TYPE_ARRAY
:

77 
«me
 = 
Ál£
;

83 
	`blobmsg_f‹_óch_©å
(
cur
, 
©å
, 
ªm
) {

84 i‡(
ty≥
 !
BLOBMSG_TYPE_UNSPEC
 && 
	`blobmsg_ty≥
(
cur
) !=Åype)

87 i‡(!
	`blobmsg_check_©å
(
cur
, 
«me
))

90 
size
++;

93  
size
;

94 
	}
}

96 
boﬁ
 
	$blobmsg_check_©å_li°
(c⁄° 
blob_©å
 *
©å
, 
ty≥
)

98  
	`blobmsg_check_¨øy
(
©å
, 
ty≥
) >= 0;

99 
	}
}

101 
	$blobmsg_∑r£_¨øy
(c⁄° 
blobmsg_pﬁicy
 *
pﬁicy
, 
pﬁicy_Àn
,

102 
blob_©å
 **
tb
, *
d©a
, 
Àn
)

104 
blob_©å
 *
©å
;

105 
i
 = 0;

107 
	`mem£t
(
tb
, 0, 
pﬁicy_Àn
 * (*tb));

108 
	`__blob_f‹_óch_©å
(
©å
, 
d©a
, 
Àn
) {

109 i‡(
pﬁicy
[
i
].
ty≥
 !
BLOBMSG_TYPE_UNSPEC
 &&

110 
	`blob_id
(
©å
Ë!
pﬁicy
[
i
].
ty≥
)

113 i‡(!
	`blobmsg_check_©å
(
©å
, 
Ál£
))

116 i‡(
tb
[
i
])

119 
tb
[
i
++] = 
©å
;

120 i‡(
i
 =
pﬁicy_Àn
)

125 
	}
}

128 
	$blobmsg_∑r£
(c⁄° 
blobmsg_pﬁicy
 *
pﬁicy
, 
pﬁicy_Àn
,

129 
blob_©å
 **
tb
, *
d©a
, 
Àn
)

131 
blobmsg_hdr
 *
hdr
;

132 
blob_©å
 *
©å
;

133 
uöt8_t
 *
p¶í
;

134 
i
;

136 
	`mem£t
(
tb
, 0, 
pﬁicy_Àn
 * (*tb));

137 
p¶í
 = 
	`Æloˇ
(
pﬁicy_Àn
);

138 
i
 = 0; i < 
pﬁicy_Àn
; i++) {

139 i‡(!
pﬁicy
[
i
].
«me
)

142 
p¶í
[
i
] = 
	`°æí
(
pﬁicy
[i].
«me
);

145 
	`__blob_f‹_óch_©å
(
©å
, 
d©a
, 
Àn
) {

146 
hdr
 = 
	`blob_d©a
(
©å
);

147 
i
 = 0; i < 
pﬁicy_Àn
; i++) {

148 i‡(!
pﬁicy
[
i
].
«me
)

151 i‡(
pﬁicy
[
i
].
ty≥
 !
BLOBMSG_TYPE_UNSPEC
 &&

152 
	`blob_id
(
©å
Ë!
pﬁicy
[
i
].
ty≥
)

155 i‡(
	`blobmsg_«mñí
(
hdr
Ë!
p¶í
[
i
])

158 i‡(!
	`blobmsg_check_©å
(
©å
, 
åue
))

161 i‡(
tb
[
i
])

164 i‡(
	`°rcmp
(
pﬁicy
[
i
].
«me
, (*Ë
hdr
->name) != 0)

167 
tb
[
i
] = 
©å
;

172 
	}
}

175 
blob_©å
 *

176 
	$blobmsg_√w
(
blob_buf
 *
buf
, 
ty≥
, c⁄° *
«me
, 
∑ylﬂd_Àn
, **
d©a
)

178 
blob_©å
 *
©å
;

179 
blobmsg_hdr
 *
hdr
;

180 
©åÀn
, 
«mñí
;

181 *
∑d_°¨t
, *
∑d_íd
;

183 i‡(!
«me
)

184 
«me
 = "";

186 
«mñí
 = 
	`°æí
(
«me
);

187 
©åÀn
 = 
	`blobmsg_hdæí
(
«mñí
Ë+ 
∑ylﬂd_Àn
;

188 
©å
 = 
	`blob_√w
(
buf
, 
ty≥
, 
©åÀn
);

189 i‡(!
©å
)

190  
NULL
;

192 
©å
->
id_Àn
 |
	`be32_to_˝u
(
BLOB_ATTR_EXTENDED
);

193 
hdr
 = 
	`blob_d©a
(
©å
);

194 
hdr
->
«mñí
 = 
	`˝u_to_be16
(namelen);

195 
	`°r˝y
((*Ë
hdr
->
«me
, (const *)name);

196 
∑d_íd
 = *
d©a
 = 
	`blobmsg_d©a
(
©å
);

197 
∑d_°¨t
 = (*Ë&
hdr
->
«me
[
«mñí
];

198 i‡(
∑d_°¨t
 < 
∑d_íd
)

199 
	`mem£t
(
∑d_°¨t
, 0, 
∑d_íd
 -Öad_start);

201  
©å
;

202 
	}
}

204 
ölöe
 

205 
	$©å_to_off£t
(
blob_buf
 *
buf
, 
blob_©å
 *
©å
)

207  (*)
©å
 - (*Ë
buf
->bu‡+ 
BLOB_COOKIE
;

208 
	}
}

212 
	$blobmsg_›í_√°ed
(
blob_buf
 *
buf
, c⁄° *
«me
, 
boﬁ
 
¨øy
)

214 
blob_©å
 *
hód
;

215 
ty≥
 = 
¨øy
 ? 
BLOBMSG_TYPE_ARRAY
 : 
BLOBMSG_TYPE_TABLE
;

216 
off£t
 = 
	`©å_to_off£t
(
buf
, buf->
hód
);

217 *
d©a
;

219 i‡(!
«me
)

220 
«me
 = "";

222 
hód
 = 
	`blobmsg_√w
(
buf
, 
ty≥
, 
«me
, 0, &
d©a
);

223 i‡(!
hód
)

224  
NULL
;

225 
	`blob_£t_øw_Àn
(
buf
->
hód
, 
	`blob_∑d_Àn
(buf->hódË- 
	`blobmsg_hdæí
(
	`°æí
(
«me
)));

226 
buf
->
hód
 = head;

227  (*)
off£t
;

228 
	}
}

231 
	$blobmsg_v¥ötf
(
blob_buf
 *
buf
, c⁄° *
«me
, c⁄° *
f‹m©
, 
va_li°
 
¨g
)

233 
va_li°
 
¨g2
;

234 
cbuf
;

235 
Àn
;

237 
	`va_c›y
(
¨g2
, 
¨g
);

238 
Àn
 = 
	`v¢¥ötf
(&
cbuf
, (cbuf), 
f‹m©
, 
¨g2
);

239 
	`va_íd
(
¨g2
);

241 
	`v•rötf
(
	`blobmsg_Æloc_°rög_buf„r
(
buf
, 
«me
, 
Àn
 + 1), 
f‹m©
, 
¨g
);

242 
	`blobmsg_add_°rög_buf„r
(
buf
);

243 
	}
}

246 
	$blobmsg_¥ötf
(
blob_buf
 *
buf
, c⁄° *
«me
, c⁄° *
f‹m©
, ...)

248 
va_li°
 
≠
;

250 
	`va_°¨t
(
≠
, 
f‹m©
);

251 
	`blobmsg_v¥ötf
(
buf
, 
«me
, 
f‹m©
, 
≠
);

252 
	`va_íd
(
≠
);

253 
	}
}

256 
	$blobmsg_Æloc_°rög_buf„r
(
blob_buf
 *
buf
, c⁄° *
«me
, 
maxÀn
)

258 
blob_©å
 *
©å
;

259 *
d©a_de°
;

261 
©å
 = 
	`blobmsg_√w
(
buf
, 
BLOBMSG_TYPE_STRING
, 
«me
, 
maxÀn
, &
d©a_de°
);

262 i‡(!
©å
)

263  
NULL
;

265 
	`blob_£t_øw_Àn
(
buf
->
hód
, 
	`blob_∑d_Àn
(buf->hódË- blob_∑d_Àn(
©å
));

266 
	`blob_£t_øw_Àn
(
©å
, 
	`blob_øw_Àn
◊ârË- 
maxÀn
);

268  
d©a_de°
;

269 
	}
}

272 
	$blobmsg_ªÆloc_°rög_buf„r
(
blob_buf
 *
buf
, 
maxÀn
)

274 
blob_©å
 *
©å
 = 
	`blob_√xt
(
buf
->
hód
);

275 
off£t
 = 
	`©å_to_off£t
(
buf
, 
	`blob_√xt
(buf->
hód
)Ë+ 
	`blob_∑d_Àn
(
©å
Ë- 
BLOB_COOKIE
;

276 
ªquúed
 = 
maxÀn
 - (
buf
->
buÊí
 - 
off£t
);

278 i‡(
ªquúed
 <= 0)

279 
out
;

281 
	`blob_buf_grow
(
buf
, 
ªquúed
);

282 
©å
 = 
	`blob_√xt
(
buf
->
hód
);

284 
out
:

285  
	`blobmsg_d©a
(
©å
);

286 
	}
}

289 
	$blobmsg_add_°rög_buf„r
(
blob_buf
 *
buf
)

291 
blob_©å
 *
©å
;

292 
Àn
, 
©åÀn
;

294 
©å
 = 
	`blob_√xt
(
buf
->
hód
);

295 
Àn
 = 
	`°æí
(
	`blobmsg_d©a
(
©å
)) + 1;

297 
©åÀn
 = 
	`blob_øw_Àn
(
©å
Ë+ 
Àn
;

298 
	`blob_£t_øw_Àn
(
©å
, 
©åÀn
);

299 
	`blob_fûl_∑d
(
©å
);

301 
	`blob_£t_øw_Àn
(
buf
->
hód
, 
	`blob_øw_Àn
(buf->hódË+ 
	`blob_∑d_Àn
(
©å
));

302 
	}
}

305 
	$blobmsg_add_fõld
(
blob_buf
 *
buf
, 
ty≥
, c⁄° *
«me
,

306 c⁄° *
d©a
, 
Àn
)

308 
blob_©å
 *
©å
;

309 *
d©a_de°
;

311 
©å
 = 
	`blobmsg_√w
(
buf
, 
ty≥
, 
«me
, 
Àn
, &
d©a_de°
);

312 i‡(!
©å
)

315 i‡(
Àn
 > 0)

316 
	`mem˝y
(
d©a_de°
, 
d©a
, 
Àn
);

319 
	}
}

	@blobmsg.h

16 #i‚de‡
__BLOBMSG_H


17 
	#__BLOBMSG_H


	)

19 
	~<°d¨g.h
>

20 
	~"blob.h
"

22 
	#BLOBMSG_ALIGN
 2

	)

23 
	#BLOBMSG_PADDING
(
Àn
Ë((÷íË+ (1 << 
BLOBMSG_ALIGN
Ë- 1Ë& ~((1 << BLOBMSG_ALIGNË- 1))

	)

25 
	eblobmsg_ty≥
 {

26 
	mBLOBMSG_TYPE_UNSPEC
,

27 
	mBLOBMSG_TYPE_ARRAY
,

28 
	mBLOBMSG_TYPE_TABLE
,

29 
	mBLOBMSG_TYPE_STRING
,

30 
	mBLOBMSG_TYPE_INT64
,

31 
	mBLOBMSG_TYPE_INT32
,

32 
	mBLOBMSG_TYPE_INT16
,

33 
	mBLOBMSG_TYPE_INT8
,

34 
	m__BLOBMSG_TYPE_LAST
,

35 
	mBLOBMSG_TYPE_LAST
 = 
__BLOBMSG_TYPE_LAST
 - 1,

36 
	mBLOBMSG_TYPE_BOOL
 = 
BLOBMSG_TYPE_INT8
,

39 
	sblobmsg_hdr
 {

40 
uöt16_t
 
	m«mñí
;

41 
uöt8_t
 
	m«me
[];

42 } 
	g__∑cked
;

44 
	sblobmsg_pﬁicy
 {

45 c⁄° *
	m«me
;

46 
blobmsg_ty≥
 
	mty≥
;

49 
ölöe
 
	$blobmsg_hdæí
(
«mñí
)

51  
	`BLOBMSG_PADDING
((
blobmsg_hdr
Ë+ 
«mñí
 + 1);

52 
	}
}

54 
ölöe
 
	$blobmsg_˛ór_«me
(
blob_©å
 *
©å
)

56 
blobmsg_hdr
 *
hdr
 = (blobmsg_hd∏*Ë
	`blob_d©a
(
©å
);

57 
hdr
->
«me
[0] = 0;

58 
	}
}

60 
ölöe
 c⁄° *
	$blobmsg_«me
(c⁄° 
blob_©å
 *
©å
)

62 
blobmsg_hdr
 *
hdr
 = (blobmsg_hd∏*Ë
	`blob_d©a
(
©å
);

63  (c⁄° *Ë
hdr
->
«me
;

64 
	}
}

66 
ölöe
 
	$blobmsg_ty≥
(c⁄° 
blob_©å
 *
©å
)

68  
	`blob_id
(
©å
);

69 
	}
}

71 
ölöe
 *
	$blobmsg_d©a
(c⁄° 
blob_©å
 *
©å
)

73 
blobmsg_hdr
 *
hdr
 = (blobmsg_hd∏*Ë
	`blob_d©a
(
©å
);

74 *
d©a
 = (*Ë
	`blob_d©a
(
©å
);

76 i‡(
	`blob_is_exãnded
(
©å
))

77 
d©a
 +
	`blobmsg_hdæí
(
	`be16_to_˝u
(
hdr
->
«mñí
));

79  
d©a
;

80 
	}
}

82 
ölöe
 
	$blobmsg_d©a_Àn
(c⁄° 
blob_©å
 *
©å
)

84 
uöt8_t
 *
°¨t
, *
íd
;

86 
°¨t
 = (
uöt8_t
 *Ë
	`blob_d©a
(
©å
);

87 
íd
 = (
uöt8_t
 *Ë
	`blobmsg_d©a
(
©å
);

89  
	`blob_Àn
(
©å
Ë- (
íd
 - 
°¨t
);

90 
	}
}

92 
ölöe
 
	$blobmsg_Àn
(c⁄° 
blob_©å
 *
©å
)

94  
	`blobmsg_d©a_Àn
(
©å
);

95 
	}
}

97 
boﬁ
 
blobmsg_check_©å
(c⁄° 
blob_©å
 *
©å
, boﬁ 
«me
);

98 
boﬁ
 
blobmsg_check_©å_li°
(c⁄° 
blob_©å
 *
©å
, 
ty≥
);

106 
blobmsg_check_¨øy
(c⁄° 
blob_©å
 *
©å
, 
ty≥
);

108 
blobmsg_∑r£
(c⁄° 
blobmsg_pﬁicy
 *
pﬁicy
, 
pﬁicy_Àn
,

109 
blob_©å
 **
tb
, *
d©a
, 
Àn
);

110 
blobmsg_∑r£_¨øy
(c⁄° 
blobmsg_pﬁicy
 *
pﬁicy
, 
pﬁicy_Àn
,

111 
blob_©å
 **
tb
, *
d©a
, 
Àn
);

113 
blobmsg_add_fõld
(
blob_buf
 *
buf
, 
ty≥
, c⁄° *
«me
,

114 c⁄° *
d©a
, 
Àn
);

116 
ölöe
 

117 
	$blobmsg_add_u8
(
blob_buf
 *
buf
, c⁄° *
«me
, 
uöt8_t
 
vÆ
)

119  
	`blobmsg_add_fõld
(
buf
, 
BLOBMSG_TYPE_INT8
, 
«me
, &
vÆ
, 1);

120 
	}
}

122 
ölöe
 

123 
	$blobmsg_add_u16
(
blob_buf
 *
buf
, c⁄° *
«me
, 
uöt16_t
 
vÆ
)

125 
vÆ
 = 
	`˝u_to_be16
(val);

126  
	`blobmsg_add_fõld
(
buf
, 
BLOBMSG_TYPE_INT16
, 
«me
, &
vÆ
, 2);

127 
	}
}

129 
ölöe
 

130 
	$blobmsg_add_u32
(
blob_buf
 *
buf
, c⁄° *
«me
, 
uöt32_t
 
vÆ
)

132 
vÆ
 = 
	`˝u_to_be32
(val);

133  
	`blobmsg_add_fõld
(
buf
, 
BLOBMSG_TYPE_INT32
, 
«me
, &
vÆ
, 4);

134 
	}
}

136 
ölöe
 

137 
	$blobmsg_add_u64
(
blob_buf
 *
buf
, c⁄° *
«me
, 
uöt64_t
 
vÆ
)

139 
vÆ
 = 
	`˝u_to_be64
(val);

140  
	`blobmsg_add_fõld
(
buf
, 
BLOBMSG_TYPE_INT64
, 
«me
, &
vÆ
, 8);

141 
	}
}

143 
ölöe
 

144 
	$blobmsg_add_°rög
(
blob_buf
 *
buf
, c⁄° *
«me
, c⁄° *
°rög
)

146  
	`blobmsg_add_fõld
(
buf
, 
BLOBMSG_TYPE_STRING
, 
«me
, 
°rög
, 
	`°æí
(string) + 1);

147 
	}
}

149 
ölöe
 

150 
	$blobmsg_add_blob
(
blob_buf
 *
buf
, 
blob_©å
 *
©å
)

152  
	`blobmsg_add_fõld
(
buf
, 
	`blobmsg_ty≥
(
©å
), 
	`blobmsg_«me
(attr),

153 
	`blobmsg_d©a
(
©å
), 
	`blobmsg_d©a_Àn
(attr));

154 
	}
}

156 *
blobmsg_›í_√°ed
(
blob_buf
 *
buf
, c⁄° *
«me
, 
boﬁ
 
¨øy
);

158 
ölöe
 *

159 
	$blobmsg_›í_¨øy
(
blob_buf
 *
buf
, c⁄° *
«me
)

161  
	`blobmsg_›í_√°ed
(
buf
, 
«me
, 
åue
);

162 
	}
}

164 
ölöe
 *

165 
	$blobmsg_›í_èbÀ
(
blob_buf
 *
buf
, c⁄° *
«me
)

167  
	`blobmsg_›í_√°ed
(
buf
, 
«me
, 
Ál£
);

168 
	}
}

170 
ölöe
 

171 
	$blobmsg_˛o£_¨øy
(
blob_buf
 *
buf
, *
cookõ
)

173 
	`blob_√°_íd
(
buf
, 
cookõ
);

174 
	}
}

176 
ölöe
 

177 
	$blobmsg_˛o£_èbÀ
(
blob_buf
 *
buf
, *
cookõ
)

179 
	`blob_√°_íd
(
buf
, 
cookõ
);

180 
	}
}

182 
ölöe
 
	$blobmsg_buf_öô
(
blob_buf
 *
buf
)

184  
	`blob_buf_öô
(
buf
, 
BLOBMSG_TYPE_TABLE
);

185 
	}
}

187 
ölöe
 
uöt8_t
 
	$blobmsg_gë_u8
(
blob_©å
 *
©å
)

189  *(
uöt8_t
 *Ë
	`blobmsg_d©a
(
©å
);

190 
	}
}

192 
ölöe
 
boﬁ
 
	$blobmsg_gë_boﬁ
(
blob_©å
 *
©å
)

194  *(
uöt8_t
 *Ë
	`blobmsg_d©a
(
©å
);

195 
	}
}

197 
ölöe
 
uöt16_t
 
	$blobmsg_gë_u16
(
blob_©å
 *
©å
)

199  
	`be16_to_˝u
(*(
uöt16_t
 *Ë
	`blobmsg_d©a
(
©å
));

200 
	}
}

202 
ölöe
 
uöt32_t
 
	$blobmsg_gë_u32
(
blob_©å
 *
©å
)

204  
	`be32_to_˝u
(*(
uöt32_t
 *Ë
	`blobmsg_d©a
(
©å
));

205 
	}
}

207 
ölöe
 
uöt64_t
 
	$blobmsg_gë_u64
(
blob_©å
 *
©å
)

209 
uöt32_t
 *
±r
 = (uöt32_à*Ë
	`blobmsg_d©a
(
©å
);

210 
uöt64_t
 
tmp
 = ((uöt64_tË
	`be32_to_˝u
(
±r
[0])) << 32;

211 
tmp
 |
	`be32_to_˝u
(
±r
[1]);

212  
tmp
;

213 
	}
}

215 
ölöe
 *
	$blobmsg_gë_°rög
(
blob_©å
 *
©å
)

217 i‡(!
©å
)

218  
NULL
;

220  (*Ë
	`blobmsg_d©a
(
©å
);

221 
	}
}

223 *
blobmsg_Æloc_°rög_buf„r
(
blob_buf
 *
buf
, c⁄° *
«me
, 
maxÀn
);

224 *
blobmsg_ªÆloc_°rög_buf„r
(
blob_buf
 *
buf
, 
maxÀn
);

225 
blobmsg_add_°rög_buf„r
(
blob_buf
 *
buf
);

227 
blobmsg_v¥ötf
(
blob_buf
 *
buf
, c⁄° *
«me
, c⁄° *
f‹m©
, 
va_li°
 
¨g
);

228 
	$blobmsg_¥ötf
(
blob_buf
 *
buf
, c⁄° *
«me
, c⁄° *
f‹m©
, ...)

229 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 3, 4)));

234 
	#blobmsg_f‹_óch_©å
(
pos
, 
©å
, 
ªm
) \

235 
ªm
 = 
©å
 ? 
	`blobmsg_d©a_Àn
(attr) : 0, \

236 
pos
 = 
©å
 ? 
	`blobmsg_d©a
(attr) : 0; \

237 
ªm
 > 0 && (
	`blob_∑d_Àn
(
pos
) <=Ñem) && \

238 (
	`blob_∑d_Àn
(
pos
Ë>(
blob_©å
)); \

239 
ªm
 -
	`blob_∑d_Àn
(
pos
),Öo†
	`blob_√xt
’os))

	)

	@config.c

1 
	~<f˙é.h
>

2 
	~<ªsﬁv.h
>

3 
	~<sig«l.h
>

4 
	~<¨∑/öë.h
>

5 
	~<uni°d.h
>

7 
	~<uci.h
>

8 
	~<uci_blob.h
>

10 
	~"odh˝d.h
"

12 
blob_buf
 
	gb
;

13 
	gªlﬂd_pùe
[2];

14 
li°_hód
 
	gÀa£s
 = 
LIST_HEAD_INIT
(
Àa£s
);

15 
li°_hód
 
	göãrÁ˚s
 = 
LIST_HEAD_INIT
(
öãrÁ˚s
);

16 
c⁄fig
 
	gc⁄fig
 = {
Ál£
, 
NULL
, NULL};

19 
	mIFACE_ATTR_INTERFACE
,

20 
	mIFACE_ATTR_IFNAME
,

21 
	mIFACE_ATTR_NETWORKID
,

22 
	mIFACE_ATTR_DYNAMICDHCP
,

23 
	mIFACE_ATTR_IGNORE
,

24 
	mIFACE_ATTR_LEASETIME
,

25 
	mIFACE_ATTR_LIMIT
,

26 
	mIFACE_ATTR_START
,

27 
	mIFACE_ATTR_MASTER
,

28 
	mIFACE_ATTR_UPSTREAM
,

29 
	mIFACE_ATTR_RA
,

30 
	mIFACE_ATTR_DHCPV4
,

31 
	mIFACE_ATTR_DHCPV6
,

32 
	mIFACE_ATTR_NDP
,

33 
	mIFACE_ATTR_ROUTER
,

34 
	mIFACE_ATTR_DNS
,

35 
	mIFACE_ATTR_DOMAIN
,

36 
	mIFACE_ATTR_FILTER_CLASS
,

37 
	mIFACE_ATTR_DHCPV6_RAW
,

38 
	mIFACE_ATTR_RA_DEFAULT
,

39 
	mIFACE_ATTR_RA_MANAGEMENT
,

40 
	mIFACE_ATTR_RA_OFFLINK
,

41 
	mIFACE_ATTR_RA_PREFERENCE
,

42 
	mIFACE_ATTR_RA_ADVROUTER
,

43 
	mIFACE_ATTR_RA_MAXINTERVAL
,

44 
	mIFACE_ATTR_PD_MANAGER
,

45 
	mIFACE_ATTR_PD_CER
,

46 
	mIFACE_ATTR_NDPROXY_ROUTING
,

47 
	mIFACE_ATTR_NDPROXY_SLAVE
,

48 
	mIFACE_ATTR_MAX


51 c⁄° 
blobmsg_pﬁicy
 
	giÁ˚_©ås
[
IFACE_ATTR_MAX
] = {

52 [
IFACE_ATTR_INTERFACE
] = { .
«me
 = "öãrÁ˚", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

53 [
IFACE_ATTR_IFNAME
] = { .
«me
 = "i‚ame", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

54 [
IFACE_ATTR_NETWORKID
] = { .
«me
 = "√tw‹kid", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

55 [
IFACE_ATTR_DYNAMICDHCP
] = { .
«me
 = "dy«micdh˝", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

56 [
IFACE_ATTR_IGNORE
] = { .
«me
 = "ign‹e", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

57 [
IFACE_ATTR_LEASETIME
] = { .
«me
 = "Àa£time", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

58 [
IFACE_ATTR_START
] = { .
«me
 = "°¨t", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

59 [
IFACE_ATTR_LIMIT
] = { .
«me
 = "limô", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

60 [
IFACE_ATTR_MASTER
] = { .
«me
 = "ma°î", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

61 [
IFACE_ATTR_UPSTREAM
] = { .
«me
 = "up°ªam", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

62 [
IFACE_ATTR_RA
] = { .
«me
 = "ø", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

63 [
IFACE_ATTR_DHCPV4
] = { .
«me
 = "dh˝v4", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

64 [
IFACE_ATTR_DHCPV6
] = { .
«me
 = "dh˝v6", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

65 [
IFACE_ATTR_NDP
] = { .
«me
 = "ndp", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

66 [
IFACE_ATTR_ROUTER
] = { .
«me
 = "rouãr", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

67 [
IFACE_ATTR_DNS
] = { .
«me
 = "dns", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

68 [
IFACE_ATTR_DOMAIN
] = { .
«me
 = "domaö", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

69 [
IFACE_ATTR_FILTER_CLASS
] = { .
«me
 = "fûãr_˛ass", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

70 [
IFACE_ATTR_DHCPV6_RAW
] = { .
«me
 = "dh˝v6_øw", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

71 [
IFACE_ATTR_PD_MANAGER
] = { .
«me
 = "pd_m™agî", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

72 [
IFACE_ATTR_PD_CER
] = { .
«me
 = "pd_˚r", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

73 [
IFACE_ATTR_RA_DEFAULT
] = { .
«me
 = "ø_deÁu…", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

74 [
IFACE_ATTR_RA_MANAGEMENT
] = { .
«me
 = "ø_m™agemít", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

75 [
IFACE_ATTR_RA_OFFLINK
] = { .
«me
 = "ø_ofÊök", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

76 [
IFACE_ATTR_RA_PREFERENCE
] = { .
«me
 = "ø_¥e„ªn˚", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

77 [
IFACE_ATTR_RA_ADVROUTER
] = { .
«me
 = "ø_advrouãr", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

78 [
IFACE_ATTR_RA_MAXINTERVAL
] = { .
«me
 = "ø_maxöãrvÆ", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

79 [
IFACE_ATTR_NDPROXY_ROUTING
] = { .
«me
 = "nd¥oxy_routög", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

80 [
IFACE_ATTR_NDPROXY_SLAVE
] = { .
«me
 = "nd¥oxy_¶ave", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

83 c⁄° 
uci_blob_∑øm_öfo
 
	giÁ˚_©å_öfo
[
IFACE_ATTR_MAX
] = {

84 [
IFACE_ATTR_UPSTREAM
] = { .
ty≥
 = 
BLOBMSG_TYPE_STRING
 },

85 [
IFACE_ATTR_DNS
] = { .
ty≥
 = 
BLOBMSG_TYPE_STRING
 },

86 [
IFACE_ATTR_DOMAIN
] = { .
ty≥
 = 
BLOBMSG_TYPE_STRING
 },

89 c⁄° 
uci_blob_∑øm_li°
 
	göãrÁ˚_©å_li°
 = {

90 .
n_∑øms
 = 
IFACE_ATTR_MAX
,

91 .
	g∑øms
 = 
iÁ˚_©ås
,

92 .
	göfo
 = 
iÁ˚_©å_öfo
,

97 
	mLEASE_ATTR_IP
,

98 
	mLEASE_ATTR_MAC
,

99 
	mLEASE_ATTR_DUID
,

100 
	mLEASE_ATTR_HOSTID
,

101 
	mLEASE_ATTR_LEASETIME
,

102 
	mLEASE_ATTR_NAME
,

103 
	mLEASE_ATTR_MAX


107 c⁄° 
blobmsg_pﬁicy
 
	gÀa£_©ås
[
LEASE_ATTR_MAX
] = {

108 [
LEASE_ATTR_IP
] = { .
«me
 = "ù", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

109 [
LEASE_ATTR_MAC
] = { .
«me
 = "mac", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

110 [
LEASE_ATTR_DUID
] = { .
«me
 = "duid", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

111 [
LEASE_ATTR_HOSTID
] = { .
«me
 = "ho°id", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

112 [
LEASE_ATTR_LEASETIME
] = { .
«me
 = "Àa£time", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

113 [
LEASE_ATTR_NAME
] = { .
«me
 = "«me", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

117 c⁄° 
uci_blob_∑øm_li°
 
	gÀa£_©å_li°
 = {

118 .
n_∑øms
 = 
LEASE_ATTR_MAX
,

119 .
	g∑øms
 = 
Àa£_©ås
,

124 
	mODHCPD_ATTR_MAINDHCP
,

125 
	mODHCPD_ATTR_LEASEFILE
,

126 
	mODHCPD_ATTR_LEASETRIGGER
,

127 
	mODHCPD_ATTR_MAX


131 c⁄° 
blobmsg_pﬁicy
 
	godh˝d_©ås
[
LEASE_ATTR_MAX
] = {

132 [
ODHCPD_ATTR_MAINDHCP
] = { .
«me
 = "maödh˝", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

133 [
ODHCPD_ATTR_LEASEFILE
] = { .
«me
 = "Àa£fûe", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

134 [
ODHCPD_ATTR_LEASETRIGGER
] = { .
«me
 = "Àa£åiggî", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

138 c⁄° 
uci_blob_∑øm_li°
 
	godh˝d_©å_li°
 = {

139 .
n_∑øms
 = 
ODHCPD_ATTR_MAX
,

140 .
	g∑øms
 = 
odh˝d_©ås
,

144 
öãrÁ˚
* 
	$gë_öãrÁ˚
(c⁄° *
«me
)

146 
öãrÁ˚
 *
c
;

147 
	`li°_f‹_óch_íåy
(
c
, &
öãrÁ˚s
, 
hód
)

148 i‡(!
	`°rcmp
(
c
->
«me
,Çame))

149  
c
;

150  
NULL
;

151 
	}
}

154 
	$˛ón_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
)

156 
	`‰ì
(
iÁ˚
->
dns
);

157 
	`‰ì
(
iÁ˚
->
£¨ch
);

158 
	`‰ì
(
iÁ˚
->
up°ªam
);

159 
	`‰ì
(
iÁ˚
->
dh˝v4_rouãr
);

160 
	`‰ì
(
iÁ˚
->
dh˝v4_dns
);

161 
	`‰ì
(
iÁ˚
->
dh˝v6_øw
);

162 
	`‰ì
(
iÁ˚
->
fûãr_˛ass
);

163 
	`mem£t
(&
iÁ˚
->
ø
, 0, (*iÁ˚Ë- 
	`off£tof
(
öãrÁ˚
,Ña));

164 
	}
}

167 
	$˛o£_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
)

169 i‡(
iÁ˚
->
hód
.
√xt
)

170 
	`li°_dñ
(&
iÁ˚
->
hód
);

172 
	`£tup_rouãr_öãrÁ˚
(
iÁ˚
, 
Ál£
);

173 
	`£tup_dh˝v6_öãrÁ˚
(
iÁ˚
, 
Ál£
);

174 
	`£tup_ndp_öãrÁ˚
(
iÁ˚
, 
Ál£
);

175 
	`£tup_dh˝v4_öãrÁ˚
(
iÁ˚
, 
Ál£
);

177 
	`˛ón_öãrÁ˚
(
iÁ˚
);

178 
	`‰ì
(
iÁ˚
);

179 
	}
}

182 
	$∑r£_mode
(c⁄° *
mode
)

184 i‡(!
	`°rcmp
(
mode
, "disabled")) {

185  
RELAYD_DISABLED
;

186 } i‡(!
	`°rcmp
(
mode
, "server")) {

187  
RELAYD_SERVER
;

188 } i‡(!
	`°rcmp
(
mode
, "relay")) {

189  
RELAYD_RELAY
;

190 } i‡(!
	`°rcmp
(
mode
, "hybrid")) {

191  
RELAYD_HYBRID
;

195 
	}
}

198 
	$£t_c⁄fig
(
uci_£˘i⁄
 *
s
)

200 
blob_©å
 *
tb
[
ODHCPD_ATTR_MAX
], *
c
;

202 
	`blob_buf_öô
(&
b
, 0);

203 
	`uci_to_blob
(&
b
, 
s
, &
odh˝d_©å_li°
);

204 
	`blobmsg_∑r£
(
odh˝d_©ås
, 
ODHCPD_ATTR_MAX
, 
tb
, 
	`blob_d©a
(
b
.
hód
), 
	`blob_Àn
(b.head));

206 i‡((
c
 = 
tb
[
ODHCPD_ATTR_MAINDHCP
]))

207 
c⁄fig
.
Àgacy
 = 
	`blobmsg_gë_boﬁ
(
c
);

209 i‡((
c
 = 
tb
[
ODHCPD_ATTR_LEASEFILE
])) {

210 
	`‰ì
(
c⁄fig
.
dh˝_°©efûe
);

211 
c⁄fig
.
dh˝_°©efûe
 = 
	`°rdup
(
	`blobmsg_gë_°rög
(
c
));

214 i‡((
c
 = 
tb
[
ODHCPD_ATTR_LEASETRIGGER
])) {

215 
	`‰ì
(
c⁄fig
.
dh˝_cb
);

216 
c⁄fig
.
dh˝_cb
 = 
	`°rdup
(
	`blobmsg_gë_°rög
(
c
));

218 
	}
}

220 
	$∑r£_Àa£time
(
blob_©å
 *
c
) {

221 *
vÆ
 = 
	`blobmsg_gë_°rög
(
c
), *
íd±r
;

222 
time
 = 
	`°πod
(
vÆ
, &
íd±r
);

223 i‡(
time
 && 
íd±r
[0]) {

224 i‡(
íd±r
[0] == 's')

225 
time
 *= 1;

226 i‡(
íd±r
[0] == 'm')

227 
time
 *= 60;

228 i‡(
íd±r
[0] == 'h')

229 
time
 *= 3600;

230 i‡(
íd±r
[0] == 'd')

231 
time
 *= 24 * 3600;

232 i‡(
íd±r
[0] == 'w')

233 
time
 *= 7 * 24 * 3600;

235 
îr
;

238 i‡(
time
 >= 60)

239  
time
;

243 
îr
:

245 
	}
}

247 
	$£t_Àa£
(
uci_£˘i⁄
 *
s
)

249 
blob_©å
 *
tb
[
LEASE_ATTR_MAX
], *
c
;

251 
	`blob_buf_öô
(&
b
, 0);

252 
	`uci_to_blob
(&
b
, 
s
, &
Àa£_©å_li°
);

253 
	`blobmsg_∑r£
(
Àa£_©ås
, 
LEASE_ATTR_MAX
, 
tb
, 
	`blob_d©a
(
b
.
hód
), 
	`blob_Àn
(b.head));

255 
size_t
 
ho°Àn
 = 1;

256 i‡((
c
 = 
tb
[
LEASE_ATTR_NAME
]))

257 
ho°Àn
 = 
	`blobmsg_d©a_Àn
(
c
);

259 
Àa£
 *Àa£ = 
	`ˇŒoc
(1, (*Àa£Ë+ 
ho°Àn
);

260 i‡(!
Àa£
)

261 
îr
;

263 i‡(
ho°Àn
 > 1)

264 
	`mem˝y
(
Àa£
->
ho°«me
, 
	`blobmsg_gë_°rög
(
c
), 
ho°Àn
);

266 i‡((
c
 = 
tb
[
LEASE_ATTR_IP
]))

267 i‡(
	`öë_±⁄
(
AF_INET
, 
	`blobmsg_gë_°rög
(
c
), &
Àa£
->
ùaddr
) < 0)

268 
îr
;

270 i‡((
c
 = 
tb
[
LEASE_ATTR_MAC
]))

271 i‡(!
	`ëhî_©⁄_r
(
	`blobmsg_gë_°rög
(
c
), &
Àa£
->
mac
))

272 
îr
;

274 i‡((
c
 = 
tb
[
LEASE_ATTR_DUID
])) {

275 
size_t
 
duidÀn
 = (
	`blobmsg_d©a_Àn
(
c
) - 1) / 2;

276 
Àa£
->
duid
 = 
	`mÆloc
(
duidÀn
);

277 i‡(!
Àa£
->
duid
)

278 
îr
;

280 
ssize_t
 
Àn
 = 
	`odh˝d_unhexlify
(
Àa£
->
duid
,

281 
duidÀn
, 
	`blobmsg_gë_°rög
(
c
));

283 i‡(
Àn
 < 0)

284 
îr
;

286 
Àa£
->
duid_Àn
 = 
Àn
;

289 i‡((
c
 = 
tb
[
LEASE_ATTR_HOSTID
])) {

290 
î∫o
 = 0;

291 
Àa£
->
ho°id
 = 
	`°πoul
(
	`blobmsg_gë_°rög
(
c
), 
NULL
, 16);

292 i‡(
î∫o
)

293 
îr
;

296 i‡((
c
 = 
tb
[
LEASE_ATTR_LEASETIME
])) {

297 
time
 = 
	`∑r£_Àa£time
(
c
);

298 i‡(
time
 < 0)

299 
îr
;

301 i‡(
time
 >= 60)

302 
Àa£
->
dh˝v4_Àa£time
 = 
time
;

305 
	`li°_add
(&
Àa£
->
hód
, &
Àa£s
);

308 
îr
:

309 i‡(
Àa£
) {

310 
	`‰ì
(
Àa£
->
duid
);

311 
	`‰ì
(
Àa£
);

314 
	}
}

317 
	$c⁄fig_∑r£_öãrÁ˚
(*
d©a
, 
size_t
 
Àn
, c⁄° *
«me
, 
boﬁ
 
ovîwrôe
)

319 
blob_©å
 *
tb
[
IFACE_ATTR_MAX
], *
c
;

320 
	`blobmsg_∑r£
(
iÁ˚_©ås
, 
IFACE_ATTR_MAX
, 
tb
, 
d©a
, 
Àn
);

322 i‡(
tb
[
IFACE_ATTR_INTERFACE
])

323 
«me
 = 
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_INTERFACE
]);

325 i‡(!
«me
)

328 
öãrÁ˚
 *
iÁ˚
 = 
	`gë_öãrÁ˚
(
«me
);

329 i‡(!
iÁ˚
) {

330 
iÁ˚
 = 
	`ˇŒoc
(1, (*iface));

331 i‡(!
iÁ˚
)

334 
	`°∫˝y
(
iÁ˚
->
«me
,Çame, (iface->name) - 1);

335 
	`li°_add
(&
iÁ˚
->
hód
, &
öãrÁ˚s
);

336 
ovîwrôe
 = 
åue
;

339 c⁄° *
i‚ame
 = 
NULL
;

340 i‡(
ovîwrôe
) {

341 i‡((
c
 = 
tb
[
IFACE_ATTR_IFNAME
]))

342 
i‚ame
 = 
	`blobmsg_gë_°rög
(
c
);

343 i‡((
c
 = 
tb
[
IFACE_ATTR_NETWORKID
]))

344 
i‚ame
 = 
	`blobmsg_gë_°rög
(
c
);

347 #ifde‡
WITH_UBUS


348 i‡(
ovîwrôe
 || !
iÁ˚
->
i‚ame
[0])

349 
i‚ame
 = 
	`ubus_gë_i‚ame
(
«me
);

352 i‡(!
iÁ˚
->
i‚ame
[0] && !ifname)

353 
îr
;

355 i‡(
i‚ame
)

356 
	`°∫˝y
(
iÁ˚
->
i‚ame
, ifname, (iface->ifname) - 1);

358 i‡((
iÁ˚
->
ifödex
 = 
	`if_«mëoödex
(iÁ˚->
i‚ame
)) <= 0)

359 
îr
;

361 
iÁ˚
->
öu£
 = 
åue
;

363 i‡((
c
 = 
tb
[
IFACE_ATTR_DYNAMICDHCP
]))

364 
iÁ˚
->
no_dy«mic_dh˝
 = !
	`blobmsg_gë_boﬁ
(
c
);

366 i‡(
ovîwrôe
 && (
c
 = 
tb
[
IFACE_ATTR_IGNORE
]))

367 
iÁ˚
->
ign‹e
 = 
	`blobmsg_gë_boﬁ
(
c
);

369 i‡((
c
 = 
tb
[
IFACE_ATTR_LEASETIME
])) {

370 
time
 = 
	`∑r£_Àa£time
(
c
);

371 i‡(
time
 < 0)

372 
îr
;

374 i‡(
time
 >= 60)

375 
iÁ˚
->
dh˝v4_Àa£time
 = 
time
;

378 i‡((
c
 = 
tb
[
IFACE_ATTR_START
])) {

379 
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 = 
	`ht⁄l
(
	`blobmsg_gë_u32
(
c
));

381 i‡(
c⁄fig
.
Àgacy
)

382 
iÁ˚
->
dh˝v4
 = 
RELAYD_SERVER
;

385 i‡((
c
 = 
tb
[
IFACE_ATTR_LIMIT
]))

386 
iÁ˚
->
dh˝v4_íd
.
s_addr
 = 
	`ht⁄l
(

387 
	`¡ohl
(
iÁ˚
->
dh˝v4_°¨t
.
s_addr
Ë+ 
	`blobmsg_gë_u32
(
c
));

389 i‡((
c
 = 
tb
[
IFACE_ATTR_MASTER
]))

390 
iÁ˚
->
ma°î
 = 
	`blobmsg_gë_boﬁ
(
c
);

392 i‡(
ovîwrôe
 && (
c
 = 
tb
[
IFACE_ATTR_UPSTREAM
])) {

393 
blob_©å
 *
cur
;

394 
ªm
;

396 
	`blobmsg_f‹_óch_©å
(
cur
, 
c
, 
ªm
) {

397 i‡(
	`blobmsg_ty≥
(
cur
Ë!
BLOBMSG_TYPE_STRING
 || !
	`blobmsg_check_©å
(cur, 
Ál£
))

400 
iÁ˚
->
up°ªam
 = 
	`ªÆloc
(iface->upstream,

401 
iÁ˚
->
up°ªam_Àn
 + 
	`blobmsg_d©a_Àn
(
cur
));

402 i‡(!
iÁ˚
->
up°ªam
)

403 
îr
;

405 
	`mem˝y
(
iÁ˚
->
up°ªam
 + iÁ˚->
up°ªam_Àn
, 
	`blobmsg_gë_°rög
(
cur
), 
	`blobmsg_d©a_Àn
(cur));

406 
iÁ˚
->
up°ªam_Àn
 +
	`blobmsg_d©a_Àn
(
cur
);

410 
mode
;

411 i‡((
c
 = 
tb
[
IFACE_ATTR_RA
])) {

412 i‡((
mode
 = 
	`∑r£_mode
(
	`blobmsg_gë_°rög
(
c
))) >= 0)

413 
iÁ˚
->
ø
 = 
mode
;

415 
îr
;

418 i‡((
c
 = 
tb
[
IFACE_ATTR_DHCPV4
])) {

419 i‡((
mode
 = 
	`∑r£_mode
(
	`blobmsg_gë_°rög
(
c
))) >= 0)

420 
iÁ˚
->
dh˝v4
 = 
mode
;

422 
îr
;

425 i‡((
c
 = 
tb
[
IFACE_ATTR_DHCPV6
])) {

426 i‡((
mode
 = 
	`∑r£_mode
(
	`blobmsg_gë_°rög
(
c
))) >= 0)

427 
iÁ˚
->
dh˝v6
 = 
mode
;

429 
îr
;

432 i‡((
c
 = 
tb
[
IFACE_ATTR_NDP
])) {

433 i‡((
mode
 = 
	`∑r£_mode
(
	`blobmsg_gë_°rög
(
c
))) >= 0)

434 
iÁ˚
->
ndp
 = 
mode
;

436 
îr
;

439 i‡((
c
 = 
tb
[
IFACE_ATTR_ROUTER
])) {

440 
blob_©å
 *
cur
;

441 
ªm
;

443 
	`blobmsg_f‹_óch_©å
(
cur
, 
c
, 
ªm
) {

444 i‡(
	`blobmsg_ty≥
(
cur
Ë!
BLOBMSG_TYPE_STRING
 || !
	`blobmsg_check_©å
(cur, 
Ál£
))

447 
ö_addr
 
addr4
;

448 i‡(
	`öë_±⁄
(
AF_INET
, 
	`blobmsg_gë_°rög
(
cur
), &
addr4
) == 1) {

449 
iÁ˚
->
dh˝v4_rouãr
 = 
	`ªÆloc
(iface->dhcpv4_router,

450 (++
iÁ˚
->
dh˝v4_rouãr_˙t
Ë* (*iÁ˚->
dh˝v4_rouãr
));

451 i‡(!
iÁ˚
->
dh˝v4_rouãr
)

452 
îr
;

454 
iÁ˚
->
dh˝v4_rouãr
[iÁ˚->
dh˝v4_rouãr_˙t
 - 1] = 
addr4
;

456 
îr
;

461 i‡((
c
 = 
tb
[
IFACE_ATTR_DNS
])) {

462 
blob_©å
 *
cur
;

463 
ªm
;

465 
iÁ˚
->
Æways_ªwrôe_dns
 = 
åue
;

466 
	`blobmsg_f‹_óch_©å
(
cur
, 
c
, 
ªm
) {

467 i‡(
	`blobmsg_ty≥
(
cur
Ë!
BLOBMSG_TYPE_STRING
 || !
	`blobmsg_check_©å
(cur, 
Ál£
))

470 
ö_addr
 
addr4
;

471 
ö6_addr
 
addr6
;

472 i‡(
	`öë_±⁄
(
AF_INET
, 
	`blobmsg_gë_°rög
(
cur
), &
addr4
) == 1) {

473 
iÁ˚
->
dh˝v4_dns
 = 
	`ªÆloc
(iface->dhcpv4_dns,

474 (++
iÁ˚
->
dh˝v4_dns_˙t
Ë* (*iÁ˚->
dh˝v4_dns
));

475 i‡(!
iÁ˚
->
dh˝v4_dns
)

476 
îr
;

478 
iÁ˚
->
dh˝v4_dns
[iÁ˚->
dh˝v4_dns_˙t
 - 1] = 
addr4
;

479 } i‡(
	`öë_±⁄
(
AF_INET6
, 
	`blobmsg_gë_°rög
(
cur
), &
addr6
) == 1) {

480 
iÁ˚
->
dns
 = 
	`ªÆloc
(iface->dns,

481 (++
iÁ˚
->
dns_˙t
Ë* (*iÁ˚->
dns
));

482 i‡(!
iÁ˚
->
dns
)

483 
îr
;

485 
iÁ˚
->
dns
[iÁ˚->
dns_˙t
 - 1] = 
addr6
;

487 
îr
;

492 i‡((
c
 = 
tb
[
IFACE_ATTR_DOMAIN
])) {

493 
blob_©å
 *
cur
;

494 
ªm
;

496 
	`blobmsg_f‹_óch_©å
(
cur
, 
c
, 
ªm
) {

497 i‡(
	`blobmsg_ty≥
(
cur
Ë!
BLOBMSG_TYPE_STRING
 || !
	`blobmsg_check_©å
(cur, 
Ál£
))

500 
uöt8_t
 
buf
[256];

501 *
domaö
 = 
	`blobmsg_gë_°rög
(
cur
);

502 
size_t
 
domaöÀn
 = 
	`°æí
(
domaö
);

503 i‡(
domaöÀn
 > 0 && 
domaö
[domainlen - 1] == '.')

504 
domaö
[
domaöÀn
 - 1] = 0;

506 
Àn
 = 
	`dn_comp
(
domaö
, 
buf
, (buf), 
NULL
, NULL);

507 i‡(
Àn
 <= 0)

508 
îr
;

510 
iÁ˚
->
£¨ch
 = 
	`ªÆloc
(iÁ˚->£¨ch, iÁ˚->
£¨ch_Àn
 + 
Àn
);

511 i‡(!
iÁ˚
->
£¨ch
)

512 
îr
;

514 
	`mem˝y
(&
iÁ˚
->
£¨ch
[iÁ˚->
£¨ch_Àn
], 
buf
, 
Àn
);

515 
iÁ˚
->
£¨ch_Àn
 +
Àn
;

519 i‡((
c
 = 
tb
[
IFACE_ATTR_FILTER_CLASS
])) {

520 
iÁ˚
->
fûãr_˛ass
 = 
	`ªÆloc
(iÁ˚->fûãr_˛ass, 
	`blobmsg_d©a_Àn
(
c
) + 1);

521 
	`mem˝y
(
iÁ˚
->
fûãr_˛ass
, 
	`blobmsg_gë_°rög
(
c
), 
	`blobmsg_d©a_Àn
(c) + 1);

524 i‡((
c
 = 
tb
[
IFACE_ATTR_DHCPV6_RAW
])) {

525 
iÁ˚
->
dh˝v6_øw_Àn
 = 
	`blobmsg_d©a_Àn
(
c
) / 2;

526 
iÁ˚
->
dh˝v6_øw
 = 
	`ªÆloc
(iÁ˚->dh˝v6_øw, iÁ˚->
dh˝v6_øw_Àn
);

527 
	`odh˝d_unhexlify
(
iÁ˚
->
dh˝v6_øw
, iÁ˚->
dh˝v6_øw_Àn
, 
	`blobmsg_gë_°rög
(
c
));

530 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_DEFAULT
]))

531 
iÁ˚
->
deÁu…_rouãr
 = 
	`blobmsg_gë_u32
(
c
);

533 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_MANAGEMENT
]))

534 
iÁ˚
->
m™aged
 = 
	`blobmsg_gë_u32
(
c
);

535 i‡(
ovîwrôe
)

536 
iÁ˚
->
m™aged
 = 1;

538 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_OFFLINK
]))

539 
iÁ˚
->
ø_nŸ_⁄lök
 = 
	`blobmsg_gë_boﬁ
(
c
);

541 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_ADVROUTER
]))

542 
iÁ˚
->
ø_advrouãr
 = 
	`blobmsg_gë_boﬁ
(
c
);

544 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_MAXINTERVAL
]))

545 
iÁ˚
->
ø_maxöãrvÆ
 = 
	`blobmsg_gë_u32
(
c
);

547 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_PREFERENCE
])) {

548 c⁄° *
¥io
 = 
	`blobmsg_gë_°rög
(
c
);

550 i‡(!
	`°rcmp
(
¥io
, "high"))

551 
iÁ˚
->
rouã_¥e„ªn˚
 = 1;

552 i‡(!
	`°rcmp
(
¥io
, "low"))

553 
iÁ˚
->
rouã_¥e„ªn˚
 = -1;

554 i‡(!
	`°rcmp
(
¥io
, "medium") || !strcmp(prio, "default"))

555 
iÁ˚
->
rouã_¥e„ªn˚
 = 0;

557 
îr
;

560 i‡((
c
 = 
tb
[
IFACE_ATTR_PD_MANAGER
]))

561 
	`°∫˝y
(
iÁ˚
->
dh˝v6_pd_m™agî
, 
	`blobmsg_gë_°rög
(
c
),

562 (
iÁ˚
->
dh˝v6_pd_m™agî
) - 1);

564 i‡((
c
 = 
tb
[
IFACE_ATTR_PD_CER
]) &&

565 
	`öë_±⁄
(
AF_INET6
, 
	`blobmsg_gë_°rög
(
c
), &
iÁ˚
->
dh˝v6_pd_˚r
) < 1)

566 
îr
;

568 i‡((
c
 = 
tb
[
IFACE_ATTR_NDPROXY_ROUTING
]))

569 
iÁ˚
->
À¨n_rouãs
 = 
	`blobmsg_gë_boﬁ
(
c
);

570 i‡(
ovîwrôe
)

571 
iÁ˚
->
À¨n_rouãs
 = 
åue
;

573 i‡((
c
 = 
tb
[
IFACE_ATTR_NDPROXY_SLAVE
]))

574 
iÁ˚
->
exã∫Æ
 = 
	`blobmsg_gë_boﬁ
(
c
);

578 
îr
:

579 
	`˛o£_öãrÁ˚
(
iÁ˚
);

581 
	}
}

583 
	$£t_öãrÁ˚
(
uci_£˘i⁄
 *
s
)

585 
	`blob_buf_öô
(&
b
, 0);

586 
	`uci_to_blob
(&
b
, 
s
, &
öãrÁ˚_©å_li°
);

587  
	`c⁄fig_∑r£_öãrÁ˚
(
	`blob_d©a
(
b
.
hód
), 
	`blob_Àn
(b.hód), 
s
->
e
.
«me
, 
åue
);

588 
	}
}

591 
	$odh˝d_ªlﬂd
()

593 
uci_c⁄ãxt
 *
uci
 = 
	`uci_Æloc_c⁄ãxt
();

594 !
	`li°_em±y
(&
Àa£s
)) {

595 
Àa£
 *
l
 = 
	`li°_fú°_íåy
(&
Àa£s
, Àa£, 
hód
);

596 
	`li°_dñ
(&
l
->
hód
);

597 
	`‰ì
(
l
->
duid
);

598 
	`‰ì
(
l
);

601 
öãrÁ˚
 *
ma°î
 = 
NULL
, *
i
, *
n
;

603 i‡(!
uci
)

606 
	`li°_f‹_óch_íåy
(
i
, &
öãrÁ˚s
, 
hód
)

607 
	`˛ón_öãrÁ˚
(
i
);

609 
uci_∑ckage
 *
dh˝
 = 
NULL
;

610 i‡(!
	`uci_lﬂd
(
uci
, "dh˝", &
dh˝
)) {

611 
uci_ñemít
 *
e
;

612 
	`uci_f‹óch_ñemít
(&
dh˝
->
£˘i⁄s
, 
e
) {

613 
uci_£˘i⁄
 *
s
 = 
	`uci_to_£˘i⁄
(
e
);

614 i‡(!
	`°rcmp
(
s
->
ty≥
, "host"))

615 
	`£t_Àa£
(
s
);

616 i‡(!
	`°rcmp
(
s
->
ty≥
, "odhcpd"))

617 
	`£t_c⁄fig
(
s
);

620 
	`uci_f‹óch_ñemít
(&
dh˝
->
£˘i⁄s
, 
e
) {

621 
uci_£˘i⁄
 *
s
 = 
	`uci_to_£˘i⁄
(
e
);

622 i‡(!
	`°rcmp
(
s
->
ty≥
, "dhcp"))

623 
	`£t_öãrÁ˚
(
s
);

628 #ifde‡
WITH_UBUS


629 
	`ubus_≠∂y_√tw‹k
();

632 
boﬁ
 
™y_dh˝v6_¶ave
 = 
Ál£
, 
™y_ø_¶ave
 = fÆ£, 
™y_ndp_¶ave
 = false;

635 
	`li°_f‹_óch_íåy
(
i
, &
öãrÁ˚s
, 
hód
) {

636 i‡(
i
->
ma°î
)

639 i‡(
i
->
dh˝v6
 =
RELAYD_HYBRID
 || i->dh˝v6 =
RELAYD_RELAY
)

640 
™y_dh˝v6_¶ave
 = 
åue
;

642 i‡(
i
->
ø
 =
RELAYD_HYBRID
 || i->ø =
RELAYD_RELAY
)

643 
™y_ø_¶ave
 = 
åue
;

645 i‡(
i
->
ndp
 =
RELAYD_HYBRID
 || i->nd∞=
RELAYD_RELAY
)

646 
™y_ndp_¶ave
 = 
åue
;

650 
	`li°_f‹_óch_íåy
(
i
, &
öãrÁ˚s
, 
hód
) {

651 i‡(!
i
->
ma°î
)

654 
odh˝d_mode
 
hybrid_mode
 = 
RELAYD_DISABLED
;

655 #ifde‡
WITH_UBUS


656 i‡(!
	`ubus_has_¥efix
(
i
->
«me
, i->
i‚ame
))

657 
hybrid_mode
 = 
RELAYD_RELAY
;

660 i‡(
i
->
dh˝v6
 =
RELAYD_HYBRID
)

661 
i
->
dh˝v6
 = 
hybrid_mode
;

663 i‡(
i
->
dh˝v6
 =
RELAYD_RELAY
 && !
™y_dh˝v6_¶ave
)

664 
i
->
dh˝v6
 = 
RELAYD_DISABLED
;

666 i‡(
i
->
ø
 =
RELAYD_HYBRID
)

667 
i
->
ø
 = 
hybrid_mode
;

669 i‡(
i
->
ø
 =
RELAYD_RELAY
 && !
™y_ø_¶ave
)

670 
i
->
ø
 = 
RELAYD_DISABLED
;

672 i‡(
i
->
ndp
 =
RELAYD_HYBRID
)

673 
i
->
ndp
 = 
hybrid_mode
;

675 i‡(
i
->
ndp
 =
RELAYD_RELAY
 && !
™y_ndp_¶ave
)

676 
i
->
ndp
 = 
RELAYD_DISABLED
;

678 i‡(
i
->
dh˝v6
 =
RELAYD_RELAY
 || i->
ø
 =RELAYD_RELAY || i->
ndp
 == RELAYD_RELAY)

679 
ma°î
 = 
i
;

683 
	`li°_f‹_óch_íåy_ß„
(
i
, 
n
, &
öãrÁ˚s
, 
hód
) {

684 i‡(
i
->
öu£
) {

686 i‡(
i
->
dh˝v6
 =
RELAYD_HYBRID
)

687 
i
->
dh˝v6
 = (
ma°î
 && ma°î->dh˝v6 =
RELAYD_RELAY
) ?

688 
RELAYD_RELAY
 : 
RELAYD_SERVER
;

690 i‡(
i
->
ø
 =
RELAYD_HYBRID
)

691 
i
->
ø
 = (
ma°î
 && ma°î->ø =
RELAYD_RELAY
) ?

692 
RELAYD_RELAY
 : 
RELAYD_SERVER
;

694 i‡(
i
->
ndp
 =
RELAYD_HYBRID
)

695 
i
->
ndp
 = (
ma°î
 && ma°î->nd∞=
RELAYD_RELAY
) ?

696 
RELAYD_RELAY
 : 
RELAYD_DISABLED
;

698 
	`£tup_rouãr_öãrÁ˚
(
i
, 
åue
);

699 
	`£tup_dh˝v6_öãrÁ˚
(
i
, 
åue
);

700 
	`£tup_ndp_öãrÁ˚
(
i
, 
åue
);

701 
	`£tup_dh˝v4_öãrÁ˚
(
i
, 
åue
);

703 
	`˛o£_öãrÁ˚
(
i
);

707 
	`uci_u∆ﬂd
(
uci
, 
dh˝
);

708 
	`uci_‰ì_c⁄ãxt
(
uci
);

709 
	}
}

712 
	$h™dÀ_sig«l
(
sig«l
)

714 
b
[1] = {0};

716 i‡(
sig«l
 =
SIGHUP
) {

717 i‡(
	`wrôe
(
ªlﬂd_pùe
[1], 
b
, (b)) < 0) {}

719 
	`ulo›_íd
();

720 
	}
}

724 
	$ªlﬂd_cb
(
ulo›_fd
 *
u
, 
_unu£d
 
evíts
)

726 
b
[512];

727 i‡(
	`ªad
(
u
->
fd
, 
b
, (b)) < 0) {}

728 
	`odh˝d_ªlﬂd
();

729 
	}
}

731 
ulo›_fd
 
	gªlﬂd_fd
 = { .
cb
 = 
ªlﬂd_cb
 };

733 
	$odh˝d_run
()

735 i‡(
	`pùe2
(
ªlﬂd_pùe
, 
O_NONBLOCK
 | 
O_CLOEXEC
) < 0) {}

736 
ªlﬂd_fd
.
fd
 = 
ªlﬂd_pùe
[0];

737 
	`ulo›_fd_add
(&
ªlﬂd_fd
, 
ULOOP_READ
);

739 
	`sig«l
(
SIGTERM
, 
h™dÀ_sig«l
);

740 
	`sig«l
(
SIGINT
, 
h™dÀ_sig«l
);

741 
	`sig«l
(
SIGHUP
, 
h™dÀ_sig«l
);

743 #ifde‡
WITH_UBUS


744 
	`öô_ubus
())

745 
	`¶ìp
(1);

748 
	`odh˝d_ªlﬂd
();

749 
	`ulo›_run
();

751 !
	`li°_em±y
(&
öãrÁ˚s
))

752 
	`˛o£_öãrÁ˚
(
	`li°_fú°_íåy
(&
öãrÁ˚s
, 
öãrÁ˚
, 
hód
));

753 
	}
}

	@config_bhu.bak.c

1 
	#_GNU_SOURCE


	)

2 
	~<f˙é.h
>

3 
	~<ªsﬁv.h
>

4 
	~<sig«l.h
>

5 
	~<¨∑/öë.h
>

6 
	~<f˙é.h
>

7 
	~<uni°d.h
>

13 
	~"odh˝d.h
"

15 
blob_buf
 
	gb
;

16 
	gªlﬂd_pùe
[2];

17 
li°_hód
 
	gÀa£s
 = 
LIST_HEAD_INIT
(
Àa£s
);

18 
li°_hód
 
	göãrÁ˚s
 = 
LIST_HEAD_INIT
(
öãrÁ˚s
);

19 
c⁄fig
 
	gc⁄fig
 = {
Ál£
, 
NULL
, NULL};

22 
	mIFACE_ATTR_INTERFACE
,

23 
	mIFACE_ATTR_IFNAME
,

24 
	mIFACE_ATTR_NETWORKID
,

25 
	mIFACE_ATTR_DYNAMICDHCP
,

26 
	mIFACE_ATTR_IGNORE
,

27 
	mIFACE_ATTR_LEASETIME
,

28 
	mIFACE_ATTR_LIMIT
,

29 
	mIFACE_ATTR_START
,

30 
	mIFACE_ATTR_MASTER
,

31 
	mIFACE_ATTR_UPSTREAM
,

32 
	mIFACE_ATTR_RA
,

33 
	mIFACE_ATTR_DHCPV4
,

34 
	mIFACE_ATTR_DHCPV6
,

35 
	mIFACE_ATTR_NDP
,

36 
	mIFACE_ATTR_ROUTER
,

37 
	mIFACE_ATTR_DNS
,

38 
	mIFACE_ATTR_DOMAIN
,

39 
	mIFACE_ATTR_FILTER_CLASS
,

40 
	mIFACE_ATTR_DHCPV6_RAW
,

41 
	mIFACE_ATTR_RA_DEFAULT
,

42 
	mIFACE_ATTR_RA_MANAGEMENT
,

43 
	mIFACE_ATTR_RA_OFFLINK
,

44 
	mIFACE_ATTR_RA_PREFERENCE
,

45 
	mIFACE_ATTR_RA_ADVROUTER
,

46 
	mIFACE_ATTR_RA_MAXINTERVAL
,

47 
	mIFACE_ATTR_PD_MANAGER
,

48 
	mIFACE_ATTR_PD_CER
,

49 
	mIFACE_ATTR_NDPROXY_ROUTING
,

50 
	mIFACE_ATTR_NDPROXY_SLAVE
,

51 
	mIFACE_ATTR_MAX


54 c⁄° 
blobmsg_pﬁicy
 
	giÁ˚_©ås
[
IFACE_ATTR_MAX
] = {

55 [
IFACE_ATTR_INTERFACE
] = { .
«me
 = "öãrÁ˚", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

56 [
IFACE_ATTR_IFNAME
] = { .
«me
 = "i‚ame", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

57 [
IFACE_ATTR_NETWORKID
] = { .
«me
 = "√tw‹kid", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

58 [
IFACE_ATTR_DYNAMICDHCP
] = { .
«me
 = "dy«micdh˝", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

59 [
IFACE_ATTR_IGNORE
] = { .
«me
 = "ign‹e", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

60 [
IFACE_ATTR_LEASETIME
] = { .
«me
 = "Àa£time", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

61 [
IFACE_ATTR_START
] = { .
«me
 = "°¨t", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

62 [
IFACE_ATTR_LIMIT
] = { .
«me
 = "limô", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

63 [
IFACE_ATTR_MASTER
] = { .
«me
 = "ma°î", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

64 [
IFACE_ATTR_UPSTREAM
] = { .
«me
 = "up°ªam", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

65 [
IFACE_ATTR_RA
] = { .
«me
 = "ø", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

66 [
IFACE_ATTR_DHCPV4
] = { .
«me
 = "dh˝v4", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

67 [
IFACE_ATTR_DHCPV6
] = { .
«me
 = "dh˝v6", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

68 [
IFACE_ATTR_NDP
] = { .
«me
 = "ndp", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

69 [
IFACE_ATTR_ROUTER
] = { .
«me
 = "rouãr", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

70 [
IFACE_ATTR_DNS
] = { .
«me
 = "dns", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

71 [
IFACE_ATTR_DOMAIN
] = { .
«me
 = "domaö", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

72 [
IFACE_ATTR_FILTER_CLASS
] = { .
«me
 = "fûãr_˛ass", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

73 [
IFACE_ATTR_DHCPV6_RAW
] = { .
«me
 = "dh˝v6_øw", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

74 [
IFACE_ATTR_PD_MANAGER
] = { .
«me
 = "pd_m™agî", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

75 [
IFACE_ATTR_PD_CER
] = { .
«me
 = "pd_˚r", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

76 [
IFACE_ATTR_RA_DEFAULT
] = { .
«me
 = "ø_deÁu…", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

77 [
IFACE_ATTR_RA_MANAGEMENT
] = { .
«me
 = "ø_m™agemít", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

78 [
IFACE_ATTR_RA_OFFLINK
] = { .
«me
 = "ø_ofÊök", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

79 [
IFACE_ATTR_RA_PREFERENCE
] = { .
«me
 = "ø_¥e„ªn˚", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

80 [
IFACE_ATTR_RA_ADVROUTER
] = { .
«me
 = "ø_advrouãr", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

81 [
IFACE_ATTR_RA_MAXINTERVAL
] = { .
«me
 = "ø_maxöãrvÆ", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

82 [
IFACE_ATTR_NDPROXY_ROUTING
] = { .
«me
 = "nd¥oxy_routög", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

83 [
IFACE_ATTR_NDPROXY_SLAVE
] = { .
«me
 = "nd¥oxy_¶ave", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

104 
	mLEASE_ATTR_IP
,

105 
	mLEASE_ATTR_MAC
,

106 
	mLEASE_ATTR_DUID
,

107 
	mLEASE_ATTR_HOSTID
,

108 
	mLEASE_ATTR_LEASETIME
,

109 
	mLEASE_ATTR_NAME
,

110 
	mLEASE_ATTR_MAX


114 c⁄° 
blobmsg_pﬁicy
 
	gÀa£_©ås
[
LEASE_ATTR_MAX
] = {

115 [
LEASE_ATTR_IP
] = { .
«me
 = "ù", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

116 [
LEASE_ATTR_MAC
] = { .
«me
 = "mac", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

117 [
LEASE_ATTR_DUID
] = { .
«me
 = "duid", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

118 [
LEASE_ATTR_HOSTID
] = { .
«me
 = "ho°id", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

119 [
LEASE_ATTR_LEASETIME
] = { .
«me
 = "Àa£time", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

120 [
LEASE_ATTR_NAME
] = { .
«me
 = "«me", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

133 
	mODHCPD_ATTR_MAINDHCP
,

134 
	mODHCPD_ATTR_LEASEFILE
,

135 
	mODHCPD_ATTR_LEASETRIGGER
,

136 
	mODHCPD_ATTR_MAX


140 c⁄° 
blobmsg_pﬁicy
 
	godh˝d_©ås
[
LEASE_ATTR_MAX
] = {

141 [
ODHCPD_ATTR_MAINDHCP
] = { .
«me
 = "maödh˝", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

142 [
ODHCPD_ATTR_LEASEFILE
] = { .
«me
 = "Àa£fûe", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

143 [
ODHCPD_ATTR_LEASETRIGGER
] = { .
«me
 = "Àa£åiggî", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

155 
öãrÁ˚
* 
	$gë_öãrÁ˚
(c⁄° *
«me
)

157 
öãrÁ˚
 *
c
;

158 
	`li°_f‹_óch_íåy
(
c
, &
öãrÁ˚s
, 
hód
)

159 i‡(!
	`°rcmp
(
c
->
«me
,Çame))

160  
c
;

161  
NULL
;

162 
	}
}

165 
	$˛ón_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
)

167 
	`‰ì
(
iÁ˚
->
dns
);

168 
	`‰ì
(
iÁ˚
->
£¨ch
);

169 
	`‰ì
(
iÁ˚
->
up°ªam
);

170 
	`‰ì
(
iÁ˚
->
dh˝v4_rouãr
);

171 
	`‰ì
(
iÁ˚
->
dh˝v4_dns
);

172 
	`‰ì
(
iÁ˚
->
dh˝v6_øw
);

173 
	`‰ì
(
iÁ˚
->
fûãr_˛ass
);

174 
	`mem£t
(&
iÁ˚
->
ø
, 0, (*iÁ˚Ë- 
	`off£tof
(
öãrÁ˚
,Ña));

175 
	}
}

178 
	$˛o£_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
)

180 i‡(
iÁ˚
->
hód
.
√xt
)

181 
	`li°_dñ
(&
iÁ˚
->
hód
);

183 
	`£tup_rouãr_öãrÁ˚
(
iÁ˚
, 
Ál£
);

184 
	`£tup_dh˝v6_öãrÁ˚
(
iÁ˚
, 
Ál£
);

185 
	`£tup_ndp_öãrÁ˚
(
iÁ˚
, 
Ál£
);

186 
	`£tup_dh˝v4_öãrÁ˚
(
iÁ˚
, 
Ál£
);

188 
	`˛ón_öãrÁ˚
(
iÁ˚
);

189 
	`‰ì
(
iÁ˚
);

190 
	}
}

193 
	$∑r£_mode
(c⁄° *
mode
)

195 i‡(!
	`°rcmp
(
mode
, "disabled")) {

196  
RELAYD_DISABLED
;

197 } i‡(!
	`°rcmp
(
mode
, "server")) {

198  
RELAYD_SERVER
;

199 } i‡(!
	`°rcmp
(
mode
, "relay")) {

200  
RELAYD_RELAY
;

201 } i‡(!
	`°rcmp
(
mode
, "hybrid")) {

202  
RELAYD_HYBRID
;

206 
	}
}

208 
	$odh˝d_ªlﬂd
()

213 !
	`li°_em±y
(&
Àa£s
)) {

214 
Àa£
 *
l
 = 
	`li°_fú°_íåy
(&
Àa£s
, Àa£, 
hód
);

215 
	`li°_dñ
(&
l
->
hód
);

216 
	`‰ì
(
l
->
duid
);

217 
	`‰ì
(
l
);

220 
öãrÁ˚
 *
ma°î
 = 
NULL
, *
i
, *
n
;

227 
	`li°_f‹_óch_íåy
(
i
, &
öãrÁ˚s
, 
hód
)

228 
	`˛ón_öãrÁ˚
(
i
);

251 #ifde‡
WITH_UBUS


252 
	`ubus_≠∂y_√tw‹k
();

255 
boﬁ
 
™y_dh˝v6_¶ave
 = 
Ál£
, 
™y_ø_¶ave
 = fÆ£, 
™y_ndp_¶ave
 = false;

258 
	`li°_f‹_óch_íåy
(
i
, &
öãrÁ˚s
, 
hód
) {

259 i‡(
i
->
ma°î
)

262 i‡(
i
->
dh˝v6
 =
RELAYD_HYBRID
 || i->dh˝v6 =
RELAYD_RELAY
)

263 
™y_dh˝v6_¶ave
 = 
åue
;

265 i‡(
i
->
ø
 =
RELAYD_HYBRID
 || i->ø =
RELAYD_RELAY
)

266 
™y_ø_¶ave
 = 
åue
;

268 i‡(
i
->
ndp
 =
RELAYD_HYBRID
 || i->nd∞=
RELAYD_RELAY
)

269 
™y_ndp_¶ave
 = 
åue
;

273 
	`li°_f‹_óch_íåy
(
i
, &
öãrÁ˚s
, 
hód
) {

274 i‡(!
i
->
ma°î
)

277 
odh˝d_mode
 
hybrid_mode
 = 
RELAYD_DISABLED
;

278 #ifde‡
WITH_UBUS


279 i‡(!
	`ubus_has_¥efix
(
i
->
«me
, i->
i‚ame
))

280 
hybrid_mode
 = 
RELAYD_RELAY
;

283 i‡(
i
->
dh˝v6
 =
RELAYD_HYBRID
)

284 
i
->
dh˝v6
 = 
hybrid_mode
;

286 i‡(
i
->
dh˝v6
 =
RELAYD_RELAY
 && !
™y_dh˝v6_¶ave
)

287 
i
->
dh˝v6
 = 
RELAYD_DISABLED
;

289 i‡(
i
->
ø
 =
RELAYD_HYBRID
)

290 
i
->
ø
 = 
hybrid_mode
;

292 i‡(
i
->
ø
 =
RELAYD_RELAY
 && !
™y_ø_¶ave
)

293 
i
->
ø
 = 
RELAYD_DISABLED
;

295 i‡(
i
->
ndp
 =
RELAYD_HYBRID
)

296 
i
->
ndp
 = 
hybrid_mode
;

298 i‡(
i
->
ndp
 =
RELAYD_RELAY
 && !
™y_ndp_¶ave
)

299 
i
->
ndp
 = 
RELAYD_DISABLED
;

301 i‡(
i
->
dh˝v6
 =
RELAYD_RELAY
 || i->
ø
 =RELAYD_RELAY || i->
ndp
 == RELAYD_RELAY)

302 
ma°î
 = 
i
;

306 
	`li°_f‹_óch_íåy_ß„
(
i
, 
n
, &
öãrÁ˚s
, 
hód
) {

307 i‡(
i
->
öu£
) {

309 i‡(
i
->
dh˝v6
 =
RELAYD_HYBRID
)

310 
i
->
dh˝v6
 = (
ma°î
 && ma°î->dh˝v6 =
RELAYD_RELAY
) ?

311 
RELAYD_RELAY
 : 
RELAYD_SERVER
;

313 i‡(
i
->
ø
 =
RELAYD_HYBRID
)

314 
i
->
ø
 = (
ma°î
 && ma°î->ø =
RELAYD_RELAY
) ?

315 
RELAYD_RELAY
 : 
RELAYD_SERVER
;

317 i‡(
i
->
ndp
 =
RELAYD_HYBRID
)

318 
i
->
ndp
 = (
ma°î
 && ma°î->nd∞=
RELAYD_RELAY
) ?

319 
RELAYD_RELAY
 : 
RELAYD_DISABLED
;

321 
	`£tup_rouãr_öãrÁ˚
(
i
, 
åue
);

322 
	`£tup_dh˝v6_öãrÁ˚
(
i
, 
åue
);

323 
	`£tup_ndp_öãrÁ˚
(
i
, 
åue
);

324 
	`£tup_dh˝v4_öãrÁ˚
(
i
, 
åue
);

326 
	`˛o£_öãrÁ˚
(
i
);

332 
	}
}

334 
	$ªlﬂd_cb
(
ulo›_fd
 *
u
, 
_unu£d
 
evíts
)

336 
b
[512];

337 i‡(
	`ªad
(
u
->
fd
, 
b
, (b)) < 0) {}

338 
	`odh˝d_ªlﬂd
();

339 
	}
}

341 
	$h™dÀ_sig«l
(
sig«l
)

343 
b
[1] = {0};

345 i‡(
sig«l
 =
SIGHUP
) {

346 i‡(
	`wrôe
(
ªlﬂd_pùe
[1], 
b
, (b)) < 0) {}

348 
	`ulo›_íd
();

349 
	}
}

350 
ulo›_fd
 
	gªlﬂd_fd
 = { .
cb
 = 
ªlﬂd_cb
 };

352 
	$odh˝d_run
()

360 
	`sig«l
(
SIGTERM
, 
h™dÀ_sig«l
);

361 
	`sig«l
(
SIGINT
, 
h™dÀ_sig«l
);

362 
	`sig«l
(
SIGHUP
, 
h™dÀ_sig«l
);

364 #ifde‡
WITH_UBUS


365 
	`öô_ubus
())

366 
	`¶ìp
(1);

369 
	`odh˝d_ªlﬂd
();

370 
	`ulo›_run
();

372 !
	`li°_em±y
(&
öãrÁ˚s
))

373 
	`˛o£_öãrÁ˚
(
	`li°_fú°_íåy
(&
öãrÁ˚s
, 
öãrÁ˚
, 
hód
));

374 
	}
}

	@config_bhu.c

1 
	~<f˙é.h
>

2 
	~<ªsﬁv.h
>

3 
	~<sig«l.h
>

4 
	~<¨∑/öë.h
>

5 
	~<uni°d.h
>

8 
	~<uci.h
>

9 
	~<uci_blob.h
>

12 
	~"odh˝d.h
"

15 
	gªlﬂd_pùe
[2];

16 
li°_hód
 
	gÀa£s
 = 
LIST_HEAD_INIT
(
Àa£s
);

17 
li°_hód
 
	göãrÁ˚s
 = 
LIST_HEAD_INIT
(
öãrÁ˚s
);

18 
c⁄fig
 
	gc⁄fig
 = {
Ál£
, 
NULL
, NULL};

22 
	mIFACE_ATTR_INTERFACE
,

23 
	mIFACE_ATTR_IFNAME
,

24 
	mIFACE_ATTR_NETWORKID
,

25 
	mIFACE_ATTR_DYNAMICDHCP
,

26 
	mIFACE_ATTR_IGNORE
,

27 
	mIFACE_ATTR_LEASETIME
,

28 
	mIFACE_ATTR_LIMIT
,

29 
	mIFACE_ATTR_START
,

30 
	mIFACE_ATTR_MASTER
,

31 
	mIFACE_ATTR_UPSTREAM
,

32 
	mIFACE_ATTR_RA
,

33 
	mIFACE_ATTR_DHCPV4
,

34 
	mIFACE_ATTR_DHCPV6
,

35 
	mIFACE_ATTR_NDP
,

36 
	mIFACE_ATTR_ROUTER
,

37 
	mIFACE_ATTR_DNS
,

38 
	mIFACE_ATTR_DOMAIN
,

39 
	mIFACE_ATTR_FILTER_CLASS
,

40 
	mIFACE_ATTR_DHCPV6_RAW
,

41 
	mIFACE_ATTR_RA_DEFAULT
,

42 
	mIFACE_ATTR_RA_MANAGEMENT
,

43 
	mIFACE_ATTR_RA_OFFLINK
,

44 
	mIFACE_ATTR_RA_PREFERENCE
,

45 
	mIFACE_ATTR_RA_ADVROUTER
,

46 
	mIFACE_ATTR_RA_MAXINTERVAL
,

47 
	mIFACE_ATTR_PD_MANAGER
,

48 
	mIFACE_ATTR_PD_CER
,

49 
	mIFACE_ATTR_NDPROXY_ROUTING
,

50 
	mIFACE_ATTR_NDPROXY_SLAVE
,

51 
	mIFACE_ATTR_MAX


54 c⁄° 
blobmsg_pﬁicy
 
	giÁ˚_©ås
[
IFACE_ATTR_MAX
] = {

55 [
IFACE_ATTR_INTERFACE
] = { .
«me
 = "öãrÁ˚", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

56 [
IFACE_ATTR_IFNAME
] = { .
«me
 = "i‚ame", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

57 [
IFACE_ATTR_NETWORKID
] = { .
«me
 = "√tw‹kid", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

58 [
IFACE_ATTR_DYNAMICDHCP
] = { .
«me
 = "dy«micdh˝", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

59 [
IFACE_ATTR_IGNORE
] = { .
«me
 = "ign‹e", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

60 [
IFACE_ATTR_LEASETIME
] = { .
«me
 = "Àa£time", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

61 [
IFACE_ATTR_START
] = { .
«me
 = "°¨t", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

62 [
IFACE_ATTR_LIMIT
] = { .
«me
 = "limô", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

63 [
IFACE_ATTR_MASTER
] = { .
«me
 = "ma°î", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

64 [
IFACE_ATTR_UPSTREAM
] = { .
«me
 = "up°ªam", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

65 [
IFACE_ATTR_RA
] = { .
«me
 = "ø", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

66 [
IFACE_ATTR_DHCPV4
] = { .
«me
 = "dh˝v4", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

67 [
IFACE_ATTR_DHCPV6
] = { .
«me
 = "dh˝v6", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

68 [
IFACE_ATTR_NDP
] = { .
«me
 = "ndp", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

69 [
IFACE_ATTR_ROUTER
] = { .
«me
 = "rouãr", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

70 [
IFACE_ATTR_DNS
] = { .
«me
 = "dns", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

71 [
IFACE_ATTR_DOMAIN
] = { .
«me
 = "domaö", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

72 [
IFACE_ATTR_FILTER_CLASS
] = { .
«me
 = "fûãr_˛ass", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

73 [
IFACE_ATTR_DHCPV6_RAW
] = { .
«me
 = "dh˝v6_øw", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

74 [
IFACE_ATTR_PD_MANAGER
] = { .
«me
 = "pd_m™agî", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

75 [
IFACE_ATTR_PD_CER
] = { .
«me
 = "pd_˚r", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

76 [
IFACE_ATTR_RA_DEFAULT
] = { .
«me
 = "ø_deÁu…", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

77 [
IFACE_ATTR_RA_MANAGEMENT
] = { .
«me
 = "ø_m™agemít", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

78 [
IFACE_ATTR_RA_OFFLINK
] = { .
«me
 = "ø_ofÊök", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

79 [
IFACE_ATTR_RA_PREFERENCE
] = { .
«me
 = "ø_¥e„ªn˚", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

80 [
IFACE_ATTR_RA_ADVROUTER
] = { .
«me
 = "ø_advrouãr", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

81 [
IFACE_ATTR_RA_MAXINTERVAL
] = { .
«me
 = "ø_maxöãrvÆ", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

82 [
IFACE_ATTR_NDPROXY_ROUTING
] = { .
«me
 = "nd¥oxy_routög", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

83 [
IFACE_ATTR_NDPROXY_SLAVE
] = { .
«me
 = "nd¥oxy_¶ave", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

86 c⁄° 
uci_blob_∑øm_öfo
 
	giÁ˚_©å_öfo
[
IFACE_ATTR_MAX
] = {

87 [
IFACE_ATTR_UPSTREAM
] = { .
ty≥
 = 
BLOBMSG_TYPE_STRING
 },

88 [
IFACE_ATTR_DNS
] = { .
ty≥
 = 
BLOBMSG_TYPE_STRING
 },

89 [
IFACE_ATTR_DOMAIN
] = { .
ty≥
 = 
BLOBMSG_TYPE_STRING
 },

92 c⁄° 
uci_blob_∑øm_li°
 
	göãrÁ˚_©å_li°
 = {

93 .
n_∑øms
 = 
IFACE_ATTR_MAX
,

94 .
	g∑øms
 = 
iÁ˚_©ås
,

95 .
	göfo
 = 
iÁ˚_©å_öfo
,

100 
	mLEASE_ATTR_IP
,

101 
	mLEASE_ATTR_MAC
,

102 
	mLEASE_ATTR_DUID
,

103 
	mLEASE_ATTR_HOSTID
,

104 
	mLEASE_ATTR_LEASETIME
,

105 
	mLEASE_ATTR_NAME
,

106 
	mLEASE_ATTR_MAX


110 c⁄° 
blobmsg_pﬁicy
 
	gÀa£_©ås
[
LEASE_ATTR_MAX
] = {

111 [
LEASE_ATTR_IP
] = { .
«me
 = "ù", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

112 [
LEASE_ATTR_MAC
] = { .
«me
 = "mac", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

113 [
LEASE_ATTR_DUID
] = { .
«me
 = "duid", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

114 [
LEASE_ATTR_HOSTID
] = { .
«me
 = "ho°id", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

115 [
LEASE_ATTR_LEASETIME
] = { .
«me
 = "Àa£time", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

116 [
LEASE_ATTR_NAME
] = { .
«me
 = "«me", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

120 c⁄° 
uci_blob_∑øm_li°
 
	gÀa£_©å_li°
 = {

121 .
n_∑øms
 = 
LEASE_ATTR_MAX
,

122 .
	g∑øms
 = 
Àa£_©ås
,

127 
	mODHCPD_ATTR_MAINDHCP
,

128 
	mODHCPD_ATTR_LEASEFILE
,

129 
	mODHCPD_ATTR_LEASETRIGGER
,

130 
	mODHCPD_ATTR_MAX


134 c⁄° 
blobmsg_pﬁicy
 
	godh˝d_©ås
[
LEASE_ATTR_MAX
] = {

135 [
ODHCPD_ATTR_MAINDHCP
] = { .
«me
 = "maödh˝", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

136 [
ODHCPD_ATTR_LEASEFILE
] = { .
«me
 = "Àa£fûe", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

137 [
ODHCPD_ATTR_LEASETRIGGER
] = { .
«me
 = "Àa£åiggî", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

141 c⁄° 
uci_blob_∑øm_li°
 
	godh˝d_©å_li°
 = {

142 .
n_∑øms
 = 
ODHCPD_ATTR_MAX
,

143 .
	g∑øms
 = 
odh˝d_©ås
,

148 
öãrÁ˚
* 
	$gë_öãrÁ˚
(c⁄° *
«me
)

150 
öãrÁ˚
 *
c
;

151 
	`li°_f‹_óch_íåy
(
c
, &
öãrÁ˚s
, 
hód
)

152 i‡(!
	`°rcmp
(
c
->
«me
,Çame))

153  
c
;

154  
NULL
;

155 
	}
}

158 
	$˛ón_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
)

160 
	`‰ì
(
iÁ˚
->
dns
);

161 
	`‰ì
(
iÁ˚
->
£¨ch
);

162 
	`‰ì
(
iÁ˚
->
up°ªam
);

163 
	`‰ì
(
iÁ˚
->
dh˝v4_rouãr
);

164 
	`‰ì
(
iÁ˚
->
dh˝v4_dns
);

165 
	`‰ì
(
iÁ˚
->
dh˝v6_øw
);

166 
	`‰ì
(
iÁ˚
->
fûãr_˛ass
);

167 
	`mem£t
(&
iÁ˚
->
ø
, 0, (*iÁ˚Ë- 
	`off£tof
(
öãrÁ˚
,Ña));

168 
	}
}

171 
	$˛o£_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
)

173 i‡(
iÁ˚
->
hód
.
√xt
)

174 
	`li°_dñ
(&
iÁ˚
->
hód
);

176 
	`£tup_rouãr_öãrÁ˚
(
iÁ˚
, 
Ál£
);

177 
	`£tup_dh˝v6_öãrÁ˚
(
iÁ˚
, 
Ál£
);

178 
	`£tup_ndp_öãrÁ˚
(
iÁ˚
, 
Ál£
);

179 
	`£tup_dh˝v4_öãrÁ˚
(
iÁ˚
, 
Ál£
);

181 
	`˛ón_öãrÁ˚
(
iÁ˚
);

182 
	`‰ì
(
iÁ˚
);

183 
	}
}

187 
	$∑r£_mode
(c⁄° *
mode
)

189 i‡(!
	`°rcmp
(
mode
, "disabled")) {

190  
RELAYD_DISABLED
;

191 } i‡(!
	`°rcmp
(
mode
, "server")) {

192  
RELAYD_SERVER
;

193 } i‡(!
	`°rcmp
(
mode
, "relay")) {

194  
RELAYD_RELAY
;

195 } i‡(!
	`°rcmp
(
mode
, "hybrid")) {

196  
RELAYD_HYBRID
;

200 
	}
}

203 
	$£t_c⁄fig
(c⁄° *
°f
, c⁄° *
cb
)

217 
c⁄fig
.
Àgacy
 = 0;

227 
c⁄fig
.
dh˝_°©efûe
 = 
	`°rdup
(
°f
);

235 
c⁄fig
.
dh˝_cb
 = 
	`°rdup
(
cb
);

236 
	}
}

239 
	$∑r£_Àa£time
(
blob_©å
 *
c
) {

240 *
vÆ
 = 
	`blobmsg_gë_°rög
(
c
), *
íd±r
;

241 
time
 = 
	`°πod
(
vÆ
, &
íd±r
);

242 i‡(
time
 && 
íd±r
[0]) {

243 i‡(
íd±r
[0] == 's')

244 
time
 *= 1;

245 i‡(
íd±r
[0] == 'm')

246 
time
 *= 60;

247 i‡(
íd±r
[0] == 'h')

248 
time
 *= 3600;

249 i‡(
íd±r
[0] == 'd')

250 
time
 *= 24 * 3600;

251 i‡(
íd±r
[0] == 'w')

252 
time
 *= 7 * 24 * 3600;

254 
îr
;

257 i‡(
time
 >= 60)

258  
time
;

262 
îr
:

264 
	}
}

266 
	$£t_Àa£
()

268 
blob_©å
 *
tb
[
LEASE_ATTR_MAX
], *
c
;

270 
	`blob_buf_öô
(&
b
, 0);

272 
	`blobmsg_∑r£
(
Àa£_©ås
, 
LEASE_ATTR_MAX
, 
tb
, 
	`blob_d©a
(
b
.
hód
), 
	`blob_Àn
(b.head));

274 
size_t
 
ho°Àn
 = 1;

275 i‡((
c
 = 
tb
[
LEASE_ATTR_NAME
]))

276 
ho°Àn
 = 
	`blobmsg_d©a_Àn
(
c
);

278 
Àa£
 *Àa£ = 
	`ˇŒoc
(1, (*Àa£Ë+ 
ho°Àn
);

279 i‡(!
Àa£
)

280 
îr
;

282 i‡(
ho°Àn
 > 1)

283 
	`mem˝y
(
Àa£
->
ho°«me
, 
	`blobmsg_gë_°rög
(
c
), 
ho°Àn
);

285 i‡((
c
 = 
tb
[
LEASE_ATTR_IP
]))

286 i‡(
	`öë_±⁄
(
AF_INET
, 
	`blobmsg_gë_°rög
(
c
), &
Àa£
->
ùaddr
) < 0)

287 
îr
;

289 i‡((
c
 = 
tb
[
LEASE_ATTR_MAC
]))

290 i‡(!
	`ëhî_©⁄_r
(
	`blobmsg_gë_°rög
(
c
), &
Àa£
->
mac
))

291 
îr
;

293 i‡((
c
 = 
tb
[
LEASE_ATTR_DUID
])) {

294 
size_t
 
duidÀn
 = (
	`blobmsg_d©a_Àn
(
c
) - 1) / 2;

295 
Àa£
->
duid
 = 
	`mÆloc
(
duidÀn
);

296 i‡(!
Àa£
->
duid
)

297 
îr
;

299 
ssize_t
 
Àn
 = 
	`odh˝d_unhexlify
(
Àa£
->
duid
,

300 
duidÀn
, 
	`blobmsg_gë_°rög
(
c
));

302 i‡(
Àn
 < 0)

303 
îr
;

305 
Àa£
->
duid_Àn
 = 
Àn
;

308 i‡((
c
 = 
tb
[
LEASE_ATTR_HOSTID
])) {

309 
î∫o
 = 0;

310 
Àa£
->
ho°id
 = 
	`°πoul
(
	`blobmsg_gë_°rög
(
c
), 
NULL
, 16);

311 i‡(
î∫o
)

312 
îr
;

315 i‡((
c
 = 
tb
[
LEASE_ATTR_LEASETIME
])) {

316 
time
 = 
	`∑r£_Àa£time
(
c
);

317 i‡(
time
 < 0)

318 
îr
;

320 i‡(
time
 >= 60)

321 
Àa£
->
dh˝v4_Àa£time
 = 
time
;

324 
	`li°_add
(&
Àa£
->
hód
, &
Àa£s
);

327 
îr
:

328 i‡(
Àa£
) {

329 
	`‰ì
(
Àa£
->
duid
);

330 
	`‰ì
(
Àa£
);

333 
	}
}

335 
	$c⁄fig_∑r£_öãrÁ˚
(*
d©a
, 
size_t
 
Àn
, c⁄° *
«me
, 
boﬁ
 
ovîwrôe
)

337 
blob_©å
 *
tb
[
IFACE_ATTR_MAX
], *
c
;

338 c⁄° *
¥io
 = 
NULL
;

339 
	`blobmsg_∑r£
(
iÁ˚_©ås
, 
IFACE_ATTR_MAX
, 
tb
, 
d©a
, 
Àn
);

341 i‡(
tb
[
IFACE_ATTR_INTERFACE
])

342 
«me
 = 
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_INTERFACE
]);

344 i‡(!
«me
)

347 
öãrÁ˚
 *
iÁ˚
 = 
	`gë_öãrÁ˚
(
«me
);

348 i‡(!
iÁ˚
) {

349 
iÁ˚
 = 
	`ˇŒoc
(1, (*iface));

350 i‡(!
iÁ˚
)

353 
	`°∫˝y
(
iÁ˚
->
«me
,Çame, (iface->name) - 1);

354 
	`li°_add
(&
iÁ˚
->
hód
, &
öãrÁ˚s
);

355 
ovîwrôe
 = 
åue
;

358 c⁄° *
i‚ame
 = 
NULL
;

359 i‡(
ovîwrôe
) {

360 i‡((
c
 = 
tb
[
IFACE_ATTR_IFNAME
]))

361 
i‚ame
 = 
	`blobmsg_gë_°rög
(
c
);

362 i‡((
c
 = 
tb
[
IFACE_ATTR_NETWORKID
]))

363 
i‚ame
 = 
	`blobmsg_gë_°rög
(
c
);

366 #ifde‡
WITH_UBUS


367 i‡(
ovîwrôe
 || !
iÁ˚
->
i‚ame
[0])

368 
i‚ame
 = 
	`ubus_gë_i‚ame
(
«me
);

371 i‡(!
iÁ˚
->
i‚ame
[0] && !ifname)

372 
îr
;

374 i‡(
i‚ame
)

375 
	`°∫˝y
(
iÁ˚
->
i‚ame
, ifname, (iface->ifname) - 1);

377 i‡((
iÁ˚
->
ifödex
 = 
	`if_«mëoödex
(iÁ˚->
i‚ame
)) <= 0)

378 
îr
;

380 
iÁ˚
->
öu£
 = 
åue
;

382 i‡((
c
 = 
tb
[
IFACE_ATTR_DYNAMICDHCP
]))

383 
iÁ˚
->
no_dy«mic_dh˝
 = !
	`blobmsg_gë_boﬁ
(
c
);

385 i‡(
ovîwrôe
 && (
c
 = 
tb
[
IFACE_ATTR_IGNORE
]))

386 
iÁ˚
->
ign‹e
 = 
	`blobmsg_gë_boﬁ
(
c
);

388 i‡((
c
 = 
tb
[
IFACE_ATTR_LEASETIME
])) {

389 
time
 = 
	`∑r£_Àa£time
(
c
);

390 i‡(
time
 < 0)

391 
îr
;

393 i‡(
time
 >= 60)

394 
iÁ˚
->
dh˝v4_Àa£time
 = 
time
;

397 i‡((
c
 = 
tb
[
IFACE_ATTR_START
])) {

398 
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 = 
	`ht⁄l
(
	`blobmsg_gë_u32
(
c
));

400 i‡(
c⁄fig
.
Àgacy
)

401 
iÁ˚
->
dh˝v4
 = 
RELAYD_SERVER
;

404 i‡((
c
 = 
tb
[
IFACE_ATTR_LIMIT
]))

405 
iÁ˚
->
dh˝v4_íd
.
s_addr
 = 
	`ht⁄l
(

406 
	`¡ohl
(
iÁ˚
->
dh˝v4_°¨t
.
s_addr
Ë+ 
	`blobmsg_gë_u32
(
c
));

408 i‡((
c
 = 
tb
[
IFACE_ATTR_MASTER
]))

409 
iÁ˚
->
ma°î
 = 
	`blobmsg_gë_boﬁ
(
c
);

411 i‡(
ovîwrôe
 && (
c
 = 
tb
[
IFACE_ATTR_UPSTREAM
])) {

412 
blob_©å
 *
cur
;

413 
ªm
;

415 
	`blobmsg_f‹_óch_©å
(
cur
, 
c
, 
ªm
) {

416 i‡(
	`blobmsg_ty≥
(
cur
Ë!
BLOBMSG_TYPE_STRING
 || !
	`blobmsg_check_©å
(cur, 
Ál£
))

419 
iÁ˚
->
up°ªam
 = 
	`ªÆloc
(iface->upstream,

420 
iÁ˚
->
up°ªam_Àn
 + 
	`blobmsg_d©a_Àn
(
cur
));

421 i‡(!
iÁ˚
->
up°ªam
)

422 
îr
;

424 
	`mem˝y
(
iÁ˚
->
up°ªam
 + iÁ˚->
up°ªam_Àn
, 
	`blobmsg_gë_°rög
(
cur
), 
	`blobmsg_d©a_Àn
(cur));

425 
iÁ˚
->
up°ªam_Àn
 +
	`blobmsg_d©a_Àn
(
cur
);

429 
mode
;

430 i‡((
c
 = 
tb
[
IFACE_ATTR_RA
])) {

431 i‡((
mode
 = 
	`∑r£_mode
(
	`blobmsg_gë_°rög
(
c
))) >= 0)

432 
iÁ˚
->
ø
 = 
mode
;

434 
îr
;

437 i‡((
c
 = 
tb
[
IFACE_ATTR_DHCPV4
])) {

438 i‡((
mode
 = 
	`∑r£_mode
(
	`blobmsg_gë_°rög
(
c
))) >= 0)

439 
iÁ˚
->
dh˝v4
 = 
mode
;

441 
îr
;

444 i‡((
c
 = 
tb
[
IFACE_ATTR_DHCPV6
])) {

445 i‡((
mode
 = 
	`∑r£_mode
(
	`blobmsg_gë_°rög
(
c
))) >= 0)

446 
iÁ˚
->
dh˝v6
 = 
mode
;

448 
îr
;

451 i‡((
c
 = 
tb
[
IFACE_ATTR_NDP
])) {

452 i‡((
mode
 = 
	`∑r£_mode
(
	`blobmsg_gë_°rög
(
c
))) >= 0)

453 
iÁ˚
->
ndp
 = 
mode
;

455 
îr
;

458 i‡((
c
 = 
tb
[
IFACE_ATTR_ROUTER
])) {

459 
blob_©å
 *
cur
;

460 
ªm
;

462 
	`blobmsg_f‹_óch_©å
(
cur
, 
c
, 
ªm
) {

463 i‡(
	`blobmsg_ty≥
(
cur
Ë!
BLOBMSG_TYPE_STRING
 || !
	`blobmsg_check_©å
(cur, 
Ál£
))

466 
ö_addr
 
addr4
;

467 i‡(
	`öë_±⁄
(
AF_INET
, 
	`blobmsg_gë_°rög
(
cur
), &
addr4
) == 1) {

468 
iÁ˚
->
dh˝v4_rouãr
 = 
	`ªÆloc
(iface->dhcpv4_router,

469 (++
iÁ˚
->
dh˝v4_rouãr_˙t
Ë* (*iÁ˚->
dh˝v4_rouãr
));

470 i‡(!
iÁ˚
->
dh˝v4_rouãr
)

471 
îr
;

473 
iÁ˚
->
dh˝v4_rouãr
[iÁ˚->
dh˝v4_rouãr_˙t
 - 1] = 
addr4
;

475 
îr
;

480 i‡((
c
 = 
tb
[
IFACE_ATTR_DNS
])) {

481 
blob_©å
 *
cur
;

482 
ªm
;

484 
iÁ˚
->
Æways_ªwrôe_dns
 = 
åue
;

485 
	`blobmsg_f‹_óch_©å
(
cur
, 
c
, 
ªm
) {

486 i‡(
	`blobmsg_ty≥
(
cur
Ë!
BLOBMSG_TYPE_STRING
 || !
	`blobmsg_check_©å
(cur, 
Ál£
))

489 
ö_addr
 
addr4
;

490 
ö6_addr
 
addr6
;

491 i‡(
	`öë_±⁄
(
AF_INET
, 
	`blobmsg_gë_°rög
(
cur
), &
addr4
) == 1) {

492 
iÁ˚
->
dh˝v4_dns
 = 
	`ªÆloc
(iface->dhcpv4_dns,

493 (++
iÁ˚
->
dh˝v4_dns_˙t
Ë* (*iÁ˚->
dh˝v4_dns
));

494 i‡(!
iÁ˚
->
dh˝v4_dns
)

495 
îr
;

497 
iÁ˚
->
dh˝v4_dns
[iÁ˚->
dh˝v4_dns_˙t
 - 1] = 
addr4
;

498 } i‡(
	`öë_±⁄
(
AF_INET6
, 
	`blobmsg_gë_°rög
(
cur
), &
addr6
) == 1) {

499 
iÁ˚
->
dns
 = 
	`ªÆloc
(iface->dns,

500 (++
iÁ˚
->
dns_˙t
Ë* (*iÁ˚->
dns
));

501 i‡(!
iÁ˚
->
dns
)

502 
îr
;

504 
iÁ˚
->
dns
[iÁ˚->
dns_˙t
 - 1] = 
addr6
;

506 
îr
;

511 i‡((
c
 = 
tb
[
IFACE_ATTR_DOMAIN
])) {

512 
blob_©å
 *
cur
;

513 
ªm
;

515 
	`blobmsg_f‹_óch_©å
(
cur
, 
c
, 
ªm
) {

516 i‡(
	`blobmsg_ty≥
(
cur
Ë!
BLOBMSG_TYPE_STRING
 || !
	`blobmsg_check_©å
(cur, 
Ál£
))

519 
uöt8_t
 
buf
[256];

520 *
domaö
 = 
	`blobmsg_gë_°rög
(
cur
);

521 
size_t
 
domaöÀn
 = 
	`°æí
(
domaö
);

522 i‡(
domaöÀn
 > 0 && 
domaö
[domainlen - 1] == '.')

523 
domaö
[
domaöÀn
 - 1] = 0;

525 
Àn
 = 
	`dn_comp
(
domaö
, 
buf
, (buf), 
NULL
, NULL);

526 i‡(
Àn
 <= 0)

527 
îr
;

529 
iÁ˚
->
£¨ch
 = 
	`ªÆloc
(iÁ˚->£¨ch, iÁ˚->
£¨ch_Àn
 + 
Àn
);

530 i‡(!
iÁ˚
->
£¨ch
)

531 
îr
;

533 
	`mem˝y
(&
iÁ˚
->
£¨ch
[iÁ˚->
£¨ch_Àn
], 
buf
, 
Àn
);

534 
iÁ˚
->
£¨ch_Àn
 +
Àn
;

538 i‡((
c
 = 
tb
[
IFACE_ATTR_FILTER_CLASS
])) {

539 
iÁ˚
->
fûãr_˛ass
 = 
	`ªÆloc
(iÁ˚->fûãr_˛ass, 
	`blobmsg_d©a_Àn
(
c
) + 1);

540 
	`mem˝y
(
iÁ˚
->
fûãr_˛ass
, 
	`blobmsg_gë_°rög
(
c
), 
	`blobmsg_d©a_Àn
(c) + 1);

543 i‡((
c
 = 
tb
[
IFACE_ATTR_DHCPV6_RAW
])) {

544 
iÁ˚
->
dh˝v6_øw_Àn
 = 
	`blobmsg_d©a_Àn
(
c
) / 2;

545 
iÁ˚
->
dh˝v6_øw
 = 
	`ªÆloc
(iÁ˚->dh˝v6_øw, iÁ˚->
dh˝v6_øw_Àn
);

546 
	`odh˝d_unhexlify
(
iÁ˚
->
dh˝v6_øw
, iÁ˚->
dh˝v6_øw_Àn
, 
	`blobmsg_gë_°rög
(
c
));

549 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_DEFAULT
]))

550 
iÁ˚
->
deÁu…_rouãr
 = 
	`blobmsg_gë_u32
(
c
);

552 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_MANAGEMENT
]))

553 
iÁ˚
->
m™aged
 = 
	`blobmsg_gë_u32
(
c
);

554 i‡(
ovîwrôe
)

555 
iÁ˚
->
m™aged
 = 1;

557 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_OFFLINK
]))

558 
iÁ˚
->
ø_nŸ_⁄lök
 = 
	`blobmsg_gë_boﬁ
(
c
);

560 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_ADVROUTER
]))

561 
iÁ˚
->
ø_advrouãr
 = 
	`blobmsg_gë_boﬁ
(
c
);

563 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_MAXINTERVAL
]))

564 
iÁ˚
->
ø_maxöãrvÆ
 = 
	`blobmsg_gë_u32
(
c
);

566 i‡((
c
 = 
tb
[
IFACE_ATTR_RA_PREFERENCE
])) {

567 
¥io
 = 
	`blobmsg_gë_°rög
(
c
);

569 i‡(!
	`°rcmp
(
¥io
, "high"))

570 
iÁ˚
->
rouã_¥e„ªn˚
 = 1;

571 i‡(!
	`°rcmp
(
¥io
, "low"))

572 
iÁ˚
->
rouã_¥e„ªn˚
 = -1;

573 i‡(!
	`°rcmp
(
¥io
, "medium") || !strcmp(prio, "default"))

574 
iÁ˚
->
rouã_¥e„ªn˚
 = 0;

576 
îr
;

579 i‡((
c
 = 
tb
[
IFACE_ATTR_PD_MANAGER
]))

580 
	`°∫˝y
(
iÁ˚
->
dh˝v6_pd_m™agî
, 
	`blobmsg_gë_°rög
(
c
),

581 (
iÁ˚
->
dh˝v6_pd_m™agî
) - 1);

583 i‡((
c
 = 
tb
[
IFACE_ATTR_PD_CER
]) &&

584 
	`öë_±⁄
(
AF_INET6
, 
	`blobmsg_gë_°rög
(
c
), &
iÁ˚
->
dh˝v6_pd_˚r
) < 1)

585 
îr
;

587 i‡((
c
 = 
tb
[
IFACE_ATTR_NDPROXY_ROUTING
]))

588 
iÁ˚
->
À¨n_rouãs
 = 
	`blobmsg_gë_boﬁ
(
c
);

589 i‡(
ovîwrôe
)

590 
iÁ˚
->
À¨n_rouãs
 = 
åue
;

592 i‡((
c
 = 
tb
[
IFACE_ATTR_NDPROXY_SLAVE
]))

593 
iÁ˚
->
exã∫Æ
 = 
	`blobmsg_gë_boﬁ
(
c
);

597 
îr
:

598 
	`˛o£_öãrÁ˚
(
iÁ˚
);

600 
	}
}

604 
	$tc_°r2ù6
 (c⁄° *
°r
, 
ö6_addr
 *
ö6
)

606  
	`öë_±⁄
(
AF_INET6
, 
°r
, 
ö6
);

607 
	}
}

609 
	$c⁄fig_öãrÁ˚
(c⁄° *
«me
, c⁄° *
i‚ame
, c⁄° *
dns
)

612 
ö6_addr
 *
ùv6_dns
 = 
NULL
;

614 i‡(!
«me
 || !
i‚ame
)

616 
öãrÁ˚
 *
iÁ˚
 = 
	`gë_öãrÁ˚
(
«me
);

617 i‡(!
iÁ˚
) {

618 
iÁ˚
 = 
	`ˇŒoc
(1, (*iface));

619 i‡(!
iÁ˚
)

621 
	`°∫˝y
(
iÁ˚
->
«me
,Çame, (iface->name) - 1);

622 
	`li°_add
(&
iÁ˚
->
hód
, &
öãrÁ˚s
);

623 
	`sy¶og
(
LOG_DEBUG
, "[%s][%d]*****add --√w-- iÁ˚******\n", 
__func__
, 
__LINE__
);

626 i‡(
	`°∫cmp
(
«me
, "lan", 3) == 0) {

627 
	`°∫˝y
(
iÁ˚
->
i‚ame
, ifname, (iface->ifname) - 1);

634 
iÁ˚
->
dh˝v4
 = 
RELAYD_DISABLED
;

635 
iÁ˚
->
ø
 = 
RELAYD_SERVER
;

636 
iÁ˚
->
dh˝v6
 = 
RELAYD_SERVER
;

638 
iÁ˚
->
m™aged
 = 
RELAYD_MANAGED_MFLAG
;

640 
iÁ˚
->
ø_advrouãr
= 0;

641 
iÁ˚
->
ø_nŸ_⁄lök
 = 0;

643 
iÁ˚
->
ø_maxöãrvÆ
 = 5;

644 
iÁ˚
->
ndp
 = 
RELAYD_RELAY
;

650 
ùv6_dns
 = 
	`mÆloc
((
ö6_addr
));

651 i‡(
NULL
 =
ùv6_dns
) {

652 
	`sy¶og
(
LOG_ERR
, "[%s][%d]*****mÆlo¯Áûed******\n", 
__func__
, 
__LINE__
);

656 
	`mem£t
(
ùv6_dns
, 0, (
ö6_addr
));

657 
	`tc_°r2ù6
(
dns
, 
ùv6_dns
);

658 
iÁ˚
->
dns
 = 
ùv6_dns
;

659 
iÁ˚
->
dns_˙t
 = 1;

661 
buf
[128];

662 
Àn
 = 
	`dn_comp
("œn", 
buf
, (buf), 
NULL
, NULL);

663 
iÁ˚
->
£¨ch
 = 
	`mÆloc
(
Àn
);

664 i‡(
iÁ˚
->
£¨ch
 =
NULL
) {

665 
	`sy¶og
(
LOG_ERR
, "[%s][%d]*******mÆlo¯Áûed****\n", 
__func__
, 
__LINE__
);

668 
	`mem£t
(
iÁ˚
->
£¨ch
, 0, 
Àn
);

669 
iÁ˚
->
£¨ch_Àn
 = 0;

670 
	`mem˝y
(&
iÁ˚
->
£¨ch
[iÁ˚->
£¨ch_Àn
], 
buf
, 
Àn
);

671 
iÁ˚
->
£¨ch_Àn
 +=
Àn
;

673 i‡(
	`°∫cmp
(
«me
, "wan", 3) == 0) {

675 
iÁ˚
->
dh˝v4
 = 
RELAYD_DISABLED
;

676 
iÁ˚
->
ø
 = 
RELAYD_RELAY
;

677 
iÁ˚
->
dh˝v6
 = 
RELAYD_RELAY
;

679 
iÁ˚
->
m™aged
 = 
RELAYD_MANAGED_MFLAG
;

680 
iÁ˚
->
ø_advrouãr
= 1;

681 
iÁ˚
->
ø_maxöãrvÆ
 = 5;

682 
iÁ˚
->
ndp
 = 
RELAYD_HYBRID
;

685 
	`°∫˝y
(
iÁ˚
->
i‚ame
, "tun0", (iface->ifname) - 1);

689 
iÁ˚
->
öu£
 = 
åue
;

690 
	`sy¶og
(
LOG_ERR
, "[%s][%d]*****i‚ame:%s******\n", 
__func__
, 
__LINE__
, 
iÁ˚
->
i‚ame
);

691 i‡((
iÁ˚
->
ifödex
 = 
	`if_«mëoödex
(iÁ˚->
i‚ame
)) <= 0) {

692 
îr
;

698 
îr
:

699 
	`sy¶og
(
LOG_ERR
, "config interfaces failed.");

700 
	`˛o£_öãrÁ˚
(
iÁ˚
);

702 
	}
}

704 
	$£t_öãrÁ˚
(c⁄° *
i‚ame
, c⁄° *
dns
)

707 
	`blob_buf_öô
(&
b
, 0);

708 
	`uci_to_blob
(&
b
, 
s
, &
öãrÁ˚_©å_li°
);

709  
	`c⁄fig_∑r£_öãrÁ˚
(
	`blob_d©a
(
b
.
hód
), 
	`blob_Àn
(b.hód), "®«me", 
åue
);

711 
	`c⁄fig_öãrÁ˚
("œn", 
i‚ame
, 
dns
);

713 
	}
}

716 
	$odh˝d_ªlﬂd
(c⁄° *
°f
,

717 c⁄° *
cb
,

718 c⁄° *
i‚ame
,

719 c⁄° *
dns
)

722 
uci_c⁄ãxt
 *
uci
 = 
	`uci_Æloc_c⁄ãxt
();

725 !
	`li°_em±y
(&
Àa£s
)) {

726 
Àa£
 *
l
 = 
	`li°_fú°_íåy
(&
Àa£s
, Àa£, 
hód
);

727 
	`li°_dñ
(&
l
->
hód
);

728 
	`‰ì
(
l
->
duid
);

729 
	`‰ì
(
l
);

732 
öãrÁ˚
 *
ma°î
 = 
NULL
, *
i
, *
n
;

735 i‡(!
uci
)

739 
	`li°_f‹_óch_íåy
(
i
, &
öãrÁ˚s
, 
hód
)

740 
	`˛ón_öãrÁ˚
(
i
);

742 
	`£t_c⁄fig
(
°f
, 
cb
);

743 
	`£t_öãrÁ˚
(
i‚ame
, 
dns
);

745 
uci_∑ckage
 *
dh˝
 = 
NULL
;

746 i‡(!
	`uci_lﬂd
(
uci
, "dh˝", &
dh˝
)) {

747 
uci_ñemít
 *
e
;

748 
	`uci_f‹óch_ñemít
(&
dh˝
->
£˘i⁄s
, 
e
) {

749 
uci_£˘i⁄
 *
s
 = 
	`uci_to_£˘i⁄
(
e
);

750 i‡(!
	`°rcmp
(
s
->
ty≥
, "host"))

751 
	`£t_Àa£
(
s
);

752 i‡(!
	`°rcmp
(
s
->
ty≥
, "odhcpd"))

753 
	`£t_c⁄fig
(
s
);

756 
	`uci_f‹óch_ñemít
(&
dh˝
->
£˘i⁄s
, 
e
) {

757 
uci_£˘i⁄
 *
s
 = 
	`uci_to_£˘i⁄
(
e
);

758 i‡(!
	`°rcmp
(
s
->
ty≥
, "dhcp"))

759 
	`£t_öãrÁ˚
(
s
);

765 #ifde‡
WITH_UBUS


766 
	`ubus_≠∂y_√tw‹k
();

769 
boﬁ
 
™y_dh˝v6_¶ave
 = 
Ál£
, 
™y_ø_¶ave
 = fÆ£, 
™y_ndp_¶ave
 = false;

772 
	`li°_f‹_óch_íåy
(
i
, &
öãrÁ˚s
, 
hód
) {

773 i‡(
i
->
ma°î
)

776 i‡(
i
->
dh˝v6
 =
RELAYD_HYBRID
 || i->dh˝v6 =
RELAYD_RELAY
)

777 
™y_dh˝v6_¶ave
 = 
åue
;

779 i‡(
i
->
ø
 =
RELAYD_HYBRID
 || i->ø =
RELAYD_RELAY
)

780 
™y_ø_¶ave
 = 
åue
;

782 i‡(
i
->
ndp
 =
RELAYD_HYBRID
 || i->nd∞=
RELAYD_RELAY
)

783 
™y_ndp_¶ave
 = 
åue
;

787 
	`li°_f‹_óch_íåy
(
i
, &
öãrÁ˚s
, 
hód
) {

788 i‡(!
i
->
ma°î
)

791 
odh˝d_mode
 
hybrid_mode
 = 
RELAYD_DISABLED
;

792 #ifde‡
WITH_UBUS


793 i‡(!
	`ubus_has_¥efix
(
i
->
«me
, i->
i‚ame
))

794 
hybrid_mode
 = 
RELAYD_RELAY
;

797 i‡(
i
->
dh˝v6
 =
RELAYD_HYBRID
)

798 
i
->
dh˝v6
 = 
hybrid_mode
;

800 i‡(
i
->
dh˝v6
 =
RELAYD_RELAY
 && !
™y_dh˝v6_¶ave
)

801 
i
->
dh˝v6
 = 
RELAYD_DISABLED
;

803 i‡(
i
->
ø
 =
RELAYD_HYBRID
)

804 
i
->
ø
 = 
hybrid_mode
;

806 i‡(
i
->
ø
 =
RELAYD_RELAY
 && !
™y_ø_¶ave
)

807 
i
->
ø
 = 
RELAYD_DISABLED
;

809 i‡(
i
->
ndp
 =
RELAYD_HYBRID
)

810 
i
->
ndp
 = 
hybrid_mode
;

812 i‡(
i
->
ndp
 =
RELAYD_RELAY
 && !
™y_ndp_¶ave
)

813 
i
->
ndp
 = 
RELAYD_DISABLED
;

815 i‡(
i
->
dh˝v6
 =
RELAYD_RELAY
 || i->
ø
 =RELAYD_RELAY || i->
ndp
 == RELAYD_RELAY)

816 
ma°î
 = 
i
;

820 
	`li°_f‹_óch_íåy_ß„
(
i
, 
n
, &
öãrÁ˚s
, 
hód
) {

821 i‡(
i
->
öu£
) {

823 i‡(
i
->
dh˝v6
 =
RELAYD_HYBRID
)

824 
i
->
dh˝v6
 = (
ma°î
 && ma°î->dh˝v6 =
RELAYD_RELAY
) ?

825 
RELAYD_RELAY
 : 
RELAYD_SERVER
;

827 i‡(
i
->
ø
 =
RELAYD_HYBRID
)

828 
i
->
ø
 = (
ma°î
 && ma°î->ø =
RELAYD_RELAY
) ?

829 
RELAYD_RELAY
 : 
RELAYD_SERVER
;

831 i‡(
i
->
ndp
 =
RELAYD_HYBRID
)

832 
i
->
ndp
 = (
ma°î
 && ma°î->nd∞=
RELAYD_RELAY
) ?

833 
RELAYD_RELAY
 : 
RELAYD_DISABLED
;

835 
	`£tup_rouãr_öãrÁ˚
(
i
, 
åue
);

836 
	`£tup_dh˝v6_öãrÁ˚
(
i
, 
åue
);

837 
	`£tup_ndp_öãrÁ˚
(
i
, 
åue
);

838 
	`£tup_dh˝v4_öãrÁ˚
(
i
, 
åue
);

840 
	`˛o£_öãrÁ˚
(
i
);

846 
	}
}

849 
	$h™dÀ_sig«l
(
sig«l
)

851 
b
[1] = {0};

853 i‡(
sig«l
 =
SIGHUP
) {

854 i‡(
	`wrôe
(
ªlﬂd_pùe
[1], 
b
, (b)) < 0) {}

856 
	`ulo›_íd
();

857 
	}
}

861 
	$ªlﬂd_cb
(
ulo›_fd
 *
u
, 
_unu£d
 
evíts
)

863 
b
[512];

864 i‡(
	`ªad
(
u
->
fd
, 
b
, (b)) < 0) {}

865 
	`odh˝d_ªlﬂd
();

866 
	}
}

868 
ulo›_fd
 
	gªlﬂd_fd
 = { .
cb
 = 
ªlﬂd_cb
 };

871 
	$odh˝d_run
(
¨gc
, *
¨gv
[])

873 
c
 = 0;

874 
dh˝_°©efûe
[128] = {0};

875 
dh˝_cb
[128] = {0};

876 
i‚ame
[32] = {0};

877 
dns
[64] = {0};

879 i‡(
	`pùe2
(
ªlﬂd_pùe
, 
O_NONBLOCK
 | 
O_CLOEXEC
) < 0) {}

880 
ªlﬂd_fd
.
fd
 = 
ªlﬂd_pùe
[0];

881 
	`ulo›_fd_add
(&
ªlﬂd_fd
, 
ULOOP_READ
);

884 
	`sig«l
(
SIGTERM
, 
h™dÀ_sig«l
);

885 
	`sig«l
(
SIGINT
, 
h™dÀ_sig«l
);

886 
	`sig«l
(
SIGHUP
, 
h™dÀ_sig«l
);

888 #ifde‡
WITH_UBUS


889 
	`öô_ubus
())

890 
	`¶ìp
(1);

893 
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "s:c:i:d:");

894 
c
) {

896 
	`¢¥ötf
(
dh˝_°©efûe
, (dh˝_°©efûe), "%s", 
›èrg
);

899 
	`¢¥ötf
(
dh˝_cb
, (dh˝_cb), "%s", 
›èrg
);

902 
	`¢¥ötf
(
i‚ame
, (i‚ame), "%s", 
›èrg
);

905 
	`¢¥ötf
(
dns
, (dns), "%s", 
›èrg
);

908 
	`sy¶og
(
LOG_ERR
, "UNKNOWNÖara.\n");

913 i‡(
dh˝_°©efûe
[0] == '\0') {

914 
	`¢¥ötf
(
dh˝_°©efûe
, (dhcp_statefile), "%s", "/tmp/hosts/odhcpd");

916 i‡(
dh˝_cb
[0] == '\0') {

917 
	`¢¥ötf
(
dh˝_cb
, (dhcp_cb), "%s", "/usr/sbin/odhcpd-update");

919 i‡(
i‚ame
[0] == '\0') {

920 
	`¢¥ötf
(
i‚ame
, (ifname), "%s", "br-lan");

922 i‡(
dns
[0] == '\0') {

923 
	`¢¥ötf
(
dns
, (dns), "%s", "2001:da8:20d:30::30");

926 
	`odh˝d_ªlﬂd
(
dh˝_°©efûe
, 
dh˝_cb
, 
i‚ame
, 
dns
);

927 
	`ulo›_run
();

929 !
	`li°_em±y
(&
öãrÁ˚s
))

930 
	`˛o£_öãrÁ˚
(
	`li°_fú°_íåy
(&
öãrÁ˚s
, 
öãrÁ˚
, 
hód
));

931 
	}
}

	@dhcpv4.c

16 
	~<time.h
>

17 
	~<î∫o.h
>

18 
	~<f˙é.h
>

19 
	~<uni°d.h
>

20 
	~<°ddef.h
>

21 
	~<°dlib.h
>

22 
	~<ªsﬁv.h
>

23 
	~<limôs.h
>

24 
	~<√t/if.h
>

25 
	~<√t/if_¨p.h
>

26 
	~<√töë/ù.h
>

27 
	~<sys/io˘l.h
>

29 
	~<¨∑/öë.h
>

30 
	~<√töë/ö.h
>

31 
	~<¨∑/«me£r.h
>

32 
	~<ªsﬁv.h
>

35 
	~"odh˝d.h
"

36 
	~"dh˝v4.h
"

37 
	~"dh˝v6.h
"

40 
h™dÀ_dh˝v4
(*
addr
, *
d©a
, 
size_t
 
Àn
,

41 
öãrÁ˚
 *
iÁ˚
, *
de°_addr
);

42 
dh˝v4_assignmít
* 
dh˝v4_Àa£
(
öãrÁ˚
 *
iÁ˚
,

43 
dh˝v4_msg
 
msg
, c⁄° 
uöt8_t
 *
mac
, 
ö_addr
 
ªqaddr
,

44 c⁄° *
ho°«me
);

47 
	$öô_dh˝v4
()

50 
	}
}

52 *
	$dh˝v4_msg_to_°rög
(
uöt8_t
 
ªqmsg
)

54 
ªqmsg
) {

55 (
DHCPV4_MSG_DISCOVER
):

57 (
DHCPV4_MSG_OFFER
):

59 (
DHCPV4_MSG_REQUEST
):

61 (
DHCPV4_MSG_DECLINE
):

63 (
DHCPV4_MSG_ACK
):

65 (
DHCPV4_MSG_NAK
):

67 (
DHCPV4_MSG_RELEASE
):

69 (
DHCPV4_MSG_INFORM
):

74 
	}
}

76 
	$£tup_dh˝v4_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
)

78 i‡(
iÁ˚
->
dh˝v4_evít
.
ulo›
.
fd
 > 0) {

79 
	`ulo›_fd_dñëe
(&
iÁ˚
->
dh˝v4_evít
.
ulo›
);

80 
	`˛o£
(
iÁ˚
->
dh˝v4_evít
.
ulo›
.
fd
);

81 
iÁ˚
->
dh˝v4_evít
.
ulo›
.
fd
 = -1;

84 i‡(
iÁ˚
->
dh˝v4
 && 
íabÀ
) {

85 i‡(!
iÁ˚
->
dh˝v4_assignmíts
.
√xt
)

86 
	`INIT_LIST_HEAD
(&
iÁ˚
->
dh˝v4_assignmíts
);

88 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
 | 
SOCK_CLOEXEC
, 
IPPROTO_UDP
);

89 i‡(
sock
 < 0) {

90 
	`sy¶og
(
LOG_ERR
, "FailedÅo create DHCPv4 server socket: %s",

91 
	`°ªº‹
(
î∫o
));

96 
vÆ
 = 1;

97 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
vÆ
, (val));

98 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
vÆ
, (val));

99 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_PKTINFO
, &
vÆ
, (val));

101 
vÆ
 = 
IPTOS_PREC_INTERNETCONTROL
;

102 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_TOS
, &
vÆ
, (val));

104 
vÆ
 = 
IP_PMTUDISC_DONT
;

105 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_MTU_DISCOVER
, &
vÆ
, (val));

107 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
,

108 
iÁ˚
->
i‚ame
, 
	`°æí
(iface->ifname));

110 
sockaddr_ö
 
böd_addr
 = {
AF_INET
, 
	`ht⁄s
(
DHCPV4_SERVER_PORT
),

111 {
INADDR_ANY
}, {0}};

113 i‡(
	`böd
(
sock
, (
sockaddr
*)&
böd_addr
, (bind_addr))) {

114 
	`sy¶og
(
LOG_ERR
, "FailedÅo open DHCPv4 server socket: %s",

115 
	`°ªº‹
(
î∫o
));

120 i‡(
	`¡ohl
(
iÁ˚
->
dh˝v4_°¨t
.
s_addr
Ë>Çtohl(iÁ˚->
dh˝v4_íd
.s_addr)) {

121 
	`sy¶og
(
LOG_ERR
, "Invalid DHCPÑange");

126 
i‰eq
 ifreq;

127 
	`°∫˝y
(
i‰eq
.
i‰_«me
, 
iÁ˚
->
i‚ame
, (ifreq.ifr_name));

129 
sockaddr_ö
 *
ßddr
 = (sockaddr_ö*)&
i‰eq
.
i‰_addr
;

130 
sockaddr_ö
 *
smask
 = (sockaddr_ö*)&
i‰eq
.
i‰_√tmask
;

131 i‡(!(
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 & 
	`ht⁄l
(0xffff0000)) &&

132 !(
iÁ˚
->
dh˝v4_íd
.
s_addr
 & 
	`ht⁄l
(0xffff0000)) &&

133 !
	`io˘l
(
sock
, 
SIOCGIFADDR
, &
i‰eq
)) {

134 
ö_addr
 
addr
 = 
ßddr
->
sö_addr
;

136 
	`io˘l
(
sock
, 
SIOCGIFNETMASK
, &
i‰eq
);

137 
ö_addr
 
mask
 = 
smask
->
sö_addr
;

139 
uöt32_t
 
°¨t
 = 
	`¡ohl
(
iÁ˚
->
dh˝v4_°¨t
.
s_addr
);

140 
uöt32_t
 
íd
 = 
	`¡ohl
(
iÁ˚
->
dh˝v4_íd
.
s_addr
);

142 i‡(
°¨t
 && 
íd
 && start <Énd &&

143 
°¨t
 > 
	`¡ohl
(
addr
.
s_addr
 & ~
mask
.s_addr) &&

144 (
°¨t
 & 
	`¡ohl
(~
mask
.
s_addr
)) == start &&

145 (
íd
 & 
	`¡ohl
(~
mask
.
s_addr
)) ==Énd) {

146 
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 = 
	`ht⁄l
(
°¨t
) |

147 (
addr
.
s_addr
 & 
mask
.s_addr);

148 
iÁ˚
->
dh˝v4_íd
.
s_addr
 = 
	`ht⁄l
(
íd
) |

149 (
addr
.
s_addr
 & 
mask
.s_addr);

150 } i‡(
	`¡ohl
(
mask
.
s_addr
) <= 0xfffffff0) {

151 
°¨t
 = 
addr
.
s_addr
 & 
mask
.s_addr;

152 
íd
 = 
addr
.
s_addr
 & 
mask
.s_addr;

154 i‡(
	`¡ohl
(
mask
.
s_addr
) <= 0xffffff00) {

155 
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 = 
°¨t
 | 
	`ht⁄l
(100);

156 
iÁ˚
->
dh˝v4_íd
.
s_addr
 = 
íd
 | 
	`ht⁄l
(250);

157 } i‡(
	`¡ohl
(
mask
.
s_addr
) <= 0xffffffc0) {

158 
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 = 
°¨t
 | 
	`ht⁄l
(10);

159 
iÁ˚
->
dh˝v4_íd
.
s_addr
 = 
íd
 | 
	`ht⁄l
(60);

160 } i‡(
	`¡ohl
(
mask
.
s_addr
) <= 0xffffffe0) {

161 
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 = 
°¨t
 | 
	`ht⁄l
(10);

162 
iÁ˚
->
dh˝v4_íd
.
s_addr
 = 
íd
 | 
	`ht⁄l
(30);

164 
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 = 
°¨t
 | 
	`ht⁄l
(3);

165 
iÁ˚
->
dh˝v4_íd
.
s_addr
 = 
íd
 | 
	`ht⁄l
(12);

173 
Àa£
 *lease;

174 
	`li°_f‹_óch_íåy
(
Àa£
, &
Àa£s
, 
hód
) {

176 
size_t
 
ho°Àn
 = 
	`°æí
(
Àa£
->
ho°«me
) + 1;

177 
dh˝v4_assignmít
 *
a
 = 
	`ˇŒoc
(1, (*aË+ 
ho°Àn
);

178 i‡(!
a
) {

179 
	`sy¶og
(
LOG_ERR
, "Calloc failed for staticÜease on interface %s",

180 
iÁ˚
->
i‚ame
);

183 i‡(
Àa£
->
dh˝v4_Àa£time
 >= 60)

184 
a
->
Àa£time
 = 
Àa£
->
dh˝v4_Àa£time
;

185 
a
->
addr
 = 
	`¡ohl
(
Àa£
->
ùaddr
.
s_addr
);

186 
	`mem˝y
(
a
->
hwaddr
, 
Àa£
->
mac
.
ëhî_addr_o˘ë
, (a->hwaddr));

187 
	`mem˝y
(
a
->
ho°«me
, 
Àa£
->ho°«me, 
ho°Àn
);

188 
a
->
vÆid_u¡û
 = 
LONG_MAX
;

191 
dh˝v4_assignmít
 *
c
;

192 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
dh˝v4_assignmíts
, 
hód
) {

193 i‡(
c
->
addr
 > 
a
->addr) {

194 
	`li°_add_èû
(&
a
->
hód
, &
c
->head);

196 } i‡(
c
->
addr
 =
a
->addr) {

201 i‡(&
c
->
hód
 =&
iÁ˚
->
dh˝v4_assignmíts
) {

202 
	`li°_add
(&
a
->
hód
, &
iÁ˚
->
dh˝v4_assignmíts
);

205 i‡(!
a
->
hód
.
√xt
)

206 
	`‰ì
(
a
);

210 
dh˝v4_assignmít
 *
a
, *
n
;

211 
	`li°_f‹_óch_íåy_ß„
(
a
, 
n
, &
iÁ˚
->
dh˝v4_assignmíts
, 
hód
) {

212 i‡((
	`ht⁄l
(
a
->
addr
Ë& 
smask
->
sö_addr
.
s_addr
) !=

213 (
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 & 
smask
->
sö_addr
.s_addr)) {

214 
	`li°_dñ
(&
a
->
hód
);

215 
	`‰ì
(
a
);

220 i‡(
iÁ˚
->
dh˝v4_Àa£time
 < 60)

221 
iÁ˚
->
dh˝v4_Àa£time
 = 43200;

223 
iÁ˚
->
dh˝v4_evít
.
ulo›
.
fd
 = 
sock
;

224 
iÁ˚
->
dh˝v4_evít
.
h™dÀ_dgøm
 = 
h™dÀ_dh˝v4
;

225 
	`odh˝d_ªgi°î
(&
iÁ˚
->
dh˝v4_evít
);

226 } i‡(
iÁ˚
->
dh˝v4_assignmíts
.
√xt
) {

227 !
	`li°_em±y
(&
iÁ˚
->
dh˝v4_assignmíts
)) {

228 
dh˝v4_assignmít
 *
a
 = 
	`li°_fú°_íåy
(&
iÁ˚
->
dh˝v4_assignmíts
,

229 
dh˝v4_assignmít
, 
hód
);

230 
	`li°_dñ
(&
a
->
hód
);

231 
	`‰ì
(
a
);

236 
	}
}

239 
	$dh˝v4_put
(
dh˝v4_mesßge
 *
msg
, 
uöt8_t
 **
cookõ
,

240 
uöt8_t
 
ty≥
, uöt8_à
Àn
, c⁄° *
d©a
)

242 
uöt8_t
 *
c
 = *
cookõ
;

243 i‡(*
cookõ
 + 2 + 
Àn
 > (
uöt8_t
*)&
msg
[1])

246 *
c
++ = 
ty≥
;

247 *
c
++ = 
Àn
;

248 
	`mem˝y
(
c
, 
d©a
, 
Àn
);

250 *
cookõ
 = 
c
 + 
Àn
;

251 
	}
}

255 
	$h™dÀ_dh˝v4
(*
addr
, *
d©a
, 
size_t
 
Àn
,

256 
öãrÁ˚
 *
iÁ˚
, 
_unu£d
 *
de°_addr
)

258 i‡(!
iÁ˚
->
dh˝v4
)

261 
dh˝v4_mesßge
 *
ªq
 = 
d©a
;

262 i‡(
Àn
 < 
	`off£tof
(
dh˝v4_mesßge
, 
›ti⁄s
) + 4 ||

263 
ªq
->
›
 !
DHCPV4_BOOTREQUEST
 ||Ñeq->
hÀn
 != 6)

266 
sock
 = 
iÁ˚
->
dh˝v4_evít
.
ulo›
.
fd
;

267 
sockaddr_ö
 
iÁddr
;

268 
sockaddr_ö
 
i‚ëmask
;

270 
	`sy¶og
(
LOG_NOTICE
, "Got DHCPv4Ñequest");

272 
i‰eq
 ifreq;

273 
	`mem˝y
(
i‰eq
.
i‰_«me
, 
iÁ˚
->
i‚ame
, (ifreq.ifr_name));

274 i‡(
	`io˘l
(
sock
, 
SIOCGIFADDR
, &
i‰eq
)) {

275 
	`sy¶og
(
LOG_WARNING
, "DHCPv4 faûedÅÿdëe˘áddªss: %s", 
	`°ªº‹
(
î∫o
));

279 
	`mem˝y
(&
iÁddr
, &
i‰eq
.
i‰_addr
, (ifaddr));

280 i‡(
	`io˘l
(
sock
, 
SIOCGIFNETMASK
, &
i‰eq
))

283 
	`mem˝y
(&
i‚ëmask
, &
i‰eq
.
i‰_√tmask
, (ifnetmask));

284 
uöt32_t
 
√tw‹k
 = 
iÁddr
.
sö_addr
.
s_addr
 & 
i‚ëmask
.sin_addr.s_addr;

286 i‡((
iÁ˚
->
dh˝v4_°¨t
.
s_addr
 & 
i‚ëmask
.
sö_addr
.s_addrË!
√tw‹k
 ||

287 (
iÁ˚
->
dh˝v4_íd
.
s_addr
 & 
i‚ëmask
.
sö_addr
.s_addrË!
√tw‹k
) {

288 
	`sy¶og
(
LOG_WARNING
, "DHCPv4Ñange out ofássignedÇetwork");

292 
i‰eq
 
i‰
 = {.
i‰_«me
 = ""};

293 
	`°∫˝y
(
i‰
.
i‰_«me
, 
iÁ˚
->
i‚ame
, (ifr.ifr_name));

295 
dh˝v4_mesßge
 
ª∂y
 = {

296 .
›
 = 
DHCPV4_BOOTREPLY
,

297 .
hty≥
 = 1,

298 .
hÀn
 = 6,

299 .
h›s
 = 0,

300 .
xid
 = 
ªq
->xid,

301 .
£cs
 = 0,

302 .
Êags
 = 
ªq
->flags,

303 .
cüddr
 = {
INADDR_ANY
},

304 .
güddr
 = 
ªq
->giaddr,

305 .
süddr
 = 
iÁddr
.
sö_addr
,

307 
	`mem˝y
(
ª∂y
.
chaddr
, 
ªq
->chaddr, (reply.chaddr));

309 
ª∂y
.
›ti⁄s
[0] = 0x63;

310 
ª∂y
.
›ti⁄s
[1] = 0x82;

311 
ª∂y
.
›ti⁄s
[2] = 0x53;

312 
ª∂y
.
›ti⁄s
[3] = 0x63;

314 
uöt8_t
 *
cookõ
 = &
ª∂y
.
›ti⁄s
[4];

315 
uöt8_t
 
ªqmsg
 = 
DHCPV4_MSG_REQUEST
;

316 
uöt8_t
 
msg
 = 
DHCPV4_MSG_ACK
;

318 
ö_addr
 
ªqaddr
 = {
INADDR_ANY
};

319 
ho°«me
[256];

320 
ho°«me
[0] = 0;

322 
uöt8_t
 *
°¨t
 = &
ªq
->
›ti⁄s
[4];

323 
uöt8_t
 *
íd
 = ((uöt8_t*)
d©a
Ë+ 
Àn
;

324 
dh˝v4_›ti⁄
 *
›t
;

325 
	`dh˝v4_f‹_óch_›ti⁄
(
°¨t
, 
íd
, 
›t
) {

326 i‡(
›t
->
ty≥
 =
DHCPV4_OPT_MESSAGE
 && o±->
Àn
 == 1) {

327 
ªqmsg
 = 
›t
->
d©a
[0];

328 } i‡(
›t
->
ty≥
 =
DHCPV4_OPT_HOSTNAME
 && o±->
Àn
 > 0) {

329 
	`mem˝y
(
ho°«me
, 
›t
->
d©a
, o±->
Àn
);

330 
ho°«me
[
›t
->
Àn
] = 0;

331 } i‡(
›t
->
ty≥
 =
DHCPV4_OPT_IPADDRESS
 && o±->
Àn
 == 4) {

332 
	`mem˝y
(&
ªqaddr
, 
›t
->
d©a
, 4);

333 } i‡(
›t
->
ty≥
 =
DHCPV4_OPT_SERVERID
 && o±->
Àn
 == 4) {

334 i‡(
	`memcmp
(
›t
->
d©a
, &
iÁddr
.
sö_addr
, 4))

336 } i‡(
iÁ˚
->
fûãr_˛ass
 && 
›t
->
ty≥
 =
DHCPV4_OPT_USER_CLASS
) {

337 
uöt8_t
 *
c
 = 
›t
->
d©a
, *
˚nd
 = &›t->d©a[›t->
Àn
];

338 ; 
c
 < 
˚nd
 && &c[*c] < cend; c = &c[1 + *c]) {

339 
size_t
 
ñí
 = 
	`°æí
(
iÁ˚
->
fûãr_˛ass
);

340 i‡(*
c
 =
ñí
 && !
	`memcmp
(&c[1], 
iÁ˚
->
fûãr_˛ass
,Élen))

346 i‡(
ªqmsg
 !
DHCPV4_MSG_DISCOVER
 &&Ñeqmsg !
DHCPV4_MSG_REQUEST
 &&

347 
ªqmsg
 !
DHCPV4_MSG_INFORM
 &&Ñeqmsg !
DHCPV4_MSG_DECLINE
 &&

348 
ªqmsg
 !
DHCPV4_MSG_RELEASE
)

351 
dh˝v4_assignmít
 *
Àa£
 = 
NULL
;

352 i‡(
ªqmsg
 !
DHCPV4_MSG_INFORM
)

353 
Àa£
 = 
	`dh˝v4_Àa£
(
iÁ˚
, 
ªqmsg
, 
ªq
->
chaddr
, 
ªqaddr
, 
ho°«me
);

355 i‡(!
Àa£
) {

356 i‡(
ªqmsg
 =
DHCPV4_MSG_REQUEST
)

357 
msg
 = 
DHCPV4_MSG_NAK
;

358 i‡(
ªqmsg
 =
DHCPV4_MSG_DISCOVER
)

360 } i‡(
ªqmsg
 =
DHCPV4_MSG_DISCOVER
) {

361 
msg
 = 
DHCPV4_MSG_OFFER
;

362 } i‡(
ªqmsg
 =
DHCPV4_MSG_REQUEST
 && 
ªqaddr
.
s_addr
 &&

363 
ªqaddr
.
s_addr
 !
	`ht⁄l
(
Àa£
->
addr
)) {

364 
msg
 = 
DHCPV4_MSG_NAK
;

377 
	`sy¶og
(
LOG_WARNING
, "received %s from %x:%x:%x:%x:%x:%x",

378 
	`dh˝v4_msg_to_°rög
(
ªqmsg
),

379 
ªq
->
chaddr
[0],req->chaddr[1],req->chaddr[2],

380 
ªq
->
chaddr
[3],req->chaddr[4],req->chaddr[5]);

382 i‡(
ªqmsg
 =
DHCPV4_MSG_DECLINE
 ||Ñeqmsg =
DHCPV4_MSG_RELEASE
)

385 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_MESSAGE
, 1, &
msg
);

386 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_SERVERID
, 4, &
iÁddr
.
sö_addr
);

388 i‡(
Àa£
) {

389 
ª∂y
.
yüddr
.
s_addr
 = 
	`ht⁄l
(
Àa£
->
addr
);

391 
uöt32_t
 
vÆ
;

392 
uöt32_t
 
Àa£time
;

394 i‡(
Àa£
->
Àa£time
 >= 60) {

395 
Àa£time
 = 
Àa£
->leasetime;

397 
Àa£time
 = 
iÁ˚
->
dh˝v4_Àa£time
;

400 
vÆ
 = 
	`ht⁄l
(
Àa£time
);

401 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_LEASETIME
, 4, &
vÆ
);

403 
vÆ
 = 
	`ht⁄l
(500 * 
Àa£time
 / 1000);

404 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_RENEW
, 4, &
vÆ
);

406 
vÆ
 = 
	`ht⁄l
(875 * 
Àa£time
 / 1000);

407 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_REBIND
, 4, &
vÆ
);

409 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_NETMASK
, 4, &
i‚ëmask
.
sö_addr
);

411 i‡(
Àa£
->
ho°«me
[0])

412 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_HOSTNAME
,

413 
	`°æí
(
Àa£
->
ho°«me
),Üease->hostname);

415 i‡(!
	`io˘l
(
sock
, 
SIOCGIFBRDADDR
, &
i‰
)) {

416 
sockaddr_ö
 *
öa
 = (sockaddr_ö*)&
i‰
.
i‰_brﬂdaddr
;

417 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_BROADCAST
, 4, &
öa
->
sö_addr
);

421 i‡(!
	`io˘l
(
sock
, 
SIOCGIFMTU
, &
i‰
)) {

422 
uöt16_t
 
mtu
 = 
	`ht⁄s
(
i‰
.
i‰_mtu
);

423 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_MTU
, 2, &
mtu
);

426 i‡(
iÁ˚
->
£¨ch
 && iÁ˚->
£¨ch_Àn
 <= 255) {

427 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_SEARCH_DOMAIN
,

428 
iÁ˚
->
£¨ch_Àn
, iÁ˚->
£¨ch
);

429 } i‡(!
	`ªs_öô
(Ë&& 
_ªs
.
dn§ch
[0] && _res.dnsrch[0][0]) {

430 
uöt8_t
 
£¨ch_buf
[256];

431 
Àn
 = 
	`dn_comp
(
_ªs
.
dn§ch
[0], 
£¨ch_buf
,

432 (
£¨ch_buf
), 
NULL
, NULL);

433 i‡(
Àn
 > 0)

434 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_SEARCH_DOMAIN
,

435 
Àn
, 
£¨ch_buf
);

438 i‡(
iÁ˚
->
dh˝v4_rouãr_˙t
 == 0)

439 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_ROUTER
, 4, &
iÁddr
.
sö_addr
);

441 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_ROUTER
,

442 4 * 
iÁ˚
->
dh˝v4_rouãr_˙t
, iÁ˚->
dh˝v4_rouãr
);

445 i‡(
iÁ˚
->
dh˝v4_dns_˙t
 == 0)

446 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_DNSSERVER
, 4, &
iÁddr
.
sö_addr
);

448 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_DNSSERVER
,

449 4 * 
iÁ˚
->
dh˝v4_dns_˙t
, iÁ˚->
dh˝v4_dns
);

452 
	`dh˝v4_put
(&
ª∂y
, &
cookõ
, 
DHCPV4_OPT_END
, 0, 
NULL
);

454 
sockaddr_ö
 
de°
 = *((sockaddr_ö*)
addr
);

455 i‡(
ªq
->
güddr
.
s_addr
) {

459 
de°
.
sö_addr
 = 
ªq
->
güddr
;

460 
de°
.
sö_p‹t
 = 
	`ht⁄s
(
DHCPV4_SERVER_PORT
);

461 } i‡(
ªq
->
cüddr
.
s_addr
 &&Ñeq->cüddr.s_add∏!
de°
.
sö_addr
.s_addr) {

466 
de°
.
sö_addr
 = 
ªq
->
cüddr
;

467 
de°
.
sö_p‹t
 = 
	`ht⁄s
(
DHCPV4_CLIENT_PORT
);

468 } i‡((
	`¡ohs
(
ªq
->
Êags
Ë& 
DHCPV4_FLAG_BROADCAST
) ||

469 
ªq
->
hÀn
 !
ª∂y
.hÀ¿|| !ª∂y.
yüddr
.
s_addr
) {

473 
de°
.
sö_addr
.
s_addr
 = 
INADDR_BROADCAST
;

474 
de°
.
sö_p‹t
 = 
	`ht⁄s
(
DHCPV4_CLIENT_PORT
);

475 } i‡(!
ªq
->
cüddr
.
s_addr
 && 
msg
 =
DHCPV4_MSG_NAK
) {

480 
de°
.
sö_addr
.
s_addr
 = 
INADDR_BROADCAST
;

481 
de°
.
sö_p‹t
 = 
	`ht⁄s
(
DHCPV4_CLIENT_PORT
);

486 
de°
.
sö_addr
 = 
ª∂y
.
yüddr
;

487 
de°
.
sö_p‹t
 = 
	`ht⁄s
(
DHCPV4_CLIENT_PORT
);

489 
¨¥eq
 
¨p
 = {.
¨p_Êags
 = 
ATF_COM
};

490 
	`mem˝y
(
¨p
.
¨p_ha
.
ß_d©a
, 
ªq
->
chaddr
, 6);

491 
	`mem˝y
(&
¨p
.
¨p_∑
, &
de°
, (arp.arp_pa));

492 
	`mem˝y
(
¨p
.
¨p_dev
, 
iÁ˚
->
i‚ame
, (arp.arp_dev));

493 
	`io˘l
(
sock
, 
SIOCSARP
, &
¨p
);

496 i‡(
de°
.
sö_addr
.
s_addr
 =
INADDR_BROADCAST
) {

500 
	`sy¶og
(
LOG_WARNING
, "sending %sÅo ff:ff:ff:ff:ff:ff - %s",

501 
	`dh˝v4_msg_to_°rög
(
msg
),

502 
	`öë_¡ﬂ
(
de°
.
sö_addr
));

508 
	`sy¶og
(
LOG_WARNING
, "sending %sÅo %x:%x:%x:%x:%x:%x - %s",

509 
	`dh˝v4_msg_to_°rög
(
msg
),

510 
ªq
->
chaddr
[0],req->chaddr[1],req->chaddr[2],

511 
ªq
->
chaddr
[3],req->chaddr[4],req->chaddr[5],

512 
	`öë_¡ﬂ
(
de°
.
sö_addr
));

515 
	`£ndto
(
sock
, &
ª∂y
, ‘ïly), 
MSG_DONTWAIT
,

516 (
sockaddr
*)&
de°
, (dest));

517 
	}
}

519 
boﬁ
 
	$dh˝v4_ã°
(
öãrÁ˚
 *
iÁ˚
, 
uöt32_t
 
åy
)

521 
dh˝v4_assignmít
 *
c
;

522 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
dh˝v4_assignmíts
, 
hód
) {

523 i‡(
c
->
addr
 =
åy
) {

524  
Ál£
;

527  
åue
;

528 
	}
}

530 
boﬁ
 
	$dh˝v4_assign
(
öãrÁ˚
 *
iÁ˚
,

531 
dh˝v4_assignmít
 *
assign
, 
uöt32_t
 
øddr
)

533 
uöt32_t
 
°¨t
 = 
	`¡ohl
(
iÁ˚
->
dh˝v4_°¨t
.
s_addr
);

534 
uöt32_t
 
íd
 = 
	`¡ohl
(
iÁ˚
->
dh˝v4_íd
.
s_addr
);

535 
uöt32_t
 
cou¡
 = 
íd
 - 
°¨t
 + 1;

538 i‡(
°¨t
 <
øddr
 &&Ñadd∏<
íd
 && 
	`dh˝v4_ã°
(
iÁ˚
,Ñaddr)) {

539 
assign
->
addr
 = 
øddr
;

540 
	`li°_add
(&
assign
->
hód
, &
iÁ˚
->
dh˝v4_assignmíts
);

541 
	`sy¶og
(
LOG_DEBUG
, "assigningÅhe IPÅhe clientásked for: %u.%u.%u.%u",

542 (
assign
->
addr
 & 0xff000000) >> 24,

543 (
assign
->
addr
 & 0x00ff0000) >> 16,

544 (
assign
->
addr
 & 0x0000ff00) >> 8,

545 (
assign
->
addr
 & 0x000000ff));

546  
åue
;

550 
uöt32_t
 
£ed
 = 0;

551 
size_t
 
i
 = 0; i < (
assign
->
hwaddr
); ++i) {

553 
uöt8_t
 
o
 = 
assign
->
hwaddr
[
i
];

554 
£ed
 +(
o
*2654435761Ë% 
UINT32_MAX
;

556 
	`§™d
(
£ed
);

558 
uöt32_t
 
åy
 = (((uöt32_t)
	`ønd
()Ë% 
cou¡
Ë+ 
°¨t
;

560 i‡(
	`li°_em±y
(&
iÁ˚
->
dh˝v4_assignmíts
)) {

561 
assign
->
addr
 = 
åy
;

562 
	`li°_add
(&
assign
->
hód
, &
iÁ˚
->
dh˝v4_assignmíts
);

563 
	`sy¶og
(
LOG_DEBUG
, "assigning mapped IP (emptyÜist): %u.%u.%u.%u",

564 (
assign
->
addr
 & 0xff000000) >> 24,

565 (
assign
->
addr
 & 0x00ff0000) >> 16,

566 (
assign
->
addr
 & 0x0000ff00) >> 8,

567 (
assign
->
addr
 & 0x000000ff));

568  
åue
;

571 
uöt32_t
 
i
 = 0; i < 
cou¡
; ++i) {

572 i‡(
	`dh˝v4_ã°
(
iÁ˚
, 
åy
)) {

574 
assign
->
addr
 = 
åy
;

575 
	`li°_add
(&
assign
->
hód
, &
iÁ˚
->
dh˝v4_assignmíts
);

576 
	`sy¶og
(
LOG_DEBUG
, "assigning mapped IP: %u.%u.%u.%u (try %u of %u)",

577 (
assign
->
addr
 & 0xff000000) >> 24,

578 (
assign
->
addr
 & 0x00ff0000) >> 16,

579 (
assign
->
addr
 & 0x0000ff00) >> 8,

580 (
assign
->
addr
 & 0x000000ff), 
i
, 
cou¡
);

581  
åue
;

583 
åy
 = ((—ry - 
°¨t
Ë+ 1Ë% 
cou¡
) + start;

586 
	`sy¶og
(
LOG_DEBUG
, "can'tássignány IPáddress ->áddress space is full");

587  
Ál£
;

588 
	}
}

591 
dh˝v4_assignmít
* 
	$dh˝v4_Àa£
(
öãrÁ˚
 *
iÁ˚
,

592 
dh˝v4_msg
 
msg
, c⁄° 
uöt8_t
 *
mac
, 
ö_addr
 
ªqaddr
,

593 c⁄° *
ho°«me
)

595 
dh˝v4_assignmít
 *
Àa£
 = 
NULL
;

596 
uöt32_t
 
øddr
 = 
	`¡ohl
(
ªqaddr
.
s_addr
);

597 
time_t
 
now
 = 
	`odh˝d_time
();

599 
dh˝v4_assignmít
 *
c
, *
n
, *
a
 = 
NULL
;

600 
	`li°_f‹_óch_íåy_ß„
(
c
, 
n
, &
iÁ˚
->
dh˝v4_assignmíts
, 
hód
) {

601 i‡(!
	`memcmp
(
c
->
hwaddr
, 
mac
, 6)) {

602 
a
 = 
c
;

603 i‡(
c
->
addr
 =
øddr
)

605 } i‡(
c
->
vÆid_u¡û
 < 
now
) {

606 
	`li°_dñ
(&
c
->
hód
);

607 
	`‰ì
(
c
);

611 i‡(
msg
 =
DHCPV4_MSG_DISCOVER
 || msg =
DHCPV4_MSG_REQUEST
) {

612 
boﬁ
 
assig√d
 = !!
a
;

613 
size_t
 
ho°Àn
 = 
	`°æí
(
ho°«me
) + 1;

615 i‡(!
a
 && !
iÁ˚
->
no_dy«mic_dh˝
) {

616 
a
 = 
	`ˇŒoc
(1, (*aË+ 
ho°Àn
);

617 i‡(!
a
) {

618 
	`sy¶og
(
LOG_ERR
, "FaûedÅÿˇŒo¯bödög o¿öãrÁ˚ %s", 
iÁ˚
->
i‚ame
);

619  
NULL
;

621 
	`mem˝y
(
a
->
hwaddr
, 
mac
, (a->hwaddr));

622 
	`mem˝y
(
a
->
ho°«me
, ho°«me, 
ho°Àn
);

624 
assig√d
 = 
	`dh˝v4_assign
(
iÁ˚
, 
a
, 
øddr
);

627 i‡(
assig√d
 && !
a
->
ho°«me
[0] && hostname) {

628 
a
 = 
	`ªÆloc
◊, (*aË+ 
ho°Àn
);

629 i‡(!
a
) {

630 
	`sy¶og
(
LOG_ERR
, "FaûedÅÿªÆlo¯bödög o¿öãrÁ˚ %s", 
iÁ˚
->
i‚ame
);

631  
NULL
;

633 
	`mem˝y
(
a
->
ho°«me
, ho°«me, 
ho°Àn
);

636 
a
->
hód
.
√xt
->
¥ev
 = &a->head;

637 
a
->
hód
.
¥ev
->
√xt
 = &a->head;

640 
uöt32_t
 
Àa£time
;

641 i‡(
a
->
Àa£time
) {

642 
Àa£time
 = 
a
->leasetime;

644 
Àa£time
 = 
iÁ˚
->
dh˝v4_Àa£time
;

648 i‡(
assig√d
 && 
a
->
vÆid_u¡û
 < 
now
) {

649 
a
->
vÆid_u¡û
 = (
msg
 =
DHCPV4_MSG_DISCOVER
) ? 0 :

650 (
now
 + 
Àa£time
);

651 } i‡(!
assig√d
 && 
a
) {

652 
	`‰ì
(
a
);

653 
a
 = 
NULL
;

656 i‡(
assig√d
 && 
a
)

657 
Àa£
 = 
a
;

658 } i‡(
msg
 =
DHCPV4_MSG_RELEASE
) {

659 i‡(
a
 &&á->
vÆid_u¡û
 !
LONG_MAX
)

660 
a
->
vÆid_u¡û
 = 0;

661 } i‡(
msg
 =
DHCPV4_MSG_DECLINE
 && 
a
 &&á->
vÆid_u¡û
 !
LONG_MAX
) {

662 
	`mem£t
(
a
->
hwaddr
, 0, (a->hwaddr));

663 
a
->
vÆid_u¡û
 = 
now
 + 3600;

666 
	`dh˝v6_wrôe_°©efûe
();

668  
Àa£
;

669 
	}
}

	@dhcpv4.h

14 #¥agm®
⁄˚


16 
	#DHCPV4_CLIENT_PORT
 68

	)

17 
	#DHCPV4_SERVER_PORT
 67

	)

19 
	#DHCPV4_FLAG_BROADCAST
 0x8000

	)

21 
	edh˝v4_›
 {

22 
	mDHCPV4_BOOTREQUEST
 = 1,

23 
	mDHCPV4_BOOTREPLY
 = 2

26 
	edh˝v4_msg
 {

27 
	mDHCPV4_MSG_DISCOVER
 = 1,

28 
	mDHCPV4_MSG_OFFER
 = 2,

29 
	mDHCPV4_MSG_REQUEST
 = 3,

30 
	mDHCPV4_MSG_DECLINE
 = 4,

31 
	mDHCPV4_MSG_ACK
 = 5,

32 
	mDHCPV4_MSG_NAK
 = 6,

33 
	mDHCPV4_MSG_RELEASE
 = 7,

34 
	mDHCPV4_MSG_INFORM
 = 8,

37 
	edh˝v4_›t
 {

38 
	mDHCPV4_OPT_NETMASK
 = 1,

39 
	mDHCPV4_OPT_ROUTER
 = 3,

40 
	mDHCPV4_OPT_DNSSERVER
 = 6,

41 
	mDHCPV4_OPT_DOMAIN
 = 15,

42 
	mDHCPV4_OPT_MTU
 = 26,

43 
	mDHCPV4_OPT_BROADCAST
 = 28,

44 
	mDHCPV4_OPT_NTPSERVER
 = 42,

45 
	mDHCPV4_OPT_LEASETIME
 = 51,

46 
	mDHCPV4_OPT_MESSAGE
 = 53,

47 
	mDHCPV4_OPT_SERVERID
 = 54,

48 
	mDHCPV4_OPT_RENEW
 = 58,

49 
	mDHCPV4_OPT_REBIND
 = 59,

50 
	mDHCPV4_OPT_IPADDRESS
 = 50,

51 
	mDHCPV4_OPT_HOSTNAME
 = 12,

52 
	mDHCPV4_OPT_REQUEST
 = 17,

53 
	mDHCPV4_OPT_USER_CLASS
 = 77,

54 
	mDHCPV4_OPT_SEARCH_DOMAIN
 = 119,

55 
	mDHCPV4_OPT_END
 = 255,

58 
	sdh˝v4_mesßge
 {

59 
uöt8_t
 
	m›
;

60 
uöt8_t
 
	mhty≥
;

61 
uöt8_t
 
	mhÀn
;

62 
uöt8_t
 
	mh›s
;

63 
uöt32_t
 
	mxid
;

64 
uöt16_t
 
	m£cs
;

65 
uöt16_t
 
	mÊags
;

66 
ö_addr
 
	mcüddr
;

67 
ö_addr
 
	myüddr
;

68 
ö_addr
 
	msüddr
;

69 
ö_addr
 
	mgüddr
;

70 
uöt8_t
 
	mchaddr
[16];

71 
	m¢ame
[64];

72 
	mfûe
[128];

73 
uöt8_t
 
	m›ti⁄s
[312];

76 
	sdh˝v4_assignmít
 {

77 
li°_hód
 
	mhód
;

78 
uöt32_t
 
	maddr
;

79 
time_t
 
	mvÆid_u¡û
;

80 
uöt8_t
 
	mhwaddr
[6];

81 
uöt32_t
 
	mÀa£time
;

82 
	mho°«me
[];

85 
	sdh˝v4_›ti⁄
 {

86 
uöt8_t
 
	mty≥
;

87 
uöt8_t
 
	mÀn
;

88 
uöt8_t
 
	md©a
[];

92 
	#dh˝v4_f‹_óch_›ti⁄
(
°¨t
, 
íd
, 
›t
)\

93 
›t
 = (
dh˝v4_›ti⁄
*)(
°¨t
); \

94 &
›t
[1] <(
dh˝v4_›ti⁄
*)(
íd
) && \

95 &
›t
->
d©a
[›t->
Àn
] <(
íd
); \

96 
›t
 = (
dh˝v4_›ti⁄
*)&›t->
d©a
[›t->
Àn
])

	)

	@dhcpv6-ia.c

15 
	~"odh˝d.h
"

16 
	~"dh˝v6.h
"

17 
	~"dh˝v4.h
"

18 
	~"md5.h
"

19 
	~"usock.h
"

21 
	~<time.h
>

22 
	~<î∫o.h
>

23 
	~<f˙é.h
>

24 
	~<°dio.h
>

25 
	~<pﬁl.h
>

26 
	~<Æloˇ.h
>

27 
	~<ªsﬁv.h
>

28 
	~<limôs.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<uni°d.h
>

32 
	~<°dboﬁ.h
>

33 
	~<¨∑/öë.h
>

35 
	~"u°ªam.h
"

38 
ªc⁄f_timî
(
ulo›_timeout
 *
evít
);

39 
ulo›_timeout
 
	gªc⁄f_evít
 = {.
cb
 = 
ªc⁄f_timî
};

40 
uöt32_t
 
	g£rül
 = 0;

41 
uöt8_t
 
	g°©emd5
[16];

44 
	$dh˝v6_ü_öô
()

46 
	`ulo›_timeout_£t
(&
ªc⁄f_evít
, 2000);

48 
	}
}

51 
	$‰ì_dh˝v6_assignmít
(
dh˝v6_assignmít
 *
c
)

53 i‡(
c
->
m™aged_sock
.
fd
.
ªgi°îed
) {

54 
	`u°ªam_‰ì
(&
c
->
m™aged_sock
.
°ªam
);

55 
	`˛o£
(
c
->
m™aged_sock
.
fd
.fd);

58 i‡(
c
->
hód
.
√xt
)

59 
	`li°_dñ
(&
c
->
hód
);

61 
	`‰ì
(
c
->
m™aged
);

62 
	`‰ì
(
c
->
ho°«me
);

63 
	`‰ì
(
c
);

64 
	}
}

67 
	$£tup_dh˝v6_ü_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
)

69 i‡(!
íabÀ
 && 
iÁ˚
->
ü_assignmíts
.
√xt
) {

70 
dh˝v6_assignmít
 *
c
;

71 !
	`li°_em±y
(&
iÁ˚
->
ü_assignmíts
)) {

72 
c
 = 
	`li°_fú°_íåy
(&
iÁ˚
->
ü_assignmíts
, 
dh˝v6_assignmít
, 
hód
);

73 
	`‰ì_dh˝v6_assignmít
(
c
);

77 i‡(
íabÀ
 && 
iÁ˚
->
dh˝v6
 =
RELAYD_SERVER
) {

78 i‡(!
iÁ˚
->
ü_assignmíts
.
√xt
)

79 
	`INIT_LIST_HEAD
(&
iÁ˚
->
ü_assignmíts
);

81 i‡(
	`li°_em±y
(&
iÁ˚
->
ü_assignmíts
)) {

82 
dh˝v6_assignmít
 *
b‹dî
 = 
	`ˇŒoc
(1, (*border));

83 i‡(!
b‹dî
) {

84 
	`sy¶og
(
LOG_ERR
, "CÆlo¯Áûed f‹ b‹dî o¿öãrÁ˚ %s", 
iÁ˚
->
i‚ame
);

88 
b‹dî
->
Àngth
 = 64;

89 
	`li°_add
(&
b‹dî
->
hód
, &
iÁ˚
->
ü_assignmíts
);

93 
Àa£
 *lease;

94 
	`li°_f‹_óch_íåy
(
Àa£
, &
Àa£s
, 
hód
) {

96 
size_t
 
duid_Àn
 = 
Àa£
->duid_len ?Üease->duid_len : 14;

97 
dh˝v6_assignmít
 *
a
 = 
	`ˇŒoc
(1, (*aË+ 
duid_Àn
);

98 i‡(!
a
) {

99 
	`sy¶og
(
LOG_ERR
, "Calloc failed for staticÜeaseássignment on interface %s",

100 
iÁ˚
->
i‚ame
);

104 i‡(
Àa£
->
dh˝v4_Àa£time
 > 0)

105 
a
->
Àa£time
 = 
Àa£
->
dh˝v4_Àa£time
;

107 
a
->
˛id_Àn
 = 
duid_Àn
;

108 
a
->
Àngth
 = 128;

109 i‡(
Àa£
->
ho°id
) {

110 
a
->
assig√d
 = 
Àa£
->
ho°id
;

112 
uöt32_t
 
i4a
 = 
	`¡ohl
(
Àa£
->
ùaddr
.
s_addr
) & 0xff;

113 
a
->
assig√d
 = ((
i4a
 / 100) << 8) | (((i4a % 100) / 10) << 4) | (i4a % 10);

115 
	`odh˝d_uøndom
(
a
->
key
, (a->key));

116 
	`mem˝y
(
a
->
˛id_d©a
, 
Àa£
->
duid
,Üó£->
duid_Àn
);

117 
	`mem˝y
(
a
->
mac
, 
Àa£
->mac.
ëhî_addr_o˘ë
, (a->mac));

120 
dh˝v6_assignmít
 *
c
;

121 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
ü_assignmíts
, 
hód
) {

122 i‡(
c
->
Àngth
 !128 || c->
assig√d
 > 
a
->assigned) {

123 
	`li°_add_èû
(&
a
->
hód
, &
c
->head);

125 } i‡(
c
->
assig√d
 =
a
->assigned) {

131 i‡(
a
->
hód
.
√xt
) {

132 i‡(
Àa£
->
ho°«me
[0]) {

133 
	`‰ì
(
a
->
ho°«me
);

134 
a
->
ho°«me
 = 
	`°rdup
(
Àa£
->hostname);

137 
	`‰ì
(
a
->
ho°«me
);

138 
	`‰ì
(
a
);

143 
	}
}

146 
	$£nd_ªc⁄f
(
öãrÁ˚
 *
iÁ˚
, 
dh˝v6_assignmít
 *
assign
)

149 
dh˝v6_˛õ¡_hódî
 
hdr
;

150 
uöt16_t
 
§vid_ty≥
;

151 
uöt16_t
 
§vid_Àn
;

152 
uöt16_t
 
duid_ty≥
;

153 
uöt16_t
 
h¨dw¨e_ty≥
;

154 
uöt8_t
 
mac
[6];

155 
uöt16_t
 
msg_ty≥
;

156 
uöt16_t
 
msg_Àn
;

157 
uöt8_t
 
msg_id
;

158 
dh˝v6_auth_ªc⁄figuª
 
auth
;

159 
uöt16_t
 
˛id_ty≥
;

160 
uöt16_t
 
˛id_Àn
;

161 
uöt8_t
 
˛id_d©a
[128];

162 } 
	`__©åibuã__
((
∑cked
)Ë
ªc⁄f_msg
 = {

163 .
hdr
 = {
DHCPV6_MSG_RECONFIGURE
, {0, 0, 0}},

164 .
§vid_ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_SERVERID
),

165 .
§vid_Àn
 = 
	`ht⁄s
(10),

166 .
duid_ty≥
 = 
	`ht⁄s
(3),

167 .
h¨dw¨e_ty≥
 = 
	`ht⁄s
(1),

168 .
msg_ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_RECONF_MSG
),

169 .
msg_Àn
 = 
	`ht⁄s
(1),

170 .
msg_id
 = 
DHCPV6_MSG_RENEW
,

171 .
auth
 = {
	`ht⁄s
(
DHCPV6_OPT_AUTH
),

172 
	`ht⁄s
((
ªc⁄f_msg
.
auth
) - 4), 3, 1, 0,

173 {
	`ht⁄l
(
	`time
(
NULL
)), ht⁄l(++
£rül
)}, 2, {0}},

174 .
˛id_ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_CLIENTID
),

175 .
˛id_Àn
 = 
	`ht⁄s
(
assign
->clid_len),

176 .
˛id_d©a
 = {0},

179 
	`odh˝d_gë_mac
(
iÁ˚
, 
ªc⁄f_msg
.
mac
);

180 
	`mem˝y
(
ªc⁄f_msg
.
˛id_d©a
, 
assign
->˛id_d©a,ássign->
˛id_Àn
);

181 
iovec
 
iov
 = {&
ªc⁄f_msg
, ‘ec⁄f_msgË- 128 + 
assign
->
˛id_Àn
};

183 
md5_˘x_t
 
md5
;

184 
uöt8_t
 
£¸ëbyãs
[64];

185 
	`mem£t
(
£¸ëbyãs
, 0, (secretbytes));

186 
	`mem˝y
(
£¸ëbyãs
, 
assign
->
key
, (assign->key));

188 
size_t
 
i
 = 0; i < (
£¸ëbyãs
); ++i)

189 
£¸ëbyãs
[
i
] ^= 0x36;

191 
	`md5_begö
(&
md5
);

192 
	`md5_hash
(
£¸ëbyãs
, (£¸ëbyãs), &
md5
);

193 
	`md5_hash
(
iov
.
iov_ba£
, iov.
iov_Àn
, &
md5
);

194 
	`md5_íd
(
ªc⁄f_msg
.
auth
.
key
, &
md5
);

196 
size_t
 
i
 = 0; i < (
£¸ëbyãs
); ++i) {

197 
£¸ëbyãs
[
i
] ^= 0x36;

198 
£¸ëbyãs
[
i
] ^= 0x5c;

201 
	`md5_begö
(&
md5
);

202 
	`md5_hash
(
£¸ëbyãs
, (£¸ëbyãs), &
md5
);

203 
	`md5_hash
(
ªc⁄f_msg
.
auth
.
key
, 16, &
md5
);

204 
	`md5_íd
(
ªc⁄f_msg
.
auth
.
key
, &
md5
);

206  
	`odh˝d_£nd
(
iÁ˚
->
dh˝v6_evít
.
ulo›
.
fd
, &
assign
->
≥î
, &
iov
, 1, iface);

207 
	}
}

210 
	$dh˝v6_wrôe_°©efûe
()

212 
md5_˘x_t
 
md5
;

213 
	`md5_begö
(&
md5
);

215 i‡(
c⁄fig
.
dh˝_°©efûe
) {

216 
time_t
 
now
 = 
	`odh˝d_time
(), 
wÆl_time
 = 
	`time
(
NULL
);

217 
fd
 = 
	`›í
(
c⁄fig
.
dh˝_°©efûe
, 
O_CREAT
 | 
O_WRONLY
 | 
O_CLOEXEC
, 0644);

218 i‡(
fd
 < 0)

221 
	`lockf
(
fd
, 
F_LOCK
, 0);

222 i‡(
	`·runˇã
(
fd
, 0) < 0) {}

224 
FILE
 *
Â
 = 
	`fd›í
(
fd
, "w");

225 i‡(!
Â
) {

226 
	`˛o£
(
fd
);

230 
öãrÁ˚
 *
iÁ˚
;

231 
	`li°_f‹_óch_íåy
(
iÁ˚
, &
öãrÁ˚s
, 
hód
) {

232 i‡(
iÁ˚
->
dh˝v6
 !
RELAYD_SERVER
 && iÁ˚->
dh˝v4
 != RELAYD_SERVER)

235 i‡(
iÁ˚
->
dh˝v6
 =
RELAYD_SERVER
 && iÁ˚->
ü_assignmíts
.
√xt
) {

236 
dh˝v6_assignmít
 *
c
;

237 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
ü_assignmíts
, 
hód
) {

238 i‡(
c
->
˛id_Àn
 =0 || c->
m™aged_size
 < 0)

241 
ùbuf
[
INET6_ADDRSTRLEN
];

242 
Àa£buf
[512];

243 
duidbuf
[264];

244 
	`odh˝d_hexlify
(
duidbuf
, 
c
->
˛id_d©a
, c->
˛id_Àn
);

247 
l
 = 
	`¢¥ötf
(
Àa£buf
, (leasebuf), "# %s %s %x %s %u %x %u ",

248 
iÁ˚
->
i‚ame
, 
duidbuf
, 
	`¡ohl
(
c
->
üid
),

249 (
c
->
ho°«me
 ? c->hostname : "-"),

250 ()(
c
->
vÆid_u¡û
 > 
now
 ?

251 (
c
->
vÆid_u¡û
 - 
now
 + 
wÆl_time
) : 0),

252 
c
->
assig√d
, ()c->
Àngth
);

254 
ö6_addr
 
addr
;

255 
odh˝d_ùaddr
 *
addrs
 = (
c
->
m™aged
Ë? c->m™aged : 
iÁ˚
->
ü_addr
;

256 
size_t
 
addæí
 = (
c
->
m™aged
Ë? (size_t)c->
m™aged_size
 : 
iÁ˚
->
ü_addr_Àn
;

257 
size_t
 
m
 = 0;

259 
size_t
 
i
 = 0; i < 
addæí
; ++i)

260 i‡(
addrs
[
i
].
¥e„ºed
 >áddrs[
m
].preferred ||

261 (
addrs
[
i
].
¥e„ºed
 =addrs[
m
].preferred &&

262 
	`memcmp
(&
addrs
[
i
].
addr
, &addrs[
m
].addr, 16) > 0))

263 
m
 = 
i
;

265 
size_t
 
i
 = 0; i < 
addæí
; ++i) {

266 i‡(
addrs
[
i
].
¥efix
 > 96 || 
c
->
vÆid_u¡û
 <
now
 ||

267 (
iÁ˚
->
m™aged
 < 
RELAYD_MANAGED_NO_AFLAG
 && 
i
 !
m
 &&

268 
addrs
[
i
].
¥efix
 == 64))

271 
addr
 = 
addrs
[
i
].addr;

272 i‡(
c
->
Àngth
 == 128)

273 
addr
.
s6_addr32
[3] = 
	`ht⁄l
(
c
->
assig√d
);

275 
addr
.
s6_addr32
[1] |
	`ht⁄l
(
c
->
assig√d
);

277 
	`öë_¡›
(
AF_INET6
, &
addr
, 
ùbuf
, (ipbuf) - 1);

279 i‡(
c
->
Àngth
 =128 && c->
ho°«me
) {

280 
	`Âuts
(
ùbuf
, 
Â
);

282 
b
[256];

283 i‡(
	`dn_ex∑nd
(
iÁ˚
->
£¨ch
, iÁ˚->£¨ch + iÁ˚->
£¨ch_Àn
,

284 
iÁ˚
->
£¨ch
, 
b
, (b)) > 0)

285 
	`Ârötf
(
Â
, "\t%s.%s", 
c
->
ho°«me
, 
b
);

287 
	`Ârötf
(
Â
, "\t%s\n", 
c
->
ho°«me
);

288 
	`md5_hash
(
ùbuf
, 
	`°æí
(ùbuf), &
md5
);

289 
	`md5_hash
(
c
->
ho°«me
, 
	`°æí
(c->ho°«me), &
md5
);

292 
l
 +
	`¢¥ötf
(
Àa£buf
 +Ü, ÷ó£bufË-Ü, "%s/%d ", 
ùbuf
,

293 (
c
->
m™aged_size
Ë? 
addrs
[
i
].
¥efix
 : c->
Àngth
);

295 
Àa£buf
[
l
 - 1] = '\n';

296 
	`fwrôe
(
Àa£buf
, 1, 
l
, 
Â
);

300 i‡(
iÁ˚
->
dh˝v4
 =
RELAYD_SERVER
 && iÁ˚->
dh˝v4_assignmíts
.
√xt
) {

301 
dh˝v4_assignmít
 *
c
;

302 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
dh˝v4_assignmíts
, 
hód
) {

303 
ùbuf
[
INET6_ADDRSTRLEN
];

304 
Àa£buf
[512];

305 
duidbuf
[16];

306 
	`odh˝d_hexlify
(
duidbuf
, 
c
->
hwaddr
, (c->hwaddr));

309 
l
 = 
	`¢¥ötf
(
Àa£buf
, (leasebuf), "# %s %s ipv4 %s %u %x 32 ",

310 
iÁ˚
->
i‚ame
, 
duidbuf
,

311 (
c
->
ho°«me
 ? c->hostname : "-"),

312 ()(
c
->
vÆid_u¡û
 > 
now
 ?

313 (
c
->
vÆid_u¡û
 - 
now
 + 
wÆl_time
) : 0),

314 
c
->
addr
);

316 
ö_addr
 
addr
 = {
	`ht⁄l
(
c
->addr)};

317 
	`öë_¡›
(
AF_INET
, &
addr
, 
ùbuf
, (ipbuf) - 1);

319 i‡(
c
->
ho°«me
[0]) {

320 
	`Âuts
(
ùbuf
, 
Â
);

322 
b
[256];

323 i‡(
	`dn_ex∑nd
(
iÁ˚
->
£¨ch
, iÁ˚->£¨ch + iÁ˚->
£¨ch_Àn
,

324 
iÁ˚
->
£¨ch
, 
b
, (b)) > 0)

325 
	`Ârötf
(
Â
, "\t%s.%s", 
c
->
ho°«me
, 
b
);

327 
	`Ârötf
(
Â
, "\t%s\n", 
c
->
ho°«me
);

328 
	`md5_hash
(
ùbuf
, 
	`°æí
(ùbuf), &
md5
);

329 
	`md5_hash
(
c
->
ho°«me
, 
	`°æí
(c->ho°«me), &
md5
);

332 
l
 +
	`¢¥ötf
(
Àa£buf
 +Ü, ÷ó£bufË-Ü, "%s/32 ", 
ùbuf
);

333 
Àa£buf
[
l
 - 1] = '\n';

334 
	`fwrôe
(
Àa£buf
, 1, 
l
, 
Â
);

339 
	`f˛o£
(
Â
);

342 
uöt8_t
 
√wmd5
[16];

343 
	`md5_íd
(
√wmd5
, &
md5
);

345 i‡(
c⁄fig
.
dh˝_cb
 && 
	`memcmp
(
√wmd5
, 
°©emd5
, (newmd5))) {

346 
	`mem˝y
(
°©emd5
, 
√wmd5
, (statemd5));

347 *
¨gv
[2] = {
c⁄fig
.
dh˝_cb
, 
NULL
};

348 i‡(!
	`vf‹k
()) {

349 
	`execv
(
¨gv
[0],árgv);

350 
	`_exô
(128);

353 
	}
}

356 
	$≠∂y_Àa£
(
öãrÁ˚
 *
iÁ˚
, 
dh˝v6_assignmít
 *
a
, 
boﬁ
 
add
)

358 i‡(
a
->
Àngth
 > 64 ||á->
m™aged_size
 < 0)

361 
odh˝d_ùaddr
 *
addrs
 = (
a
->
m™aged
Ë?á->m™aged : 
iÁ˚
->
ü_addr
;

362 
size_t
 
addæí
 = (
a
->
m™aged
Ë? (size_tÔ->
m™aged_size
 : 
iÁ˚
->
ü_addr_Àn
;

364 
size_t
 
i
 = 0; i < 
addæí
; ++i) {

365 
ö6_addr
 
¥efix
 = 
addrs
[
i
].
addr
;

366 
¥efix
.
s6_addr32
[1] |
	`ht⁄l
(
a
->
assig√d
);

367 
	`odh˝d_£tup_rouã
(&
¥efix
, (
a
->
m™aged_size
Ë? 
addrs
[
i
].¥efix :á->
Àngth
,

368 
iÁ˚
, &
a
->
≥î
.
sö6_addr
, 1024, 
add
);

370 
	}
}

374 
	$m™aged_h™dÀ_pd_d©a
(
u°ªam
 *
s
, 
_unu£d
 
byãs_√w
)

376 
dh˝v6_assignmít
 *
c
 = 
	`c⁄èöî_of
(
s
, dh˝v6_assignmít, 
m™aged_sock
);

377 
time_t
 
now
 = 
	`odh˝d_time
();

378 
boﬁ
 
fú°
 = 
c
->
m™aged_size
 < 0;

381 
≥ndög
;

382 *
d©a
 = 
	`u°ªam_gë_ªad_buf
(
s
, &
≥ndög
);

383 *
íd
 = 
	`memmem
(
d©a
, 
≥ndög
, "\n\n", 2);

385 i‡(!
íd
)

388 
íd
 += 2;

389 
íd
[-1] = 0;

391 
c
->
m™aged_size
 = 0;

392 i‡(
c
->
ac˚±_ªc⁄f
)

393 
c
->
ªc⁄f_˙t
 = 1;

395 *
ßvïå
;

396 *
löe
 = 
	`°πok_r
(
d©a
, "\n", &
ßvïå
);Üöe;Üöê°πok_r(
NULL
, "\n", &saveptr)) {

397 
c
->
m™aged
 = 
	`ªÆloc
(c->m™aged, (c->
m™aged_size
 + 1) * (*c->managed));

398 
odh˝d_ùaddr
 *
n
 = &
c
->
m™aged
[c->
m™aged_size
];

400 *
ßvïå2
, *
x
 = 
	`°πok_r
(
löe
, "/", &saveptr2);

401 i‡(!
x
 || 
	`öë_±⁄
(
AF_INET6
, x, &
n
->
addr
) < 1)

404 
x
 = 
	`°πok_r
(
NULL
, ",", &
ßvïå2
);

405 i‡(
	`ssˇnf
(
x
, "%hhu", &
n
->
¥efix
) < 1)

408 
x
 = 
	`°πok_r
(
NULL
, ",", &
ßvïå2
);

409 i‡(
	`ssˇnf
(
x
, "%u", &
n
->
¥e„ºed
) < 1)

412 
x
 = 
	`°πok_r
(
NULL
, ",", &
ßvïå2
);

413 i‡(
	`ssˇnf
(
x
, "%u", &
n
->
vÆid
) < 1)

416 i‡(
n
->
¥e„ºed
 >Ç->
vÆid
)

419 i‡(
UINT32_MAX
 - 
now
 < 
n
->
¥e„ºed
)

420 
n
->
¥e„ºed
 = 
UINT32_MAX
;

422 
n
->
¥e„ºed
 +
now
;

424 i‡(
UINT32_MAX
 - 
now
 < 
n
->
vÆid
)

425 
n
->
vÆid
 = 
UINT32_MAX
;

427 
n
->
vÆid
 +
now
;

429 
n
->
d¥efix
 = 0;

431 ++
c
->
m™aged_size
;

434 
	`u°ªam_c⁄sume
(
s
, 
íd
 - 
d©a
);

437 i‡(
fú°
 && 
c
->
m™aged_size
 == 0)

438 
	`‰ì_dh˝v6_assignmít
(
c
);

439 i‡(
fú°
)

440 
c
->
vÆid_u¡û
 = 
now
 + 150;

441 
	}
}

445 
	$m™aged_h™dÀ_pd_d⁄e
(
u°ªam
 *
s
)

447 
dh˝v6_assignmít
 *
c
 = 
	`c⁄èöî_of
(
s
, dh˝v6_assignmít, 
m™aged_sock
);

448 
c
->
vÆid_u¡û
 = 
	`odh˝d_time
() + 15;

449 
c
->
m™aged_size
 = 0;

450 i‡(
c
->
ac˚±_ªc⁄f
)

451 
c
->
ªc⁄f_˙t
 = 1;

452 
	}
}

456 
boﬁ
 
	$assign_pd
(
öãrÁ˚
 *
iÁ˚
, 
dh˝v6_assignmít
 *
assign
)

458 
dh˝v6_assignmít
 *
c
;

460 i‡(
iÁ˚
->
dh˝v6_pd_m™agî
[0]) {

461 
fd
 = 
	`usock
(
USOCK_UNIX
 | 
USOCK_TCP
, 
iÁ˚
->
dh˝v6_pd_m™agî
, 
NULL
);

462 i‡(
fd
 >= 0) {

463 
üidbuf
[298];

464 
	`odh˝d_hexlify
(
üidbuf
, 
assign
->
˛id_d©a
,ássign->
˛id_Àn
);

466 
assign
->
m™aged_sock
.
°ªam
.
nŸify_ªad
 = 
m™aged_h™dÀ_pd_d©a
;

467 
assign
->
m™aged_sock
.
°ªam
.
nŸify_°©e
 = 
m™aged_h™dÀ_pd_d⁄e
;

468 
	`u°ªam_fd_öô
(&
assign
->
m™aged_sock
, 
fd
);

469 
	`u°ªam_¥ötf
(&
assign
->
m™aged_sock
.
°ªam
, "%s,%x\n::/%d,0,0\n\n",

470 
üidbuf
, 
assign
->
üid
,ássign->
Àngth
);

471 
	`u°ªam_wrôe_≥ndög
(&
assign
->
m™aged_sock
.
°ªam
);

472 
assign
->
m™aged_size
 = -1;

473 
assign
->
vÆid_u¡û
 = 
	`odh˝d_time
() + 15;

474 
	`li°_add
(&
assign
->
hód
, &
iÁ˚
->
ü_assignmíts
);

477 
pﬁlfd
 
pfd
 = { .
fd
 = fd, .
evíts
 = 
POLLIN
 };

478 
	`pﬁl
(&
pfd
, 1, 250);

479 
	`m™aged_h™dÀ_pd_d©a
(&
assign
->
m™aged_sock
.
°ªam
, 0);

481 i‡(
	`f˙é
(
fd
, 
F_GETFL
Ë>0 && 
assign
->
m™aged_size
 > 0)

482  
åue
;

485  
Ál£
;

486 } i‡(
iÁ˚
->
ü_addr_Àn
 < 1) {

487  
Ál£
;

491 
uöt32_t
 
cuºít
 = 1, 
asize
 = (1 << (64 - 
assign
->
Àngth
)) - 1;

492 i‡(
assign
->
assig√d
) {

493 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
ü_assignmíts
, 
hód
) {

494 i‡(
c
->
Àngth
 == 128 || c->length == 0)

497 i‡(
assign
->
assig√d
 >
cuºít
 &&ássign->assig√d + 
asize
 < 
c
->assigned) {

498 
	`li°_add_èû
(&
assign
->
hód
, &
c
->head);

499 
	`≠∂y_Àa£
(
iÁ˚
, 
assign
, 
åue
);

500  
åue
;

503 i‡(
c
->
assig√d
 != 0)

504 
cuºít
 = (
c
->
assig√d
 + (1 << (64 - c->
Àngth
)));

509 
cuºít
 = 1;

510 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
ü_assignmíts
, 
hód
) {

511 i‡(
c
->
Àngth
 == 128 || c->length == 0)

514 
cuºít
 = (cuºíà+ 
asize
) & (~asize);

515 i‡(
cuºít
 + 
asize
 < 
c
->
assig√d
) {

516 
assign
->
assig√d
 = 
cuºít
;

517 
	`li°_add_èû
(&
assign
->
hód
, &
c
->head);

518 
	`≠∂y_Àa£
(
iÁ˚
, 
assign
, 
åue
);

519  
åue
;

522 i‡(
c
->
assig√d
 != 0)

523 
cuºít
 = (
c
->
assig√d
 + (1 << (64 - c->
Àngth
)));

526  
Ál£
;

527 
	}
}

530 
boﬁ
 
	$assign_«
(
öãrÁ˚
 *
iÁ˚
, 
dh˝v6_assignmít
 *
assign
)

533 
uöt32_t
 
£ed
 = 0;

534 
size_t
 
i
 = 0; i < 
assign
->
˛id_Àn
; ++i)

535 
£ed
 +
assign
->
˛id_d©a
[
i
];

536 
	`§™d
(
£ed
);

539 
size_t
 
i
 = 0; i < 100; ++i) {

540 
uöt32_t
 
åy
;

541 dÿ
åy
 = ((
uöt32_t
)
	`ønd
()) % 0x0fff; try < 0x100);

543 
dh˝v6_assignmít
 *
c
;

544 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
ü_assignmíts
, 
hód
) {

545 i‡(
c
->
Àngth
 == 0)

548 i‡(
c
->
assig√d
 > 
åy
 || c->
Àngth
 != 128) {

549 
assign
->
assig√d
 = 
åy
;

550 
	`li°_add_èû
(&
assign
->
hód
, &
c
->head);

551  
åue
;

552 } i‡(
c
->
assig√d
 =
åy
) {

558  
Ál£
;

559 
	}
}

561 
	$dh˝v6_ü_¥eupd©e
(
öãrÁ˚
 *
iÁ˚
)

563 i‡(
iÁ˚
->
dh˝v6
 !
RELAYD_SERVER
)

566 
dh˝v6_assignmít
 *
c
, *
b‹dî
 = 
	`li°_œ°_íåy
(

567 &
iÁ˚
->
ü_assignmíts
, 
dh˝v6_assignmít
, 
hód
);

568 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
ü_assignmíts
, 
hód
)

569 i‡(
c
 !
b‹dî
 && !
iÁ˚
->
m™aged
)

570 
	`≠∂y_Àa£
(
iÁ˚
, 
c
, 
Ál£
);

571 
	}
}

573 
	$dh˝v6_ü_po°upd©e
(
öãrÁ˚
 *
iÁ˚
, 
time_t
 
now
)

575 i‡(
iÁ˚
->
dh˝v6
 !
RELAYD_SERVER
)

578 
mö¥efix
 = -1;

579 
size_t
 
i
 = 0; i < 
iÁ˚
->
ü_addr_Àn
; ++i) {

580 i‡(
iÁ˚
->
ü_addr
[
i
].
¥e„ºed
 > (
uöt32_t
)
now
 &&

581 
iÁ˚
->
ü_addr
[
i
].
¥efix
 < 64 &&

582 
iÁ˚
->
ü_addr
[
i
].
¥efix
 > 
mö¥efix
)

583 
mö¥efix
 = 
iÁ˚
->
ü_addr
[
i
].
¥efix
;

586 
dh˝v6_assignmít
 *
b‹dî
 = 
	`li°_œ°_íåy
(

587 &
iÁ˚
->
ü_assignmíts
, 
dh˝v6_assignmít
, 
hód
);

588 i‡(
mö¥efix
 > 32 && minprefix <= 64)

589 
b‹dî
->
assig√d
 = 1U << (64 - 
mö¥efix
);

591 
b‹dî
->
assig√d
 = 0;

593 
li°_hód
 
ªassign
 = 
	`LIST_HEAD_INIT
(reassign);

594 
dh˝v6_assignmít
 *
c
, *
d
;

595 
	`li°_f‹_óch_íåy_ß„
(
c
, 
d
, &
iÁ˚
->
ü_assignmíts
, 
hód
) {

596 i‡(
c
->
˛id_Àn
 =0 || c->
vÆid_u¡û
 < 
now
 || c->
m™aged_size
)

599 i‡(
c
->
Àngth
 < 128 && c->
assig√d
 >
b‹dî
->assigned && c != border)

600 
	`li°_move
(&
c
->
hód
, &
ªassign
);

601 i‡(
c
 !
b‹dî
)

602 
	`≠∂y_Àa£
(
iÁ˚
, 
c
, 
åue
);

604 i‡(
c
->
ac˚±_ªc⁄f
 && c->
ªc⁄f_˙t
 == 0) {

605 
c
->
ªc⁄f_˙t
 = 1;

606 
c
->
ªc⁄f_£¡
 = 
now
;

607 
	`£nd_ªc⁄f
(
iÁ˚
, 
c
);

610 
dh˝v6_assignmít
 *
a
;

611 
	`li°_f‹_óch_íåy
(
a
, &
iÁ˚
->
ü_assignmíts
, 
hód
)

612 i‡(
a
 !
c
 &&á->
˛id_Àn
 == c->clid_len &&

613 !
	`memcmp
(
a
->
˛id_d©a
, 
c
->˛id_d©a,á->
˛id_Àn
))

614 
c
->
ªc⁄f_˙t
 = 
INT_MAX
;

618 !
	`li°_em±y
(&
ªassign
)) {

619 
c
 = 
	`li°_fú°_íåy
(&
ªassign
, 
dh˝v6_assignmít
, 
hód
);

620 
	`li°_dñ
(&
c
->
hód
);

621 i‡(!
	`assign_pd
(
iÁ˚
, 
c
)) {

622 
c
->
assig√d
 = 0;

623 
	`li°_add
(&
c
->
hód
, &
iÁ˚
->
ü_assignmíts
);

627 
	`dh˝v6_wrôe_°©efûe
();

628 
	}
}

631 
	$ªc⁄f_timî
(
ulo›_timeout
 *
evít
)

633 
time_t
 
now
 = 
	`odh˝d_time
();

634 
öãrÁ˚
 *
iÁ˚
;

635 
	`li°_f‹_óch_íåy
(
iÁ˚
, &
öãrÁ˚s
, 
hód
) {

636 i‡(
iÁ˚
->
dh˝v6
 !
RELAYD_SERVER
 || iÁ˚->
ü_assignmíts
.
√xt
 =
NULL
)

639 
dh˝v6_assignmít
 *
a
, *
n
;

640 
	`li°_f‹_óch_íåy_ß„
(
a
, 
n
, &
iÁ˚
->
ü_assignmíts
, 
hód
) {

641 i‡(
a
->
vÆid_u¡û
 < 
now
) {

642 i‡((
a
->
Àngth
 < 128 &&á->
˛id_Àn
 > 0) ||

643 (
a
->
Àngth
 =128 &&á->
˛id_Àn
 == 0)) {

644 
	`li°_dñ
(&
a
->
hód
);

645 
	`‰ì_dh˝v6_assignmít
(
a
);

647 } i‡(
a
->
ªc⁄f_˙t
 > 0 &&á->reconf_cnt < 8 &&

648 
now
 > 
a
->
ªc⁄f_£¡
 + (1 <<á->
ªc⁄f_˙t
)) {

649 ++
a
->
ªc⁄f_˙t
;

650 
a
->
ªc⁄f_£¡
 = 
now
;

651 
	`£nd_ªc⁄f
(
iÁ˚
, 
a
);

655 
	`ulo›_timeout_£t
(
evít
, 2000);

656 
	}
}

659 
size_t
 
	$≠≥nd_ª∂y
(
uöt8_t
 *
buf
, 
size_t
 
buÊí
, 
uöt16_t
 
°©us
,

660 c⁄° 
dh˝v6_ü_hdr
 *
ü
, 
dh˝v6_assignmít
 *
a
,

661 
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
ªque°
)

663 i‡(
buÊí
 < (*
ü
Ë+ (
dh˝v6_ü_¥efix
))

666 
dh˝v6_ü_hdr
 
out
 = {
ü
->
ty≥
, 0, ia->
üid
, 0, 0};

667 
size_t
 
d©Æí
 = (
out
);

668 
time_t
 
now
 = 
	`odh˝d_time
();

670 i‡(
°©us
) {

671 
	`__©åibuã__
((
∑cked
)) {

672 
uöt16_t
 
ty≥
;

673 
uöt16_t
 
Àn
;

674 
uöt16_t
 
vÆue
;

675 } 
°©
 = {
	`ht⁄s
(
DHCPV6_OPT_STATUS
), htons((stat) - 4),

676 
	`ht⁄s
(
°©us
)};

678 
	`mem˝y
(
buf
 + 
d©Æí
, &
°©
, (stat));

679 
d©Æí
 +(
°©
);

681 i‡(
a
) {

682 
uöt32_t
 
Àa£time
;

683 i‡(
a
->
Àa£time
 > 0) {

684 
Àa£time
 = 
a
->leasetime;

686 
Àa£time
 = 
iÁ˚
->
dh˝v4_Àa£time
;

688 i‡(
Àa£time
 == 0)

689 
Àa£time
 = 3600;

690 i‡(
Àa£time
 < 60)

691 
Àa£time
 = 60;

693 
uöt32_t
 
¥ef
 = 
Àa£time
;

694 
uöt32_t
 
vÆid
 = 
Àa£time
;

696 
odh˝d_ùaddr
 *
addrs
 = (
a
->
m™aged
Ë?á->m™aged : 
iÁ˚
->
ü_addr
;

697 
size_t
 
addæí
 = (
a
->
m™aged
Ë? (size_tÔ->
m™aged_size
 : 
iÁ˚
->
ü_addr_Àn
;

698 
size_t
 
m
 = 0;

700 
size_t
 
i
 = 0; i < 
addæí
; ++i)

701 i‡(
addrs
[
i
].
¥e„ºed
 >áddrs[
m
].preferred ||

702 (
addrs
[
i
].
¥e„ºed
 =addrs[
m
].preferred &&

703 
	`memcmp
(&
addrs
[
i
].
addr
, &addrs[
m
].addr, 16) > 0))

704 
m
 = 
i
;

706 
size_t
 
i
 = 0; i < 
addæí
; ++i) {

707 
uöt32_t
 
¥efix_¥ef
 = 
addrs
[
i
].
¥e„ºed
;

708 
uöt32_t
 
¥efix_vÆid
 = 
addrs
[
i
].
vÆid
;

710 i‡(
addrs
[
i
].
¥efix
 > 96 ||

711 
addrs
[
i
].
¥e„ºed
 <(
uöt32_t
)
now
)

714 i‡(
¥efix_¥ef
 !
UINT32_MAX
)

715 
¥efix_¥ef
 -
now
;

717 i‡(
¥efix_vÆid
 !
UINT32_MAX
)

718 
¥efix_vÆid
 -
now
;

720 i‡(
a
->
Àngth
 < 128) {

721 
dh˝v6_ü_¥efix
 
p
 = {

722 .
ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_IA_PREFIX
),

723 .
Àn
 = 
	`ht⁄s
((
p
) - 4),

724 .
¥e„ºed
 = 
	`ht⁄l
(
¥efix_¥ef
),

725 .
vÆid
 = 
	`ht⁄l
(
¥efix_vÆid
),

726 .
¥efix
 = (
a
->
m™aged_size
Ë? 
addrs
[
i
].¥efix :á->
Àngth
,

727 .
addr
 = 
addrs
[
i
].addr

729 
p
.
addr
.
s6_addr32
[1] |
	`ht⁄l
(
a
->
assig√d
);

731 
size_t
 
íåÀn
 = (
p
) - 4;

733 i‡(
d©Æí
 + 
íåÀn
 + 4 > 
buÊí
 ||

734 (
a
->
assig√d
 =0 &&á->
m™aged_size
 == 0) ||

735 (!
a
->
m™aged_size
 &&á->
Àngth
 <
addrs
[
i
].
¥efix
))

738 
	`mem˝y
(
buf
 + 
d©Æí
, &
p
, (p));

739 
d©Æí
 +
íåÀn
 + 4;

741 
dh˝v6_ü_addr
 
n
 = {

742 .
ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_IA_ADDR
),

743 .
Àn
 = 
	`ht⁄s
((
n
) - 4),

744 .
addr
 = 
addrs
[
i
].addr,

745 .
¥e„ºed
 = 
	`ht⁄l
(
¥efix_¥ef
),

746 .
vÆid
 = 
	`ht⁄l
(
¥efix_vÆid
)

748 
n
.
addr
.
s6_addr32
[3] = 
	`ht⁄l
(
a
->
assig√d
);

749 
size_t
 
íåÀn
 = (
n
) - 4;

751 i‡(
iÁ˚
->
m™aged
 < 
RELAYD_MANAGED_NO_AFLAG
 && 
i
 !
m
 &&

752 
addrs
[
i
].
¥efix
 <= 64)

755 i‡(
d©Æí
 + 
íåÀn
 + 4 > 
buÊí
 || 
a
->
assig√d
 == 0)

758 
	`mem˝y
(
buf
 + 
d©Æí
, &
n
, (n));

759 
d©Æí
 +
íåÀn
 + 4;

763 i‡(
¥efix_¥ef
 > 0) {

764 i‡(
¥efix_¥ef
 < 
¥ef
)

765 
¥ef
 = 
¥efix_¥ef
;

767 i‡(
¥efix_vÆid
 < 
vÆid
)

768 
vÆid
 = 
¥efix_vÆid
;

772 
a
->
vÆid_u¡û
 = 
vÆid
 + 
now
;

773 
out
.
t1
 = 
	`ht⁄l
(
¥ef
 * 5 / 10);

774 
out
.
t2
 = 
	`ht⁄l
(
¥ef
 * 8 / 10);

776 i‡(!
out
.
t1
)

777 
out
.
t1
 = 
	`ht⁄l
(1);

779 i‡(!
out
.
t2
)

780 
out
.
t2
 = 
	`ht⁄l
(1);

783 i‡(!
ªque°
) {

784 
uöt8_t
 *
od©a
, *
íd
 = ((uöt8_t*)
ü
Ë+ 
	`ht⁄s
(ü->
Àn
) + 4;

785 
uöt16_t
 
Ÿy≥
, 
ﬁí
;

786 
	`dh˝v6_f‹_óch_›ti⁄
((
uöt8_t
*)&
ü
[1], 
íd
, 
Ÿy≥
, 
ﬁí
, 
od©a
) {

787 
dh˝v6_ü_¥efix
 *
p
 = (dh˝v6_ü_¥efix*)&
od©a
[-4];

788 
dh˝v6_ü_addr
 *
n
 = (dh˝v6_ü_addr*)&
od©a
[-4];

789 i‡((
Ÿy≥
 !
DHCPV6_OPT_IA_PREFIX
 || 
ﬁí
 < (*
p
) - 4) &&

790 (
Ÿy≥
 !
DHCPV6_OPT_IA_ADDR
 || 
ﬁí
 < (*
n
) - 4))

793 
boﬁ
 
found
 = 
Ál£
;

794 i‡(
a
) {

795 
odh˝d_ùaddr
 *
addrs
 = (
a
->
m™aged
Ë?á->m™aged : 
iÁ˚
->
ü_addr
;

796 
size_t
 
addæí
 = (
a
->
m™aged
Ë? (size_tÔ->
m™aged_size
 : 
iÁ˚
->
ü_addr_Àn
;

798 
size_t
 
i
 = 0; i < 
addæí
; ++i) {

799 i‡(
addrs
[
i
].
¥efix
 > 96 ||

800 
addrs
[
i
].
¥e„ºed
 <(
uöt32_t
)
now
)

803 
ö6_addr
 
addr
 = 
addrs
[
i
].addr;

804 i‡(
ü
->
ty≥
 =
	`ht⁄s
(
DHCPV6_OPT_IA_PD
)) {

805 
addr
.
s6_addr32
[1] |
	`ht⁄l
(
a
->
assig√d
);

807 i‡(!
	`memcmp
(&
p
->
addr
, &addr, (addr)) &&

808 
p
->
¥efix
 =((
a
->
m™aged
Ë? 
addrs
[
i
].¥efix :á->
Àngth
))

809 
found
 = 
åue
;

811 
addr
.
s6_addr32
[3] = 
	`ht⁄l
(
a
->
assig√d
);

813 i‡(!
	`memcmp
(&
n
->
addr
, &addr, (addr)))

814 
found
 = 
åue
;

819 i‡(!
found
) {

820 i‡(
Ÿy≥
 =
DHCPV6_OPT_IA_PREFIX
) {

821 
dh˝v6_ü_¥efix
 
öv
 = {

822 .
ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_IA_PREFIX
),

823 .
Àn
 = 
	`ht⁄s
((
öv
) - 4),

824 .
¥e„ºed
 = 0,

825 .
vÆid
 = 0,

826 .
¥efix
 = 
p
->prefix,

827 .
addr
 = 
p
->addr

830 i‡(
d©Æí
 + (
öv
Ë> 
buÊí
)

833 
	`mem˝y
(
buf
 + 
d©Æí
, &
öv
, (inv));

834 
d©Æí
 +(
öv
);

836 
dh˝v6_ü_addr
 
öv
 = {

837 .
ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_IA_ADDR
),

838 .
Àn
 = 
	`ht⁄s
((
öv
) - 4),

839 .
addr
 = 
n
->addr,

840 .
¥e„ºed
 = 0,

841 .
vÆid
 = 0

844 i‡(
d©Æí
 + (
öv
Ë> 
buÊí
)

847 
	`mem˝y
(
buf
 + 
d©Æí
, &
öv
, (inv));

848 
d©Æí
 +(
öv
);

855 
out
.
Àn
 = 
	`ht⁄s
(
d©Æí
 - 4);

856 
	`mem˝y
(
buf
, &
out
, (out));

857  
d©Æí
;

858 
	}
}

861 
	$dh˝v6_log
(
uöt8_t
 
msgty≥
, 
öãrÁ˚
 *
iÁ˚
, 
time_t
 
now
,

862 c⁄° *
duidbuf
, 
boﬁ
 
is_pd
, 
dh˝v6_assignmít
 *
a
, 
code
)

864 c⁄° *
ty≥
 = "UNKNOWN";

865 c⁄° *
°©us
 = "UNKNOWN";

867 i‡(
msgty≥
 =
DHCPV6_MSG_RENEW
)

870 
msgty≥
) {

871 
DHCPV6_MSG_SOLICIT
:

872 
ty≥
 = "SOLICIT";

874 
DHCPV6_MSG_REQUEST
:

875 
ty≥
 = "REQUEST";

877 
DHCPV6_MSG_CONFIRM
:

878 
ty≥
 = "CONFIRM";

880 
DHCPV6_MSG_RENEW
:

881 
ty≥
 = "RENEW";

883 
DHCPV6_MSG_REBIND
:

884 
ty≥
 = "REBIND";

886 
DHCPV6_MSG_RELEASE
:

887 
ty≥
 = "RELEASE";

889 
DHCPV6_MSG_DECLINE
:

890 
ty≥
 = "DECLINE";

894 
code
) {

895 
DHCPV6_STATUS_OK
:

896 
°©us
 = "ok";

898 
DHCPV6_STATUS_NOADDRSAVAIL
:

899 
°©us
 = "noáddressesávailable";

901 
DHCPV6_STATUS_NOBINDING
:

902 
°©us
 = "no binding";

904 
DHCPV6_STATUS_NOTONLINK
:

905 
°©us
 = "not on-link";

907 
DHCPV6_STATUS_NOPREFIXAVAIL
:

908 
°©us
 = "noÖrefixávailable";

912 
Àa£buf
[256] = "";

914 i‡(
a
) {

915 
odh˝d_ùaddr
 *
addrs
 = (
a
->
m™aged
Ë?á->m™aged : 
iÁ˚
->
ü_addr
;

916 
size_t
 
addæí
 = (
a
->
m™aged
Ë? (size_tÔ->
m™aged_size
 : 
iÁ˚
->
ü_addr_Àn
;

917 
size_t
 
lbsize
 = 0;

918 
addrbuf
[
INET6_ADDRSTRLEN
];

920 
size_t
 
i
 = 0; i < 
addæí
; ++i) {

921 i‡(
addrs
[
i
].
¥efix
 > 96 ||áddrs[i].
¥e„ºed
 <(
uöt32_t
)
now
)

924 
ö6_addr
 
addr
 = 
addrs
[
i
].addr;

925 
¥efix
 = 
a
->
m™aged
 ? 
addrs
[
i
].¥efix :á->
Àngth
;

926 i‡(
¥efix
 == 128)

927 
addr
.
s6_addr32
[3] = 
	`ht⁄l
(
a
->
assig√d
);

929 
addr
.
s6_addr32
[1] |
	`ht⁄l
(
a
->
assig√d
);

931 
	`öë_¡›
(
AF_INET6
, &
addr
, 
addrbuf
, (addrbuf));

932 
lbsize
 +
	`¢¥ötf
(
Àa£buf
 +Übsize, ÷ó£bufË-Übsize, "%s/%d ", 
addrbuf
, 
¥efix
);

936 
	`sy¶og
(
LOG_WARNING
, "DHCPV6 %†%†‰om %†⁄ %s: %†%s", 
ty≥
, (
is_pd
) ? "IA_PD" : "IA_NA",

937 
duidbuf
, 
iÁ˚
->
i‚ame
, 
°©us
, 
Àa£buf
);

938 
	}
}

942 
ssize_t
 
	$dh˝v6_h™dÀ_ü
(
uöt8_t
 *
buf
, 
size_t
 
buÊí
, 
öãrÁ˚
 *
iÁ˚
,

943 c⁄° 
sockaddr_ö6
 *
addr
, c⁄° *
d©a
, c⁄° 
uöt8_t
 *
íd
)

945 
time_t
 
now
 = 
	`odh˝d_time
();

946 
size_t
 
ª•⁄£_Àn
 = 0;

947 c⁄° 
dh˝v6_˛õ¡_hódî
 *
hdr
 = 
d©a
;

948 
uöt8_t
 *
°¨t
 = (uöt8_t*)&
hdr
[1], *
od©a
;

949 
uöt16_t
 
Ÿy≥
, 
ﬁí
;

952 
boﬁ
 
ac˚±_ªc⁄f
 = 
Ál£
;

953 
uöt8_t
 *
˛id_d©a
 = 
NULL
, 
˛id_Àn
 = 0, 
mac
[6] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

954 
ho°«me
[256];

955 
size_t
 
ho°«me_Àn
 = 0;

956 
boﬁ
 
nŸ⁄lök
 = 
Ál£
;

957 
duidbuf
[261];

959 
	`dh˝v6_f‹_óch_›ti⁄
(
°¨t
, 
íd
, 
Ÿy≥
, 
ﬁí
, 
od©a
) {

960 i‡(
Ÿy≥
 =
DHCPV6_OPT_CLIENTID
) {

961 
˛id_d©a
 = 
od©a
;

962 
˛id_Àn
 = 
ﬁí
;

964 i‡(
ﬁí
 =14 && 
od©a
[0] == 0 && odata[1] == 1)

965 
	`mem˝y
(
mac
, &
od©a
[8], (mac));

966 i‡(
ﬁí
 =10 && 
od©a
[0] == 0 && odata[1] == 3)

967 
	`mem˝y
(
mac
, &
od©a
[4], (mac));

969 i‡(
ﬁí
 <= 130)

970 
	`odh˝d_hexlify
(
duidbuf
, 
od©a
, 
ﬁí
);

971 } i‡(
Ÿy≥
 =
DHCPV6_OPT_FQDN
 && 
ﬁí
 >= 2 && olen <= 255) {

972 
uöt8_t
 
fqdn_buf
[256];

973 
	`mem˝y
(
fqdn_buf
, 
od©a
, 
ﬁí
);

974 
fqdn_buf
[
ﬁí
++] = 0;

976 i‡(
	`dn_ex∑nd
(&
fqdn_buf
[1], &fqdn_buf[
ﬁí
], &fqdn_buf[1], 
ho°«me
, (hostname)) > 0)

977 
ho°«me_Àn
 = 
	`°rc•n
(
ho°«me
, ".");

978 } i‡(
Ÿy≥
 =
DHCPV6_OPT_RECONF_ACCEPT
) {

979 
ac˚±_ªc⁄f
 = 
åue
;

983 i‡(!
˛id_d©a
 || !
˛id_Àn
 || clid_len > 130)

984 
out
;

986 
dh˝v6_assignmít
 *
fú°
 = 
NULL
;

987 
	`dh˝v6_f‹_óch_›ti⁄
(
°¨t
, 
íd
, 
Ÿy≥
, 
ﬁí
, 
od©a
) {

988 
boﬁ
 
is_pd
 = (
Ÿy≥
 =
DHCPV6_OPT_IA_PD
);

989 
boﬁ
 
is_«
 = (
Ÿy≥
 =
DHCPV6_OPT_IA_NA
);

990 
boﬁ
 
ü_addr_¥e£¡
 = 
Ál£
;

991 i‡(!
is_pd
 && !
is_«
)

994 
dh˝v6_ü_hdr
 *
ü
 = (dh˝v6_ü_hdr*)&
od©a
[-4];

995 
size_t
 
ü_ª•⁄£_Àn
 = 0;

996 
uöt8_t
 
ªqÀn
 = (
is_pd
) ? 62 : 128;

997 
uöt32_t
 
ªqhöt
 = 0;

1000 i‡(
is_pd
) {

1001 
uöt8_t
 *
sd©a
;

1002 
uöt16_t
 
°y≥
, 
¶í
;

1003 
	`dh˝v6_f‹_óch_›ti⁄
(&
ü
[1], 
od©a
 + 
ﬁí
, 
°y≥
, 
¶í
, 
sd©a
) {

1004 i‡(
°y≥
 !
DHCPV6_OPT_IA_PREFIX
 || 
¶í
 < (
dh˝v6_ü_¥efix
) - 4)

1007 
dh˝v6_ü_¥efix
 *
p
 = (dh˝v6_ü_¥efix*)&
sd©a
[-4];

1008 i‡(
p
->
¥efix
) {

1009 
ªqÀn
 = 
p
->
¥efix
;

1010 
ªqhöt
 = 
	`¡ohl
(
p
->
addr
.
s6_addr32
[1]);

1011 i‡(
ªqÀn
 > 32 &&Ñeqlen <= 64)

1012 
ªqhöt
 &(1U << (64 - 
ªqÀn
)) - 1;

1016 i‡(
ªqÀn
 > 64)

1017 
ªqÀn
 = 64;

1018 } i‡(
is_«
) {

1019 
uöt8_t
 *
sd©a
;

1020 
uöt16_t
 
°y≥
, 
¶í
;

1021 
	`dh˝v6_f‹_óch_›ti⁄
(&
ü
[1], 
od©a
 + 
ﬁí
, 
°y≥
, 
¶í
, 
sd©a
) {

1022 i‡(
°y≥
 !
DHCPV6_OPT_IA_ADDR
 || 
¶í
 < (
dh˝v6_ü_addr
) - 4)

1025 
ü_addr_¥e£¡
 = 
åue
;

1030 
dh˝v6_assignmít
 *
c
, *
a
 = 
NULL
;

1031 
	`li°_f‹_óch_íåy
(
c
, &
iÁ˚
->
ü_assignmíts
, 
hód
) {

1032 i‡(((
c
->
˛id_Àn
 =˛id_À¿&& !
	`memcmp
(c->
˛id_d©a
, clid_data, clid_len)) ||

1033 (
c
->
˛id_Àn
 >˛id_À¿&& !c->
˛id_d©a
[0] && !c->clid_data[1]

1034 && !
	`memcmp
(
c
->
mac
, mac, (mac)))) &&

1035 (
c
->
üid
 =
ü
->üid || c->
vÆid_u¡û
 < 
now
) &&

1036 ((
is_pd
 && 
c
->
Àngth
 <64Ë|| (
is_«
 && c->length == 128))) {

1037 
a
 = 
c
;

1040 
	`≠∂y_Àa£
(
iÁ˚
, 
a
, 
Ál£
);

1041 
	`mem˝y
(
a
->
˛id_d©a
, clid_d©a, 
˛id_Àn
);

1042 
a
->
˛id_Àn
 = clid_len;

1043 
a
->
üid
 = 
ü
->iaid;

1044 
a
->
≥î
 = *
addr
;

1045 
a
->
ªc⁄f_˙t
 = 0;

1046 
a
->
ªc⁄f_£¡
 = 0;

1052 
uöt16_t
 
°©us
 = 
DHCPV6_STATUS_OK
;

1053 i‡(
a
 &&á->
m™aged_size
 < 0) {

1055 } i‡(
hdr
->
msg_ty≥
 =
DHCPV6_MSG_SOLICIT
 || hdr->msg_ty≥ =
DHCPV6_MSG_REQUEST
) {

1056 
boﬁ
 
assig√d
 = !!
a
;

1058 i‡(!
a
 && !
iÁ˚
->
no_dy«mic_dh˝
) {

1059 
a
 = 
	`ˇŒoc
(1, (*aË+ 
˛id_Àn
);

1060 i‡(
a
) {

1061 
a
->
˛id_Àn
 = clid_len;

1062 
a
->
üid
 = 
ü
->iaid;

1063 
a
->
Àngth
 = 
ªqÀn
;

1064 
a
->
≥î
 = *
addr
;

1065 
a
->
assig√d
 = 
ªqhöt
;

1067 i‡(
fú°
)

1068 
	`mem˝y
(
a
->
key
, 
fú°
->key, (a->key));

1070 
	`odh˝d_uøndom
(
a
->
key
, (a->key));

1071 
	`mem˝y
(
a
->
˛id_d©a
, clid_d©a, 
˛id_Àn
);

1073 i‡(
is_pd
)

1074 !(
assig√d
 = 
	`assign_pd
(
iÁ˚
, 
a
)) &&

1075 !
a
->
m™aged_size
 && ++a->
Àngth
 <= 64);

1077 
assig√d
 = 
	`assign_«
(
iÁ˚
, 
a
);

1079 i‡(
a
->
m™aged_size
 && !
assig√d
)

1084 i‡(!
assig√d
 || 
iÁ˚
->
ü_addr_Àn
 == 0) {

1085 
°©us
 = (
is_pd
Ë? 
DHCPV6_STATUS_NOPREFIXAVAIL
 : 
DHCPV6_STATUS_NOADDRSAVAIL
;

1086 } i‡(
assig√d
 && !
fú°
) {

1087 
size_t
 
h™dshake_Àn
 = 4;

1088 
buf
[0] = 0;

1089 
buf
[1] = 
DHCPV6_OPT_RECONF_ACCEPT
;

1090 
buf
[2] = 0;

1091 
buf
[3] = 0;

1093 i‡(
hdr
->
msg_ty≥
 =
DHCPV6_MSG_REQUEST
) {

1094 
dh˝v6_auth_ªc⁄figuª
 
auth
 = {

1095 
	`ht⁄s
(
DHCPV6_OPT_AUTH
),

1096 
	`ht⁄s
((
auth
) - 4),

1098 {
	`ht⁄l
(
	`time
(
NULL
)), ht⁄l(++
£rül
)},

1102 
	`mem˝y
(
auth
.
key
, 
a
->key, (a->key));

1103 
	`mem˝y
(
buf
 + 
h™dshake_Àn
, &
auth
, (auth));

1104 
h™dshake_Àn
 +(
auth
);

1107 
buf
 +
h™dshake_Àn
;

1108 
buÊí
 -
h™dshake_Àn
;

1109 
ª•⁄£_Àn
 +
h™dshake_Àn
;

1111 
fú°
 = 
a
;

1114 
ü_ª•⁄£_Àn
 = 
	`≠≥nd_ª∂y
(
buf
, 
buÊí
, 
°©us
, 
ü
, 
a
, 
iÁ˚
, 
åue
);

1117 i‡(
assig√d
 && 
hdr
->
msg_ty≥
 =
DHCPV6_MSG_SOLICIT
) {

1118 
a
->
vÆid_u¡û
 = 0;

1119 } i‡(
assig√d
 && 
hdr
->
msg_ty≥
 =
DHCPV6_MSG_REQUEST
) {

1120 i‡(
ho°«me_Àn
 > 0) {

1121 
a
->
ho°«me
 = 
	`ªÆloc
◊->ho°«me, 
ho°«me_Àn
 + 1);

1122 i‡(
a
->
ho°«me
) {

1123 
	`mem˝y
(
a
->
ho°«me
, ho°«me, 
ho°«me_Àn
);

1124 
a
->
ho°«me
[
ho°«me_Àn
] = 0;

1127 
a
->
ac˚±_ªc⁄f
 =áccept_reconf;

1128 
	`≠∂y_Àa£
(
iÁ˚
, 
a
, 
åue
);

1129 } i‡(!
assig√d
 && 
a
 &&á->
m™aged_size
 == 0) {

1130 
	`‰ì_dh˝v6_assignmít
(
a
);

1132 } i‡(
hdr
->
msg_ty≥
 =
DHCPV6_MSG_RENEW
 ||

1133 
hdr
->
msg_ty≥
 =
DHCPV6_MSG_RELEASE
 ||

1134 
hdr
->
msg_ty≥
 =
DHCPV6_MSG_REBIND
 ||

1135 
hdr
->
msg_ty≥
 =
DHCPV6_MSG_DECLINE
) {

1136 i‡(!
a
 && 
hdr
->
msg_ty≥
 !
DHCPV6_MSG_REBIND
) {

1137 
°©us
 = 
DHCPV6_STATUS_NOBINDING
;

1138 
ü_ª•⁄£_Àn
 = 
	`≠≥nd_ª∂y
(
buf
, 
buÊí
, 
°©us
, 
ü
, 
a
, 
iÁ˚
, 
Ál£
);

1139 } i‡(
hdr
->
msg_ty≥
 =
DHCPV6_MSG_RENEW
 ||

1140 
hdr
->
msg_ty≥
 =
DHCPV6_MSG_REBIND
) {

1141 
ü_ª•⁄£_Àn
 = 
	`≠≥nd_ª∂y
(
buf
, 
buÊí
, 
°©us
, 
ü
, 
a
, 
iÁ˚
, 
Ál£
);

1142 i‡(
a
)

1143 
	`≠∂y_Àa£
(
iÁ˚
, 
a
, 
åue
);

1144 } i‡(
hdr
->
msg_ty≥
 =
DHCPV6_MSG_RELEASE
) {

1145 
a
->
vÆid_u¡û
 = 0;

1146 
	`≠∂y_Àa£
(
iÁ˚
, 
a
, 
Ál£
);

1147 } i‡(
hdr
->
msg_ty≥
 =
DHCPV6_MSG_DECLINE
 && 
a
->
Àngth
 == 128) {

1148 
a
->
˛id_Àn
 = 0;

1149 
a
->
vÆid_u¡û
 = 
now
 + 3600;

1151 } i‡(
hdr
->
msg_ty≥
 =
DHCPV6_MSG_CONFIRM
 && 
ü_addr_¥e£¡
) {

1153 
°©us
 = 
DHCPV6_STATUS_NOTONLINK
;

1154 
ü_ª•⁄£_Àn
 = 
	`≠≥nd_ª∂y
(
buf
, 
buÊí
, 
°©us
, 
ü
, 
a
, 
iÁ˚
, 
åue
);

1155 
nŸ⁄lök
 = 
åue
;

1158 
buf
 +
ü_ª•⁄£_Àn
;

1159 
buÊí
 -
ü_ª•⁄£_Àn
;

1160 
ª•⁄£_Àn
 +
ü_ª•⁄£_Àn
;

1161 
	`dh˝v6_log
(
hdr
->
msg_ty≥
, 
iÁ˚
, 
now
, 
duidbuf
, 
is_pd
, 
a
, 
°©us
);

1164 i‡((
hdr
->
msg_ty≥
 =
DHCPV6_MSG_RELEASE
 || hdr->msg_ty≥ =
DHCPV6_MSG_DECLINE
 || 
nŸ⁄lök
) &&

1165 
ª•⁄£_Àn
 + 6 < 
buÊí
) {

1166 
buf
[0] = 0;

1167 
buf
[1] = 
DHCPV6_OPT_STATUS
;

1168 
buf
[2] = 0;

1169 
buf
[3] = 2;

1170 
buf
[4] = 0;

1171 
buf
[5] = (
nŸ⁄lök
Ë? 
DHCPV6_STATUS_NOTONLINK
 : 
DHCPV6_STATUS_OK
;

1172 
ª•⁄£_Àn
 += 6;

1175 
	`dh˝v6_wrôe_°©efûe
();

1177 
out
:

1178  
ª•⁄£_Àn
;

1179 
	}
}

	@dhcpv6.c

16 
	~<î∫o.h
>

17 
	~<uni°d.h
>

18 
	~<°ddef.h
>

19 
	~<ªsﬁv.h
>

24 
	~"odh˝d.h
"

25 
	~"dh˝v6.h
"

28 
ªœy_˛õ¡_ªque°
(
sockaddr_ö6
 *
sour˚
,

29 c⁄° *
d©a
, 
size_t
 
Àn
, 
öãrÁ˚
 *
iÁ˚
);

30 
ªœy_£rvî_ª•⁄£
(
uöt8_t
 *
d©a
, 
size_t
 
Àn
);

32 
h™dÀ_dh˝v6
(*
addr
, *
d©a
, 
size_t
 
Àn
,

33 
öãrÁ˚
 *
iÁ˚
, *
de°
);

34 
h™dÀ_˛õ¡_ªque°
(*
addr
, *
d©a
, 
size_t
 
Àn
,

35 
öãrÁ˚
 *
iÁ˚
, *
de°_addr
);

40 
	$öô_dh˝v6
()

42 
	`dh˝v6_ü_öô
();

44 
	}
}

47 
	$£tup_dh˝v6_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
)

49 i‡(
iÁ˚
->
dh˝v6_evít
.
ulo›
.
fd
 > 0) {

50 
	`ulo›_fd_dñëe
(&
iÁ˚
->
dh˝v6_evít
.
ulo›
);

51 
	`˛o£
(
iÁ˚
->
dh˝v6_evít
.
ulo›
.
fd
);

52 
iÁ˚
->
dh˝v6_evít
.
ulo›
.
fd
 = -1;

56 i‡(
íabÀ
 && 
iÁ˚
->
dh˝v6
) {

57 
sock
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
 | 
SOCK_CLOEXEC
, 
IPPROTO_UDP
);

58 i‡(
sock
 < 0) {

59 
	`sy¶og
(
LOG_ERR
, "FailedÅo create DHCPv6 server socket: %s",

60 
	`°ªº‹
(
î∫o
));

65 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
iÁ˚
->
i‚ame
, 
	`°æí
(iface->ifname));

67 
vÆ
 = 1;

68 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
, &
vÆ
, (val));

69 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
vÆ
, (val));

70 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_RECVPKTINFO
, &
vÆ
, (val));

72 
vÆ
 = 
DHCPV6_HOP_COUNT_LIMIT
;

73 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_HOPS
, &
vÆ
, (val));

75 
vÆ
 = 0;

76 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_LOOP
, &
vÆ
, (val));

78 
sockaddr_ö6
 
böd_addr
 = {
AF_INET6
, 
	`ht⁄s
(
DHCPV6_SERVER_PORT
),

79 0, 
IN6ADDR_ANY_INIT
, 0};

81 i‡(
	`böd
(
sock
, (
sockaddr
*)&
böd_addr
, (bind_addr))) {

82 
	`sy¶og
(
LOG_ERR
, "FailedÅo open DHCPv6 server socket: %s",

83 
	`°ªº‹
(
î∫o
));

87 
ùv6_mªq
 
ªœy
 = {
ALL_DHCPV6_RELAYS
, 
iÁ˚
->
ifödex
};

88 
ùv6_mªq
 
£rvî
 = {
ALL_DHCPV6_SERVERS
, 
iÁ˚
->
ifödex
};

89 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_ADD_MEMBERSHIP
, &
ªœy
, (relay));

91 i‡(
iÁ˚
->
dh˝v6
 =
RELAYD_SERVER
)

92 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_ADD_MEMBERSHIP
, &
£rvî
, (server));

94 
iÁ˚
->
dh˝v6_evít
.
ulo›
.
fd
 = 
sock
;

95 
iÁ˚
->
dh˝v6_evít
.
h™dÀ_dgøm
 = 
h™dÀ_dh˝v6
;

96 
	`odh˝d_ªgi°î
(&
iÁ˚
->
dh˝v6_evít
);

99  
	`£tup_dh˝v6_ü_öãrÁ˚
(
iÁ˚
, 
íabÀ
);

100 
	}
}

103 
	mIOV_NESTED
 = 0,

104 
	mIOV_DEST
,

105 
	mIOV_MAXRT
,

106 
	#IOV_STAT
 
IOV_MAXRT


	)

107 
	mIOV_DNS
,

108 
	mIOV_DNS_ADDR
,

109 
	mIOV_SEARCH
,

110 
	mIOV_SEARCH_DOMAIN
,

111 
	mIOV_PDBUF
,

112 
	#IOV_REFRESH
 
IOV_PDBUF


	)

113 
	mIOV_CERID
,

114 
	mIOV_DHCPV6_RAW
,

115 
	mIOV_RELAY_MSG
,

116 
	mIOV_TOTAL


119 
h™dÀ_√°ed_mesßge
(
uöt8_t
 *
d©a
, 
size_t
 
Àn
,

120 
uöt8_t
 **
›ts
, uöt8_à**
íd
, 
iovec
 
iov
[
IOV_TOTAL
 - 1])

122 
dh˝v6_ªœy_hódî
 *
	ghdr
 = (dh˝v6_ªœy_hódî*)
d©a
;

123 i‡(
	giov
[
IOV_NESTED
].
	giov_ba£
 =
NULL
) {

124 
iov
[
IOV_NESTED
].
iov_ba£
 = 
d©a
;

125 
	giov
[
IOV_NESTED
].
	giov_Àn
 = 
Àn
;

128 i‡(
	gÀn
 < (
	gdh˝v6_˛õ¡_hódî
))

131 i‡(
	ghdr
->
	gmsg_ty≥
 !
DHCPV6_MSG_RELAY_FORW
) {

132 
iov
[
IOV_NESTED
].
iov_Àn
 = 
d©a
 - (
uöt8_t
*)iov[IOV_NESTED].
iov_ba£
;

133 
dh˝v6_˛õ¡_hódî
 *
	ghdr
 = (*)
d©a
;

134 *
	g›ts
 = (
uöt8_t
*)&
hdr
[1];

135 *
	gíd
 = 
d©a
 + 
Àn
;

139 
uöt16_t
 
	gŸy≥
, 
	gﬁí
;

140 
uöt8_t
 *
	god©a
;

141 
dh˝v6_f‹_óch_›ti⁄
(
hdr
->
›ti⁄s
, 
d©a
 + 
Àn
, 
Ÿy≥
, 
ﬁí
, 
od©a
) {

142 i‡(
	gŸy≥
 =
DHCPV6_OPT_RELAY_MSG
) {

143 
iov
[
IOV_RELAY_MSG
].
iov_ba£
 = 
od©a
 + 
ﬁí
;

144 
	giov
[
IOV_RELAY_MSG
].
	giov_Àn
 = (((
uöt8_t
*)
iov
[
IOV_NESTED
].
iov_ba£
) +

145 
iov
[
IOV_NESTED
].
iov_Àn
Ë- (
od©a
 + 
ﬁí
);

146 
h™dÀ_√°ed_mesßge
(
od©a
, 
ﬁí
, 
›ts
, 
íd
, 
iov
);

153 
	$upd©e_√°ed_mesßge
(
uöt8_t
 *
d©a
, 
size_t
 
Àn
, 
ssize_t
 
pdiff
)

155 
dh˝v6_ªœy_hódî
 *
hdr
 = (dh˝v6_ªœy_hódî*)
d©a
;

156 i‡(
hdr
->
msg_ty≥
 !
DHCPV6_MSG_RELAY_FORW
)

159 
hdr
->
msg_ty≥
 = 
DHCPV6_MSG_RELAY_REPL
;

161 
uöt16_t
 
Ÿy≥
, 
ﬁí
;

162 
uöt8_t
 *
od©a
;

163 
	`dh˝v6_f‹_óch_›ti⁄
(
hdr
->
›ti⁄s
, 
d©a
 + 
Àn
, 
Ÿy≥
, 
ﬁí
, 
od©a
) {

164 i‡(
Ÿy≥
 =
DHCPV6_OPT_RELAY_MSG
) {

165 
ﬁí
 +
pdiff
;

166 
od©a
[-2] = (
ﬁí
 >> 8) & 0xff;

167 
od©a
[-1] = 
ﬁí
 & 0xff;

168 
	`upd©e_√°ed_mesßge
(
od©a
, 
ﬁí
 - 
pdiff
,Ödiff);

172 
	}
}

175 
	$h™dÀ_˛õ¡_ªque°
(*
addr
, *
d©a
, 
size_t
 
Àn
,

176 
öãrÁ˚
 *
iÁ˚
, *
de°_addr
)

178 
dh˝v6_˛õ¡_hódî
 *
hdr
 = 
d©a
;

180 i‡(
Àn
 < (*
hdr
))

183 
	`sy¶og
(
LOG_NOTICE
, "Got DHCPv6Ñequest");

186 
	`__©åibuã__
((
∑cked
)) {

187 
uöt8_t
 
msg_ty≥
;

188 
uöt8_t
 
å_id
[3];

189 
uöt16_t
 
£rvîid_ty≥
;

190 
uöt16_t
 
£rvîid_Àngth
;

191 
uöt16_t
 
duid_ty≥
;

192 
uöt16_t
 
h¨dw¨e_ty≥
;

193 
uöt8_t
 
mac
[6];

194 
uöt16_t
 
˛õ¡id_ty≥
;

195 
uöt16_t
 
˛õ¡id_Àngth
;

196 
uöt8_t
 
˛õ¡id_buf
[130];

197 } 
de°
 = {

198 .
msg_ty≥
 = 
DHCPV6_MSG_REPLY
,

199 .
£rvîid_ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_SERVERID
),

200 .
£rvîid_Àngth
 = 
	`ht⁄s
(10),

201 .
duid_ty≥
 = 
	`ht⁄s
(3),

202 .
h¨dw¨e_ty≥
 = 
	`ht⁄s
(1),

203 .
˛õ¡id_ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_CLIENTID
),

204 .
˛õ¡id_buf
 = {0}

206 
	`odh˝d_gë_mac
(
iÁ˚
, 
de°
.
mac
);

208 
	`__©åibuã__
((
∑cked
)) {

209 
uöt16_t
 
ty≥
;

210 
uöt16_t
 
Àn
;

211 
uöt32_t
 
vÆue
;

212 } 
maxπ
 = {
	`ht⁄s
(
DHCPV6_OPT_SOL_MAX_RT
), htons((maxrt) - 4),

213 
	`ht⁄l
(60)};

215 
	`__©åibuã__
((
∑cked
)) {

216 
uöt16_t
 
ty≥
;

217 
uöt16_t
 
Àn
;

218 
uöt16_t
 
vÆue
;

219 } 
°©
 = {
	`ht⁄s
(
DHCPV6_OPT_STATUS
), htons((stat) - 4),

220 
	`ht⁄s
(
DHCPV6_STATUS_USEMULTICAST
)};

222 
	`__©åibuã__
((
∑cked
)) {

223 
uöt16_t
 
ty≥
;

224 
uöt16_t
 
Àn
;

225 
uöt32_t
 
vÆue
;

226 } 
ª‰esh
 = {
	`ht⁄s
(
DHCPV6_OPT_INFO_REFRESH
), ht⁄s((
uöt32_t
)),

227 
	`ht⁄l
(600)};

229 
ö6_addr
 
dns_addr
, *
dns_addr_±r
 = 
iÁ˚
->
dns
;

230 
size_t
 
dns_˙t
 = 
iÁ˚
->dns_cnt;

232 i‡((
dns_˙t
 == 0) &&

233 !
	`odh˝d_gë_lökloˇl_öãrÁ˚_addªss
(
iÁ˚
->
ifödex
, &
dns_addr
)) {

234 
dns_addr_±r
 = &
dns_addr
;

235 
dns_˙t
 = 1;

239 
uöt16_t
 
ty≥
;

240 
uöt16_t
 
Àn
;

241 } 
dns
 = {
	`ht⁄s
(
DHCPV6_OPT_DNS_SERVERS
), ht⁄s(
dns_˙t
 * (*
dns_addr_±r
))};

246 
uöt8_t
 
£¨ch_buf
[256], *
£¨ch_domaö
 = 
iÁ˚
->
£¨ch
;

247 
size_t
 
£¨ch_Àn
 = 
iÁ˚
->search_len;

249 i‡(!
£¨ch_domaö
 && !
	`ªs_öô
(Ë&& 
_ªs
.
dn§ch
[0] && _res.dnsrch[0][0]) {

250 
Àn
 = 
	`dn_comp
(
_ªs
.
dn§ch
[0], 
£¨ch_buf
,

251 (
£¨ch_buf
), 
NULL
, NULL);

252 i‡(
Àn
 > 0) {

253 
£¨ch_domaö
 = 
£¨ch_buf
;

254 
£¨ch_Àn
 = 
Àn
;

259 
uöt16_t
 
ty≥
;

260 
uöt16_t
 
Àn
;

261 } 
£¨ch
 = {
	`ht⁄s
(
DHCPV6_OPT_DNS_DOMAIN
), ht⁄s(
£¨ch_Àn
)};

264 
dh˝v6_˚r_id
 
˚rid
 = {

265 #ifde‡
EXT_CER_ID


266 .
ty≥
 = 
	`ht⁄s
(
EXT_CER_ID
),

268 .
Àn
 = 
	`ht⁄s
(36),

269 .
addr
 = 
iÁ˚
->
dh˝v6_pd_˚r
,

273 
uöt8_t
 
pdbuf
[512];

274 
iovec
 
iov
[
IOV_TOTAL
] = {

275 [
IOV_NESTED
] = {
NULL
, 0},

276 [
IOV_DEST
] = {&
de°
, (
uöt8_t
*)&de°.
˛õ¡id_ty≥
 - (uint8_t*)&dest},

277 [
IOV_MAXRT
] = {&
maxπ
, (maxrt)},

278 [
IOV_DNS
] = {&
dns
, (
dns_˙t
) ? (dns) : 0},

279 [
IOV_DNS_ADDR
] = {
dns_addr_±r
, 
dns_˙t
 * (*dns_addr_ptr)},

280 [
IOV_SEARCH
] = {&
£¨ch
, (
£¨ch_Àn
) ? (search) : 0},

281 [
IOV_SEARCH_DOMAIN
] = {
£¨ch_domaö
, 
£¨ch_Àn
},

282 [
IOV_PDBUF
] = {
pdbuf
, 0},

283 [
IOV_CERID
] = {&
˚rid
, 0},

284 [
IOV_DHCPV6_RAW
] = {
iÁ˚
->
dh˝v6_øw
, iÁ˚->
dh˝v6_øw_Àn
},

285 [
IOV_RELAY_MSG
] = {
NULL
, 0}

288 
uöt8_t
 *
›ts
 = (uöt8_t*)&
hdr
[1], *
›ts_íd
 = (uöt8_t*)
d©a
 + 
Àn
;

289 i‡(
hdr
->
msg_ty≥
 =
DHCPV6_MSG_RELAY_FORW
)

290 
	`h™dÀ_√°ed_mesßge
(
d©a
, 
Àn
, &
›ts
, &
›ts_íd
, 
iov
);

292 
	`mem˝y
(
de°
.
å_id
, &
›ts
[-3], (dest.tr_id));

294 i‡(
›ts
[-4] =
DHCPV6_MSG_ADVERTISE
 || o±s[-4] =
DHCPV6_MSG_REPLY
 || o±s[-4] =
DHCPV6_MSG_RELAY_REPL
)

297 i‡(!
	`IN6_IS_ADDR_MULTICAST
((
ö6_addr
 *)
de°_addr
Ë&& 
iov
[
IOV_NESTED
].
iov_Àn
 == 0 &&

298 (
›ts
[-4] =
DHCPV6_MSG_SOLICIT
 || o±s[-4] =
DHCPV6_MSG_CONFIRM
 ||

299 
›ts
[-4] =
DHCPV6_MSG_REBIND
 || o±s[-4] =
DHCPV6_MSG_INFORMATION_REQUEST
))

302 i‡(
›ts
[-4] =
DHCPV6_MSG_SOLICIT
) {

303 
de°
.
msg_ty≥
 = 
DHCPV6_MSG_ADVERTISE
;

304 } i‡(
›ts
[-4] =
DHCPV6_MSG_INFORMATION_REQUEST
) {

305 
iov
[
IOV_REFRESH
].
iov_ba£
 = &
ª‰esh
;

306 
iov
[
IOV_REFRESH
].
iov_Àn
 = (
ª‰esh
);

309 
maxπ
.
ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_INF_MAX_RT
);

313 
uöt16_t
 
Ÿy≥
, 
ﬁí
;

314 
uöt8_t
 *
od©a
;

315 
	`dh˝v6_f‹_óch_›ti⁄
(
›ts
, 
›ts_íd
, 
Ÿy≥
, 
ﬁí
, 
od©a
) {

316 i‡(
Ÿy≥
 =
DHCPV6_OPT_CLIENTID
 && 
ﬁí
 <= 130) {

317 
de°
.
˛õ¡id_Àngth
 = 
	`ht⁄s
(
ﬁí
);

318 
	`mem˝y
(
de°
.
˛õ¡id_buf
, 
od©a
, 
ﬁí
);

319 
iov
[
IOV_DEST
].
iov_Àn
 +4 + 
ﬁí
;

320 } i‡(
Ÿy≥
 =
DHCPV6_OPT_SERVERID
) {

321 i‡(
ﬁí
 !
	`¡ohs
(
de°
.
£rvîid_Àngth
) ||

322 
	`memcmp
(
od©a
, &
de°
.
duid_ty≥
, 
ﬁí
))

324 } i‡(
iÁ˚
->
fûãr_˛ass
 && 
Ÿy≥
 =
DHCPV6_OPT_USER_CLASS
) {

325 
uöt8_t
 *
c
 = 
od©a
, *
˚nd
 = &od©a[
ﬁí
];

326 ; &
c
[2] <
˚nd
 && &c[2 + (c[0] << 8) + c[1]] <= cend; c = &c[2 + (c[0] << 8) + c[1]]) {

327 
size_t
 
ñí
 = 
	`°æí
(
iÁ˚
->
fûãr_˛ass
);

328 i‡(((((
size_t
)
c
[0]Ë<< 8Ë| c[1]Ë=
ñí
 && !
	`memcmp
(&c[2], 
iÁ˚
->
fûãr_˛ass
,Élen))

331 } i‡(
Ÿy≥
 =
DHCPV6_OPT_IA_PD
) {

332 #ifde‡
EXT_CER_ID


333 
iov
[
IOV_CERID
].
iov_Àn
 = (
˚rid
);

335 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
˚rid
.
addr
)) {

336 
odh˝d_ùaddr
 
addrs
[32];

337 
ssize_t
 
Àn
 = 
	`odh˝d_gë_öãrÁ˚_addªs£s
(0, 
addrs
,

338 
	`ARRAY_SIZE
(
addrs
));

340 
ssize_t
 
i
 = 0; i < 
Àn
; ++i)

341 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
˚rid
.
addr
)

342 || 
	`memcmp
(&
addrs
[
i
].
addr
, &
˚rid
.addr, (cerid.addr)) < 0)

343 
˚rid
.
addr
 = 
addrs
[
i
].addr;

349 i‡(!
	`IN6_IS_ADDR_MULTICAST
((
ö6_addr
 *)
de°_addr
Ë&& 
iov
[
IOV_NESTED
].
iov_Àn
 == 0 &&

350 (
›ts
[-4] =
DHCPV6_MSG_REQUEST
 || o±s[-4] =
DHCPV6_MSG_RENEW
 ||

351 
›ts
[-4] =
DHCPV6_MSG_RELEASE
 || o±s[-4] =
DHCPV6_MSG_DECLINE
)) {

352 
iov
[
IOV_STAT
].
iov_ba£
 = &
°©
;

353 
iov
[
IOV_STAT
].
iov_Àn
 = (
°©
);

355 
ssize_t
 
i
 = 
IOV_STAT
 + 1; i < 
IOV_TOTAL
; ++i)

356 
iov
[
i
].
iov_Àn
 = 0;

358 
	`odh˝d_£nd
(
iÁ˚
->
dh˝v6_evít
.
ulo›
.
fd
, 
addr
, 
iov
, 
	`ARRAY_SIZE
(iov), iface);

362 i‡(
›ts
[-4] !
DHCPV6_MSG_INFORMATION_REQUEST
) {

363 
ssize_t
 
üÀn
 = 
	`dh˝v6_h™dÀ_ü
(
pdbuf
, ’dbuf), 
iÁ˚
, 
addr
, &
›ts
[-4], 
›ts_íd
);

364 
iov
[
IOV_PDBUF
].
iov_Àn
 = 
üÀn
;

365 i‡(
üÀn
 < 0 || (üÀ¿=0 && (
›ts
[-4] =
DHCPV6_MSG_REBIND
 || o±s[-4] =
DHCPV6_MSG_CONFIRM
)))

369 i‡(
iov
[
IOV_NESTED
].
iov_Àn
 > 0)

370 
	`upd©e_√°ed_mesßge
(
d©a
, 
Àn
, 
iov
[
IOV_DEST
].
iov_Àn
 + iov[
IOV_MAXRT
].iov_len +

371 
iov
[
IOV_DNS
].
iov_Àn
 + iov[
IOV_DNS_ADDR
].iov_len +

372 
iov
[
IOV_SEARCH
].
iov_Àn
 + iov[
IOV_SEARCH_DOMAIN
].iov_len +

373 
iov
[
IOV_PDBUF
].
iov_Àn
 + iov[
IOV_CERID
].iov_len +

374 
iov
[
IOV_DHCPV6_RAW
].
iov_Àn
 - (4 + 
›ts_íd
 - 
›ts
));

376 
	`odh˝d_£nd
(
iÁ˚
->
dh˝v6_evít
.
ulo›
.
fd
, 
addr
, 
iov
, 
	`ARRAY_SIZE
(iov), iface);

377 
	}
}

381 
	$h™dÀ_dh˝v6
(*
addr
, *
d©a
, 
size_t
 
Àn
,

382 
öãrÁ˚
 *
iÁ˚
, *
de°_addr
)

384 i‡(
iÁ˚
->
dh˝v6
 =
RELAYD_SERVER
) {

385 
	`h™dÀ_˛õ¡_ªque°
(
addr
, 
d©a
, 
Àn
, 
iÁ˚
, 
de°_addr
);

386 } i‡(
iÁ˚
->
dh˝v6
 =
RELAYD_RELAY
) {

387 i‡(
iÁ˚
->
ma°î
)

388 
	`ªœy_£rvî_ª•⁄£
(
d©a
, 
Àn
);

390 
	`ªœy_˛õ¡_ªque°
(
addr
, 
d©a
, 
Àn
, 
iÁ˚
);

392 
	}
}

396 
	$ªœy_£rvî_ª•⁄£
(
uöt8_t
 *
d©a
, 
size_t
 
Àn
)

399 
uöt8_t
 *
∑ylﬂd_d©a
 = 
NULL
;

400 
size_t
 
∑ylﬂd_Àn
 = 0;

401 
öt32_t
 
iÁ˚idx
 = 0;

402 
sockaddr_ö6
 
èrgë
 = {
AF_INET6
, 
	`ht⁄s
(
DHCPV6_CLIENT_PORT
),

403 0, 
IN6ADDR_ANY_INIT
, 0};

405 
	`sy¶og
(
LOG_NOTICE
, "Gotá DHCPv6-reply");

407 
Ÿy≥
, 
ﬁí
;

408 
uöt8_t
 *
od©a
, *
íd
 = 
d©a
 + 
Àn
;

411 
dh˝v6_ªœy_hódî
 *
h
 = (*)
d©a
;

412 i‡(
Àn
 < (*
h
Ë|| h->
msg_ty≥
 !
DHCPV6_MSG_RELAY_REPL
)

415 
	`mem˝y
(&
èrgë
.
sö6_addr
, &
h
->
≥î_addªss
,

416 (
ö6_addr
));

419 
	`dh˝v6_f‹_óch_›ti⁄
(
h
->
›ti⁄s
, 
íd
, 
Ÿy≥
, 
ﬁí
, 
od©a
) {

420 i‡(
Ÿy≥
 =
DHCPV6_OPT_INTERFACE_ID


421 && 
ﬁí
 =(
iÁ˚idx
)) {

422 
	`mem˝y
(&
iÁ˚idx
, 
od©a
, (ifaceidx));

423 } i‡(
Ÿy≥
 =
DHCPV6_OPT_RELAY_MSG
) {

424 
∑ylﬂd_d©a
 = 
od©a
;

425 
∑ylﬂd_Àn
 = 
ﬁí
;

430 
öãrÁ˚
 *
iÁ˚
 = 
	`odh˝d_gë_öãrÁ˚_by_ödex
(
iÁ˚idx
);

431 i‡(!
iÁ˚
 || iÁ˚->
ma°î
 || !
∑ylﬂd_d©a
 || 
∑ylﬂd_Àn
 < 4)

434 
boﬁ
 
is_authítiˇãd
 = 
Ál£
;

435 
ö6_addr
 *
dns_±r
 = 
NULL
;

436 
size_t
 
dns_cou¡
 = 0;

439 i‡(
∑ylﬂd_d©a
[0] =
DHCPV6_MSG_RELAY_REPL
) {

440 
èrgë
.
sö6_p‹t
 = 
	`ht⁄s
(
DHCPV6_SERVER_PORT
);

442 
dh˝v6_˛õ¡_hódî
 *
h
 = (*)
∑ylﬂd_d©a
;

443 
íd
 = 
∑ylﬂd_d©a
 + 
∑ylﬂd_Àn
;

445 
	`dh˝v6_f‹_óch_›ti⁄
(&
h
[1], 
íd
, 
Ÿy≥
, 
ﬁí
, 
od©a
) {

446 i‡(
Ÿy≥
 =
DHCPV6_OPT_DNS_SERVERS
 && 
ﬁí
 >= 16) {

447 
dns_±r
 = (
ö6_addr
*)
od©a
;

448 
dns_cou¡
 = 
ﬁí
 / 16;

449 } i‡(
Ÿy≥
 =
DHCPV6_OPT_AUTH
) {

450 
is_authítiˇãd
 = 
åue
;

456 i‡(
iÁ˚
->
Æways_ªwrôe_dns
 && 
dns_±r
 && 
dns_cou¡
 > 0) {

457 i‡(
is_authítiˇãd
)

460 c⁄° 
ö6_addr
 *
ªwrôe
 = 
iÁ˚
->
dns
;

461 
ö6_addr
 
addr
;

462 
size_t
 
ªwrôe_˙t
 = 
iÁ˚
->
dns_˙t
;

464 i‡(
ªwrôe_˙t
 == 0) {

465 i‡(
	`odh˝d_gë_lökloˇl_öãrÁ˚_addªss
(
iÁ˚
->
ifödex
, &
addr
))

468 
ªwrôe
 = &
addr
;

469 
ªwrôe_˙t
 = 1;

473 
size_t
 
i
 = 0; i < 
dns_cou¡
; ++i) {

474 
size_t
 
j
 = (
i
 < 
ªwrôe_˙t
) ? i :Ñewrite_cnt - 1;

475 
	`mem˝y
(&
dns_±r
[
i
], &
ªwrôe
[
j
], (*rewrite));

479 
iovec
 
iov
 = {
∑ylﬂd_d©a
, 
∑ylﬂd_Àn
};

480 
	`odh˝d_£nd
(
iÁ˚
->
dh˝v6_evít
.
ulo›
.
fd
, &
èrgë
, &
iov
, 1, iface);

481 
	}
}

485 
	$ªœy_˛õ¡_ªque°
(
sockaddr_ö6
 *
sour˚
,

486 c⁄° *
d©a
, 
size_t
 
Àn
, 
öãrÁ˚
 *
iÁ˚
)

488 
öãrÁ˚
 *
ma°î
 = 
	`odh˝d_gë_ma°î_öãrÁ˚
();

489 c⁄° 
dh˝v6_ªœy_hódî
 *
h
 = 
d©a
;

490 i‡(!
ma°î
 || ma°î->
dh˝v6
 !
RELAYD_RELAY
 ||

491 
h
->
msg_ty≥
 =
DHCPV6_MSG_RELAY_REPL
 ||

492 
h
->
msg_ty≥
 =
DHCPV6_MSG_RECONFIGURE
 ||

493 
h
->
msg_ty≥
 =
DHCPV6_MSG_REPLY
 ||

494 
h
->
msg_ty≥
 =
DHCPV6_MSG_ADVERTISE
)

497 
	`sy¶og
(
LOG_NOTICE
, "Gotá DHCPv6-request");

500 
dh˝v6_ªœy_f‹w¨d_ívñ›e
 
hdr
 = {

501 .
msg_ty≥
 = 
DHCPV6_MSG_RELAY_FORW
,

502 .
h›_cou¡
 = 0,

503 .
öãrÁ˚_id_ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_INTERFACE_ID
),

504 .
öãrÁ˚_id_Àn
 = 
	`ht⁄s
((
uöt32_t
)),

505 .
ªœy_mesßge_ty≥
 = 
	`ht⁄s
(
DHCPV6_OPT_RELAY_MSG
),

506 .
ªœy_mesßge_Àn
 = 
	`ht⁄s
(
Àn
),

509 i‡(
h
->
msg_ty≥
 =
DHCPV6_MSG_RELAY_FORW
) {

510 i‡(
h
->
h›_cou¡
 >
DHCPV6_HOP_COUNT_LIMIT
)

513 
hdr
.
h›_cou¡
 = 
h
->hop_count + 1;

517 
uöt32_t
 
ifödex
 = 
iÁ˚
->ifindex;

518 
	`mem˝y
(&
hdr
.
≥î_addªss
, &
sour˚
->
sö6_addr
, (
ö6_addr
));

519 
	`mem˝y
(&
hdr
.
öãrÁ˚_id_d©a
, &
ifödex
, (ifindex));

522 
odh˝d_ùaddr
 
ù
;

523 i‡(
	`odh˝d_gë_öãrÁ˚_addªs£s
(
iÁ˚
->
ifödex
, &
ù
, 1) < 1) {

529 i‡(
	`odh˝d_gë_öãrÁ˚_addªs£s
(
ma°î
->
ifödex
, &
ù
, 1) < 1)

532 
	`mem˝y
(&
hdr
.
lök_addªss
, &
ù
.
addr
, (hdr.link_address));

534 
sockaddr_ö6
 
dh˝v6_£rvîs
 = {
AF_INET6
,

535 
	`ht⁄s
(
DHCPV6_SERVER_PORT
), 0, 
ALL_DHCPV6_SERVERS
, 0};

536 
iovec
 
iov
[2] = {{&
hdr
, (hdr)}, {(*)
d©a
, 
Àn
}};

537 
	`odh˝d_£nd
(
ma°î
->
dh˝v6_evít
.
ulo›
.
fd
, &
dh˝v6_£rvîs
, 
iov
, 2, master);

538 
	}
}

	@dhcpv6.h

14 #¥agm®
⁄˚


17 
	~"u°ªam.h
"

18 
	~"odh˝d.h
"

20 
	#ALL_DHCPV6_RELAYS
 {{{0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\

21 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02}}}

	)

23 
	#ALL_DHCPV6_SERVERS
 {{{0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\

24 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03}}}

	)

26 
	#DHCPV6_CLIENT_PORT
 546

	)

27 
	#DHCPV6_SERVER_PORT
 547

	)

29 
	#DHCPV6_MSG_SOLICIT
 1

	)

30 
	#DHCPV6_MSG_ADVERTISE
 2

	)

31 
	#DHCPV6_MSG_REQUEST
 3

	)

32 
	#DHCPV6_MSG_CONFIRM
 4

	)

33 
	#DHCPV6_MSG_RENEW
 5

	)

34 
	#DHCPV6_MSG_REBIND
 6

	)

35 
	#DHCPV6_MSG_REPLY
 7

	)

36 
	#DHCPV6_MSG_RELEASE
 8

	)

37 
	#DHCPV6_MSG_DECLINE
 9

	)

38 
	#DHCPV6_MSG_RECONFIGURE
 10

	)

39 
	#DHCPV6_MSG_INFORMATION_REQUEST
 11

	)

40 
	#DHCPV6_MSG_RELAY_FORW
 12

	)

41 
	#DHCPV6_MSG_RELAY_REPL
 13

	)

43 
	#DHCPV6_OPT_CLIENTID
 1

	)

44 
	#DHCPV6_OPT_SERVERID
 2

	)

45 
	#DHCPV6_OPT_IA_NA
 3

	)

46 
	#DHCPV6_OPT_IA_ADDR
 5

	)

47 
	#DHCPV6_OPT_ORO
 6

	)

48 
	#DHCPV6_OPT_STATUS
 13

	)

49 
	#DHCPV6_OPT_RELAY_MSG
 9

	)

50 
	#DHCPV6_OPT_AUTH
 11

	)

51 
	#DHCPV6_OPT_USER_CLASS
 15

	)

52 
	#DHCPV6_OPT_INTERFACE_ID
 18

	)

53 
	#DHCPV6_OPT_RECONF_MSG
 19

	)

54 
	#DHCPV6_OPT_RECONF_ACCEPT
 20

	)

55 
	#DHCPV6_OPT_DNS_SERVERS
 23

	)

56 
	#DHCPV6_OPT_DNS_DOMAIN
 24

	)

57 
	#DHCPV6_OPT_IA_PD
 25

	)

58 
	#DHCPV6_OPT_IA_PREFIX
 26

	)

59 
	#DHCPV6_OPT_INFO_REFRESH
 32

	)

60 
	#DHCPV6_OPT_FQDN
 39

	)

61 
	#DHCPV6_OPT_SOL_MAX_RT
 82

	)

62 
	#DHCPV6_OPT_INF_MAX_RT
 83

	)

64 
	#DHCPV6_DUID_VENDOR
 2

	)

66 
	#DHCPV6_STATUS_OK
 0

	)

67 
	#DHCPV6_STATUS_NOADDRSAVAIL
 2

	)

68 
	#DHCPV6_STATUS_NOBINDING
 3

	)

69 
	#DHCPV6_STATUS_NOTONLINK
 4

	)

70 
	#DHCPV6_STATUS_USEMULTICAST
 5

	)

71 
	#DHCPV6_STATUS_NOPREFIXAVAIL
 6

	)

74 
	#DHCPV6_ENT_NO
 30462

	)

75 
	#DHCPV6_ENT_TYPE
 1

	)

78 
	#DHCPV6_HOP_COUNT_LIMIT
 32

	)

80 
	sdh˝v6_˛õ¡_hódî
 {

81 
uöt8_t
 
	mmsg_ty≥
;

82 
uöt8_t
 
	må™ß˘i⁄_id
[3];

83 } 
__©åibuã__
((
∑cked
));

85 
	sdh˝v6_ªœy_hódî
 {

86 
uöt8_t
 
	mmsg_ty≥
;

87 
uöt8_t
 
	mh›_cou¡
;

88 
ö6_addr
 
	mlök_addªss
;

89 
ö6_addr
 
	m≥î_addªss
;

90 
uöt8_t
 
	m›ti⁄s
[];

91 } 
__©åibuã__
((
∑cked
));

93 
	sdh˝v6_ªœy_f‹w¨d_ívñ›e
 {

94 
uöt8_t
 
	mmsg_ty≥
;

95 
uöt8_t
 
	mh›_cou¡
;

96 
ö6_addr
 
	mlök_addªss
;

97 
ö6_addr
 
	m≥î_addªss
;

98 
uöt16_t
 
	möãrÁ˚_id_ty≥
;

99 
uöt16_t
 
	möãrÁ˚_id_Àn
;

100 
uöt32_t
 
	möãrÁ˚_id_d©a
;

101 
uöt16_t
 
	mªœy_mesßge_ty≥
;

102 
uöt16_t
 
	mªœy_mesßge_Àn
;

103 } 
__©åibuã__
((
∑cked
));

105 
	sdh˝v6_auth_ªc⁄figuª
 {

106 
uöt16_t
 
	mty≥
;

107 
uöt16_t
 
	mÀn
;

108 
uöt8_t
 
	m¥Ÿocﬁ
;

109 
uöt8_t
 
	mÆg‹ôhm
;

110 
uöt8_t
 
	mrdm
;

111 
uöt32_t
 
	mª∂ay
[2];

112 
uöt8_t
 
	mªc⁄f_ty≥
;

113 
uöt8_t
 
	mkey
[16];

114 } 
	g_∑cked
;

116 
	sdh˝v6_ü_hdr
 {

117 
uöt16_t
 
	mty≥
;

118 
uöt16_t
 
	mÀn
;

119 
uöt32_t
 
	müid
;

120 
uöt32_t
 
	mt1
;

121 
uöt32_t
 
	mt2
;

122 } 
	g_∑cked
;

124 
	sdh˝v6_ü_¥efix
 {

125 
uöt16_t
 
	mty≥
;

126 
uöt16_t
 
	mÀn
;

127 
uöt32_t
 
	m¥e„ºed
;

128 
uöt32_t
 
	mvÆid
;

129 
uöt8_t
 
	m¥efix
;

130 
ö6_addr
 
	maddr
;

131 } 
	g_∑cked
;

133 
	sdh˝v6_ü_addr
 {

134 
uöt16_t
 
	mty≥
;

135 
uöt16_t
 
	mÀn
;

136 
ö6_addr
 
	maddr
;

137 
uöt32_t
 
	m¥e„ºed
;

138 
uöt32_t
 
	mvÆid
;

139 } 
	g_∑cked
;

141 
	sdh˝v6_assignmít
 {

142 
li°_hód
 
	mhód
;

143 
sockaddr_ö6
 
	m≥î
;

144 
time_t
 
	mvÆid_u¡û
;

145 
time_t
 
	mªc⁄f_£¡
;

146 
	mªc⁄f_˙t
;

147 *
	mho°«me
;

148 
uöt8_t
 
	mkey
[16];

149 
uöt32_t
 
	massig√d
;

150 
uöt32_t
 
	müid
;

151 
uöt8_t
 
	mmac
[6];

152 
uöt8_t
 
	mÀngth
;

153 
boﬁ
 
	mac˚±_ªc⁄f
;

155 
odh˝d_ùaddr
 *
	mm™aged
;

156 
ssize_t
 
	mm™aged_size
;

157 
u°ªam_fd
 
	mm™aged_sock
;

159 
uöt32_t
 
	mÀa£time
;

161 
uöt8_t
 
	m˛id_Àn
;

162 
uöt8_t
 
	m˛id_d©a
[];

165 
	sdh˝v6_˚r_id
 {

166 
uöt16_t
 
	mty≥
;

167 
uöt16_t
 
	mÀn
;

168 
uöt16_t
 
	mª£rved
;

169 
uöt16_t
 
	mauth_ty≥
;

170 
uöt8_t
 
	mauth
[16];

171 
ö6_addr
 
	maddr
;

176 
	#dh˝v6_f‹_óch_›ti⁄
(
°¨t
, 
íd
, 
Ÿy≥
, 
ﬁí
, 
od©a
)\

177 
uöt8_t
 *
_o
 = (uöt8_t*)(
°¨t
); _ÿ+ 4 <(
íd
) &&\

178 ((
Ÿy≥
Ë
_o
[0] << 8 | _o[1]Ë&& ((
od©a
) = (*)&_o[4]) &&\

179 ((
ﬁí
Ë
_o
[2] << 8 | _o[3]Ë+ (
od©a
Ë<(
íd
); \

180 
_o
 +4 + (_o[2] << 8 | _o[3]))

	)

182 
dh˝v6_öô_ü
(
öãrÁ˚
 *
iÁ˚
, 
sockë
);

183 
ssize_t
 
dh˝v6_h™dÀ_ü
(
uöt8_t
 *
buf
, 
size_t
 
buÊí
, 
öãrÁ˚
 *
iÁ˚
,

184 c⁄° 
sockaddr_ö6
 *
addr
, c⁄° *
d©a
, c⁄° 
uöt8_t
 *
íd
);

185 
dh˝v6_ü_öô
();

186 
£tup_dh˝v6_ü_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
);

187 
dh˝v6_wrôe_°©efûe
();

188 
dh˝v6_ü_¥eupd©e
(
öãrÁ˚
 *
iÁ˚
);

189 
dh˝v6_ü_po°upd©e
(
öãrÁ˚
 *
iÁ˚
, 
time_t
 
now
);

	@dn_comp.c

1 
	~<°rög.h
>

2 
	~<ªsﬁv.h
>

8 
	$gëoffs
(*
offs
, c⁄° *
ba£
, c⁄° *
s
)

10 
i
=0;

12 *
s
 & 0xc0) {

13 i‡((*
s
 & 0xc0) != 0xc0)  0;

14 
s
 = 
ba£
 + ((s[0]&0x3f)<<8 | s[1]);

16 i‡(!*
s
Ë 
i
;

17 i‡(
s
-
ba£
 >= 0x4000)  0;

18 
offs
[
i
++] = 
s
-
ba£
;

19 
s
 += *s + 1;

21 
	}
}

24 
	$gëÀns
(*
Àns
, c⁄° *
s
, 
l
)

26 
i
=0,
j
=0,
k
=0;

28 ; 
j
<
l
 && 
s
[j]!='.'; j++);

29 i‡(
j
-
k
-1u > 62)  0;

30 
Àns
[
i
++] = 
j
-
k
;

31 i‡(
j
==
l
Ë 
i
;

32 
k
 = ++
j
;

34 
	}
}

37 
	$m©ch
(*
off£t
, c⁄° *
ba£
, c⁄° *
dn
,

38 c⁄° *
íd
, c⁄° *
Àns
, 
∆í
)

40 
l
, 
o
, 
m
=0;

41 
offs
[128];

42 
noff
 = 
	`gëoffs
(
offs
, 
ba£
, 
dn
);

43 i‡(!
noff
)  0;

45 
l
 = 
Àns
[--
∆í
];

46 
o
 = 
offs
[--
noff
];

47 
íd
 -
l
;

48 i‡(
l
 !
ba£
[
o
] || 
	`memcmp
(ba£+o+1, 
íd
,Ü))

49  
m
;

50 *
off£t
 = 
o
;

51 
m
 +
l
;

52 i‡(
∆í
Ë
m
++;

53 i‡(!
∆í
 || !
noff
Ë 
m
;

54 
íd
--;

56 
	}
}

58 
	$__dn_comp
(c⁄° *
§c
, *
d°
, 
•a˚
, **
d≈ås
, **
œ°d≈å
)

60 
i
, 
j
, 
n
, 
m
=0, 
off£t
, 
be°Àn
=0, 
be°off
;

61 
Àns
[127];

62 **
p
;

63 c⁄° *
íd
;

64 
size_t
 
l
 = 
	`°∫Àn
(
§c
, 255);

65 i‡(
l
 && 
§c
[l-1] == '.')Ü--;

66 i‡(
l
>253 || 
•a˚
<=0)  -1;

67 i‡(!
l
) {

68 *
d°
 = 0;

71 
íd
 = 
§c
+
l
;

72 
n
 = 
	`gëÀns
(
Àns
, 
§c
, 
l
);

73 i‡(!
n
)  -1;

75 
p
 = 
d≈ås
;

76 i‡(
p
 && *p) p++; *p;Ö++) {

77 
m
 = 
	`m©ch
(&
off£t
, *
d≈ås
, *
p
, 
íd
, 
Àns
, 
n
);

78 i‡(
m
 > 
be°Àn
) {

79 
be°Àn
 = 
m
;

80 
be°off
 = 
off£t
;

81 i‡(
m
 =
l
)

87 i‡(
•a˚
 < 
l
-
be°Àn
+2+(bestlen-1 <Ü-1))  -1;

88 
	`mem˝y
(
d°
+1, 
§c
, 
l
-
be°Àn
);

89 
i
=
j
=0; i<
l
-
be°Àn
; i+=
Àns
[j++]+1)

90 
d°
[
i
] = 
Àns
[
j
];

93 i‡(
be°Àn
) {

94 
d°
[
i
++] = 0xc0 | 
be°off
>>8;

95 
d°
[
i
++] = 
be°off
;

97 
d°
[
i
++] = 0;

100 i‡(
i
>2 && 
œ°d≈å
 && 
d≈ås
 && *dnptrs) {

101 *
p
)Ö++;

102 i‡(
p
+1 < 
œ°d≈å
) {

103 *
p
++ = 
d°
;

104 *
p
=0;

107  
i
;

108 
	}
}

	@list.h

29 #i‚de‡
_LINUX_LIST_H_


30 
	#_LINUX_LIST_H_


	)

32 
	~<°ddef.h
>

33 
	~<°dboﬁ.h
>

35 
	#¥e„tch
(
x
)

	)

37 #i‚de‡
c⁄èöî_of


38 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

40 c⁄° 
	`ty≥of
(((
ty≥
 *Ë
NULL
)->
membî
Ë*
__m±r
 = (
±r
); \

41 (
ty≥
 *Ë((*Ë
__m±r
 - 
	`off£tof
—y≥, 
membî
)); \

42 })

	)

45 
	sli°_hód
 {

46 
li°_hód
 *
	m√xt
;

47 
li°_hód
 *
	m¥ev
;

50 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

51 #unde‡
LIST_HEAD


52 
	#LIST_HEAD
(
«me
Ë
li°_hód
Çamê
	`LIST_HEAD_INIT
“ame)

	)

54 
ölöe
 

55 
	$INIT_LIST_HEAD
(
li°_hód
 *
li°
)

57 
li°
->
√xt
 =Üi°->
¥ev
 =Üist;

58 
	}
}

60 
ölöe
 
boﬁ


61 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

63  (
hód
->
√xt
 == head);

64 
	}
}

66 
ölöe
 
boﬁ


67 
	$li°_is_fú°
(c⁄° 
li°_hód
 *
li°
,

68 c⁄° 
li°_hód
 *
hód
)

70  
li°
->
¥ev
 =
hód
;

71 
	}
}

73 
ölöe
 
boﬁ


74 
	$li°_is_œ°
(c⁄° 
li°_hód
 *
li°
,

75 c⁄° 
li°_hód
 *
hód
)

77  
li°
->
√xt
 =
hód
;

78 
	}
}

80 
ölöe
 

81 
	$_li°_dñ
(
li°_hód
 *
íåy
)

83 
íåy
->
√xt
->
¥ev
 =Éntry->prev;

84 
íåy
->
¥ev
->
√xt
 =Éntry->next;

85 
	}
}

87 
ölöe
 

88 
	$li°_dñ
(
li°_hód
 *
íåy
)

90 
	`_li°_dñ
(
íåy
);

91 
íåy
->
√xt
 =É¡ry->
¥ev
 = 
NULL
;

92 
	}
}

94 
ölöe
 

95 
	$_li°_add
(
li°_hód
 *
_√w
, li°_hód *
¥ev
,

96 
li°_hód
 *
√xt
)

99 
√xt
->
¥ev
 = 
_√w
;

100 
_√w
->
√xt
 =Çext;

101 
_√w
->
¥ev
 =Örev;

102 
¥ev
->
√xt
 = 
_√w
;

103 
	}
}

105 
ölöe
 

106 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

108 
	`_li°_dñ
(
íåy
);

109 
	`INIT_LIST_HEAD
(
íåy
);

110 
	}
}

112 
	#li°_íåy
(
±r
, 
ty≥
, 
fõld
Ë
	`c⁄èöî_of
’å,Åy≥, fõld)

	)

113 
	#li°_fú°_íåy
(
±r
, 
ty≥
, 
fõld
Ë
	`li°_íåy
(’å)->
√xt
,Åy≥, fõld)

	)

114 
	#li°_œ°_íåy
(
±r
, 
ty≥
, 
fõld
Ë
	`li°_íåy
(’å)->
¥ev
,Åy≥, fõld)

	)

116 
	#li°_f‹_óch
(
p
, 
hód
) \

117 
p
 = (
hód
)->
√xt
;Ö !(hód);Ö =Ö->√xt)

	)

119 
	#li°_f‹_óch_ß„
(
p
, 
n
, 
hód
) \

120 
p
 = (
hód
)->
√xt
, 
n
 =Ö->√xt;Ö !(hód);Ö =Ç,Ç =Ö->√xt)

	)

122 
	#li°_f‹_óch_íåy
(
p
, 
h
, 
fõld
) \

123 
p
 = 
	`li°_fú°_íåy
(
h
, 
	`ty≥of
(*p), 
fõld
); &p->field != (h); \

124 
p
 = 
	`li°_íåy
’->
fõld
.
√xt
, 
	`ty≥of
(*p), fõld))

	)

126 
	#li°_f‹_óch_íåy_ß„
(
p
, 
n
, 
h
, 
fõld
) \

127 
p
 = 
	`li°_fú°_íåy
(
h
, 
	`ty≥of
(*p), 
fõld
), \

128 
n
 = 
	`li°_íåy
(
p
->
fõld
.
√xt
, 
	`ty≥of
(*p), fõld); &p->fõld !(
h
);\

129 
p
 = 
n
,Ç = 
	`li°_íåy
“->
fõld
.
√xt
, 
	`ty≥of
(*n), fõld))

	)

131 
	#li°_f‹_óch_íåy_ªvî£
(
p
, 
h
, 
fõld
) \

132 
p
 = 
	`li°_œ°_íåy
(
h
, 
	`ty≥of
(*p), 
fõld
); &p->field != (h); \

133 
p
 = 
	`li°_íåy
’->
fõld
.
¥ev
, 
	`ty≥of
(*p), fõld))

	)

135 
	#li°_f‹_óch_¥ev
(
p
, 
h
Ë∞(h)->
¥ev
;Ö !(h);Ö =Ö->¥ev)

	)

136 
	#li°_f‹_óch_¥ev_ß„
(
p
, 
n
, 
h
Ë∞(h)->
¥ev
,Ç =Ö->¥ev;Ö !(h);Ö =Ç,Ç =Ö->¥ev)

	)

138 
ölöe
 

139 
	$li°_add
(
li°_hód
 *
_√w
, li°_hód *
hód
)

141 
	`_li°_add
(
_√w
, 
hód
, hód->
√xt
);

142 
	}
}

144 
ölöe
 

145 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
hód
)

147 
	`_li°_add
(
_√w
, 
hód
->
¥ev
, head);

148 
	}
}

150 
ölöe
 

151 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

153 
	`_li°_dñ
(
li°
);

154 
	`li°_add
(
li°
, 
hód
);

155 
	}
}

157 
ölöe
 

158 
	$li°_move_èû
(
li°_hód
 *
íåy
, li°_hód *
hód
)

160 
	`_li°_dñ
(
íåy
);

161 
	`li°_add_èû
(
íåy
, 
hód
);

162 
	}
}

164 
ölöe
 

165 
	$_li°_•li˚
(c⁄° 
li°_hód
 *
li°
, li°_hód *
¥ev
,

166 
li°_hód
 *
√xt
)

168 
li°_hód
 *
fú°
;

169 
li°_hód
 *
œ°
;

171 i‡(
	`li°_em±y
(
li°
))

174 
fú°
 = 
li°
->
√xt
;

175 
œ°
 = 
li°
->
¥ev
;

176 
fú°
->
¥ev
 =Örev;

177 
¥ev
->
√xt
 = 
fú°
;

178 
œ°
->
√xt
 =Çext;

179 
√xt
->
¥ev
 = 
œ°
;

180 
	}
}

182 
ölöe
 

183 
	$li°_•li˚
(c⁄° 
li°_hód
 *
li°
, li°_hód *
hód
)

185 
	`_li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

186 
	}
}

188 
ölöe
 

189 
	$li°_•li˚_èû
(
li°_hód
 *
li°
, li°_hód *
hód
)

191 
	`_li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

192 
	}
}

194 
ölöe
 

195 
	$li°_•li˚_öô
(
li°_hód
 *
li°
, li°_hód *
hód
)

197 
	`_li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

198 
	`INIT_LIST_HEAD
(
li°
);

199 
	}
}

201 
ölöe
 

202 
	$li°_•li˚_èû_öô
(
li°_hód
 *
li°
, li°_hód *
hód
)

204 
	`_li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

205 
	`INIT_LIST_HEAD
(
li°
);

206 
	}
}

	@md5.c

53 
	~<°rög.h
>

54 
	~<°dio.h
>

56 
	~"utûs.h
"

57 
	~"md5.h
"

66 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

67 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

68 
	#H
(
x
, 
y
, 
z
Ë(((xË^ (y)Ë^ (z))

	)

69 
	#H2
(
x
, 
y
, 
z
Ë((xË^ ((yË^ (z)))

	)

70 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

75 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

76 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

77 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

78 (
a
Ë+(
b
);

	)

84 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


85 
	#SET
(
n
) \

86 (*(
uöt32_t
 *)&
±r
[(
n
Ë* 4])

	)

87 
	#GET
(
n
) \

88 
	`SET
(
n
)

	)

90 
	#SET
(
n
) \

91 (
block
[(
n
)] = \

92 (
uöt32_t
)
±r
[(
n
) * 4] | \

93 ((
uöt32_t
)
±r
[(
n
) * 4 + 1] << 8) | \

94 ((
uöt32_t
)
±r
[(
n
) * 4 + 2] << 16) | \

95 ((
uöt32_t
)
±r
[(
n
Ë* 4 + 3] << 24))

	)

96 
	#GET
(
n
) \

97 (
block
[(
n
)])

	)

104 c⁄° *
	$body
(
md5_˘x_t
 *
˘x
, c⁄° *
d©a
, 
size
)

106 c⁄° *
±r
;

107 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

108 
uöt32_t
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

109 #i‡
__BYTE_ORDER
 !
__LITTLE_ENDIAN


110 
uöt32_t
 
block
[16];

113 
±r
 = (c⁄° *)
d©a
;

115 
a
 = 
˘x
->a;

116 
b
 = 
˘x
->b;

117 
c
 = 
˘x
->c;

118 
d
 = 
˘x
->d;

121 
ßved_a
 = 
a
;

122 
ßved_b
 = 
b
;

123 
ßved_c
 = 
c
;

124 
ßved_d
 = 
d
;

127 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7)

128 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12)

129 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17)

130 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22)

131 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7)

132 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12)

133 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17)

134 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22)

135 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7)

136 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12)

137 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17)

138 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22)

139 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7)

140 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12)

141 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17)

142 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22)

145 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5)

146 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9)

147 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14)

148 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20)

149 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5)

150 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9)

151 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14)

152 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20)

153 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5)

154 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9)

155 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14)

156 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20)

157 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5)

158 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9)

159 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14)

160 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20)

163 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4)

164 
	`STEP
(
H2
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11)

165 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16)

166 
	`STEP
(
H2
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23)

167 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4)

168 
	`STEP
(
H2
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11)

169 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16)

170 
	`STEP
(
H2
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23)

171 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4)

172 
	`STEP
(
H2
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11)

173 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16)

174 
	`STEP
(
H2
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23)

175 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4)

176 
	`STEP
(
H2
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11)

177 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16)

178 
	`STEP
(
H2
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23)

181 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6)

182 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10)

183 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15)

184 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21)

185 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6)

186 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10)

187 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15)

188 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21)

189 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6)

190 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10)

191 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15)

192 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21)

193 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6)

194 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10)

195 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15)

196 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21)

198 
a
 +
ßved_a
;

199 
b
 +
ßved_b
;

200 
c
 +
ßved_c
;

201 
d
 +
ßved_d
;

203 
±r
 += 64;

204 } 
size
 -= 64);

206 
˘x
->
a
 =á;

207 
˘x
->
b
 = b;

208 
˘x
->
c
 = c;

209 
˘x
->
d
 = d;

211  
±r
;

212 
	}
}

214 
	$md5_begö
(
md5_˘x_t
 *
˘x
)

216 
˘x
->
a
 = 0x67452301;

217 
˘x
->
b
 = 0xefcdab89;

218 
˘x
->
c
 = 0x98badcfe;

219 
˘x
->
d
 = 0x10325476;

221 
˘x
->
lo
 = 0;

222 
˘x
->
hi
 = 0;

223 
	}
}

225 
	$md5_hash
(c⁄° *
d©a
, 
size_t
 
size
, 
md5_˘x_t
 *
˘x
)

227 
uöt32_t
 
ßved_lo
;

228 
u£d
, 
avaûabÀ
;

230 
ßved_lo
 = 
˘x
->
lo
;

231 i‡((
˘x
->
lo
 = (
ßved_lo
 + 
size
) & 0x1fffffff) < saved_lo)

232 
˘x
->
hi
++;

233 
˘x
->
hi
 +
size
 >> 29;

235 
u£d
 = 
ßved_lo
 & 0x3f;

237 i‡(
u£d
) {

238 
avaûabÀ
 = 64 - 
u£d
;

240 i‡(
size
 < 
avaûabÀ
) {

241 
	`mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

245 
	`mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
avaûabÀ
);

246 
d©a
 = (c⁄° *)d©®+ 
avaûabÀ
;

247 
size
 -
avaûabÀ
;

248 
	`body
(
˘x
, ctx->
buf„r
, 64);

251 i‡(
size
 >= 64) {

252 
d©a
 = 
	`body
(
˘x
, d©a, 
size
 & ~((
size_t
) 0x3f));

253 
size
 &= 0x3f;

256 
	`mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

257 
	}
}

259 
	$md5_íd
(*
ªsbuf
, 
md5_˘x_t
 *
˘x
)

261 *
ªsu…
 = 
ªsbuf
;

262 
u£d
, 
avaûabÀ
;

264 
u£d
 = 
˘x
->
lo
 & 0x3f;

266 
˘x
->
buf„r
[
u£d
++] = 0x80;

268 
avaûabÀ
 = 64 - 
u£d
;

270 i‡(
avaûabÀ
 < 8) {

271 
	`mem£t
(&
˘x
->
buf„r
[
u£d
], 0, 
avaûabÀ
);

272 
	`body
(
˘x
, ctx->
buf„r
, 64);

273 
u£d
 = 0;

274 
avaûabÀ
 = 64;

277 
	`mem£t
(&
˘x
->
buf„r
[
u£d
], 0, 
avaûabÀ
 - 8);

279 
˘x
->
lo
 <<= 3;

280 
˘x
->
buf„r
[56] = ctx->
lo
;

281 
˘x
->
buf„r
[57] = ctx->
lo
 >> 8;

282 
˘x
->
buf„r
[58] = ctx->
lo
 >> 16;

283 
˘x
->
buf„r
[59] = ctx->
lo
 >> 24;

284 
˘x
->
buf„r
[60] = ctx->
hi
;

285 
˘x
->
buf„r
[61] = ctx->
hi
 >> 8;

286 
˘x
->
buf„r
[62] = ctx->
hi
 >> 16;

287 
˘x
->
buf„r
[63] = ctx->
hi
 >> 24;

289 
	`body
(
˘x
, ctx->
buf„r
, 64);

291 
ªsu…
[0] = 
˘x
->
a
;

292 
ªsu…
[1] = 
˘x
->
a
 >> 8;

293 
ªsu…
[2] = 
˘x
->
a
 >> 16;

294 
ªsu…
[3] = 
˘x
->
a
 >> 24;

295 
ªsu…
[4] = 
˘x
->
b
;

296 
ªsu…
[5] = 
˘x
->
b
 >> 8;

297 
ªsu…
[6] = 
˘x
->
b
 >> 16;

298 
ªsu…
[7] = 
˘x
->
b
 >> 24;

299 
ªsu…
[8] = 
˘x
->
c
;

300 
ªsu…
[9] = 
˘x
->
c
 >> 8;

301 
ªsu…
[10] = 
˘x
->
c
 >> 16;

302 
ªsu…
[11] = 
˘x
->
c
 >> 24;

303 
ªsu…
[12] = 
˘x
->
d
;

304 
ªsu…
[13] = 
˘x
->
d
 >> 8;

305 
ªsu…
[14] = 
˘x
->
d
 >> 16;

306 
ªsu…
[15] = 
˘x
->
d
 >> 24;

308 
	`mem£t
(
˘x
, 0, (*ctx));

309 
	}
}

311 
	$md5sum
(*
fûe
, *
md5_buf
)

313 
buf
[256];

314 
md5_˘x_t
 
˘x
;

315 
ªt
 = 0;

316 
FILE
 *
f
;

318 
f
 = 
	`f›í
(
fûe
, "r");

319 i‡(!
f
)

322 
	`md5_begö
(&
˘x
);

324 
Àn
 = 
	`‰ód
(
buf
, 1, (buf), 
f
);

325 i‡(!
Àn
)

328 
	`md5_hash
(
buf
, 
Àn
, &
˘x
);

329 
ªt
 +
Àn
;

332 
	`md5_íd
(
md5_buf
, &
˘x
);

333 
	`f˛o£
(
f
);

335  
ªt
;

336 
	}
}

	@md5.h

41 #i‚de‡
_LIBUBOX_MD5_H


42 
	#_LIBUBOX_MD5_H


	)

44 
	~<°döt.h
>

45 
	~<°ddef.h
>

47 
	smd5_˘x
 {

48 
uöt32_t
 
	mlo
, 
	mhi
;

49 
uöt32_t
 
	ma
, 
	mb
, 
	mc
, 
	md
;

50 
	mbuf„r
[64];

51 } 
	tmd5_˘x_t
;

53 
md5_begö
(
md5_˘x_t
 *
˘x
);

54 
md5_hash
(c⁄° *
d©a
, 
size_t
 
Àngth
, 
md5_˘x_t
 *
˘x
);

55 
md5_íd
(*
ªsbuf
, 
md5_˘x_t
 *
˘x
);

56 
md5sum
(*
fûe
, *
md5_buf
);

	@ndp.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<sig«l.h
>

18 
	~<î∫o.h
>

20 
	~<f˙é.h
>

21 
	~<uni°d.h
>

22 
	~<¨∑/öë.h
>

23 
	~<sys/sockë.h
>

24 
	~<√t/ëhî√t.h
>

25 
	~<√töë/ù6.h
>

26 
	~<√töë/icmp6.h
>

27 
	~<√çackë/∑ckë.h
>

29 
	~<löux/π√éök.h
>

30 
	~<löux/fûãr.h
>

31 
	~"rouãr.h
"

32 
	~"dh˝v6.h
"

33 
	~"ndp.h
"

37 
h™dÀ_sﬁicô
(*
addr
, *
d©a
, 
size_t
 
Àn
,

38 
öãrÁ˚
 *
iÁ˚
, *
de°
);

39 
h™dÀ_π√éök
(*
addr
, *
d©a
, 
size_t
 
Àn
,

40 
öãrÁ˚
 *
iÁ˚
, *
de°
);

41 
ˇtch_π√éök
(
îr‹
);

43 
uöt32_t
 
	gπ∆_£qid
 = 0;

44 
	gpög_sockë
 = -1;

45 
odh˝d_evít
 
	gπ∆_evít
 = {{.
fd
 = -1}, 
	gh™dÀ_π√éök
, 
	gˇtch_π√éök
};

49 
sock_fûãr
 
	gbpf
[] = {

50 
BPF_STMT
(
BPF_LD
 | 
BPF_B
 | 
BPF_ABS
, 
off£tof
(
ù6_hdr
, 
ù6_nxt
)),

51 
BPF_JUMP
(
BPF_JMP
 | 
BPF_JEQ
 | 
BPF_K
, 
IPPROTO_ICMPV6
, 0, 3),

52 
BPF_STMT
(
BPF_LD
 | 
BPF_B
 | 
BPF_ABS
, (
ù6_hdr
) +

53 
off£tof
(
icmp6_hdr
, 
icmp6_ty≥
)),

54 
BPF_JUMP
(
BPF_JMP
 | 
BPF_JEQ
 | 
BPF_K
, 
ND_NEIGHBOR_SOLICIT
, 0, 1),

55 
BPF_STMT
(
BPF_RET
 | 
BPF_K
, 0xffffffff),

56 
BPF_STMT
(
BPF_RET
 | 
BPF_K
, 0),

58 c⁄° 
sock_Ârog
 
	gbpf_¥og
 = {(
bpf
) / (*bpf), bpf};

62 
	$öô_ndp
()

64 
vÆ
 = 256 * 1024;

67 i‡((
π∆_evít
.
ulo›
.
fd
 = 
	`odh˝d_›í_π∆
()) < 0)

70 i‡(
	`£tsock›t
(
π∆_evít
.
ulo›
.
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
vÆ
, (val)))

71 
	`£tsock›t
(
π∆_evít
.
ulo›
.
fd
, 
SOL_SOCKET
, 
SO_RCVBUFFORCE
, &
vÆ
, (val));

74 
uöt32_t
 
group
 = 
RTNLGRP_IPV6_IFADDR
;

75 
	`£tsock›t
(
π∆_evít
.
ulo›
.
fd
, 
SOL_NETLINK
,

76 
NETLINK_ADD_MEMBERSHIP
, &
group
, (group));

77 
group
 = 
RTNLGRP_IPV6_ROUTE
;

78 
	`£tsock›t
(
π∆_evít
.
ulo›
.
fd
, 
SOL_NETLINK
,

79 
NETLINK_ADD_MEMBERSHIP
, &
group
, (group));

81 
	`odh˝d_ªgi°î
(&
π∆_evít
);

84 
pög_sockë
 = 
	`sockë
(
AF_INET6
, 
SOCK_RAW
 | 
SOCK_CLOEXEC
, 
IPPROTO_ICMPV6
);

85 i‡(
pög_sockë
 < 0) {

86 
	`sy¶og
(
LOG_ERR
, "U«bÀÅÿ›íÑaw sockë: %s", 
	`°ªº‹
(
î∫o
));

90 
vÆ
 = 2;

91 
	`£tsock›t
(
pög_sockë
, 
IPPROTO_RAW
, 
IPV6_CHECKSUM
, &
vÆ
, (val));

94 
vÆ
 = 255;

95 
	`£tsock›t
(
pög_sockë
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_HOPS
, &
vÆ
, (val));

96 
	`£tsock›t
(
pög_sockë
, 
IPPROTO_IPV6
, 
IPV6_UNICAST_HOPS
, &
vÆ
, (val));

99 
icmp6_fûãr
 
fût
;

100 
	`ICMP6_FILTER_SETBLOCKALL
(&
fût
);

101 
	`£tsock›t
(
pög_sockë
, 
IPPROTO_ICMPV6
, 
ICMP6_FILTER
, &
fût
, (filt));

105 
group
 = 
RTNLGRP_NEIGH
;

106 
	`£tsock›t
(
π∆_evít
.
ulo›
.
fd
, 
SOL_NETLINK
, 
NETLINK_ADD_MEMBERSHIP
, &
group
, (group));

109 
	}
}

112 
	$dump_√igh_èbÀ
(
boﬁ
 
¥oxy
)

115 
∆msghdr
 
nh
;

116 
ndmsg
 
ndm
;

117 } 
ªq
 = {

118 {(
ªq
), 
RTM_GETNEIGH
, 
NLM_F_REQUEST
 | 
NLM_F_DUMP
,

119 ++
π∆_£qid
, 0},

120 {.
ndm_Ámûy
 = 
AF_INET6
, .
ndm_Êags
 = (
¥oxy
Ë? 
NTF_PROXY
 : 0}

122 
	`£nd
(
π∆_evít
.
ulo›
.
fd
, &
ªq
, ‘eq), 
MSG_DONTWAIT
);

123 
	`odh˝d_¥o˚ss
(&
π∆_evít
);

124 
	}
}

127 
	$£tup_ndp_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
)

129 
¥ocbuf
[64];

130 
	`¢¥ötf
(
¥ocbuf
, ’rocbuf), "/¥oc/sys/√t/ùv6/c⁄f/%s/¥oxy_ndp", 
iÁ˚
->
i‚ame
);

131 
¥ocfd
 = 
	`›í
(
¥ocbuf
, 
O_WRONLY
);

132 
boﬁ
 
dump_√igh
 = 
Ál£
;

134 i‡(
iÁ˚
->
ndp_evít
.
ulo›
.
fd
 > 0) {

135 
	`ulo›_fd_dñëe
(&
iÁ˚
->
ndp_evít
.
ulo›
);

136 
	`˛o£
(
iÁ˚
->
ndp_evít
.
ulo›
.
fd
);

137 
iÁ˚
->
ndp_evít
.
ulo›
.
fd
 = -1;

139 i‡(!
íabÀ
 || 
iÁ˚
->
ndp
 !
RELAYD_RELAY
)

140 i‡(
	`wrôe
(
¥ocfd
, "0\n", 2) < 0) {}

142 
dump_√igh
 = 
åue
;

145 i‡(
íabÀ
 && (
iÁ˚
->
ø
 =
RELAYD_SERVER
 ||

146 
iÁ˚
->
dh˝v6
 =
RELAYD_SERVER
 || iÁ˚->
ndp
 =
RELAYD_RELAY
)) {

149 
∆msghdr
 
nh
;

150 
iÁddrmsg
 
iÁ
;

151 } 
ªq2
 = {

152 {(
ªq2
), 
RTM_GETADDR
, 
NLM_F_REQUEST
 | 
NLM_F_DUMP
,

153 ++
π∆_£qid
, 0},

154 {.
iÁ_Ámûy
 = 
AF_INET6
, .
iÁ_ödex
 = 
iÁ˚
->
ifödex
}

156 
	`£nd
(
π∆_evít
.
ulo›
.
fd
, &
ªq2
, ‘eq2), 
MSG_DONTWAIT
);

159 i‡(
íabÀ
 && 
iÁ˚
->
ndp
 =
RELAYD_RELAY
) {

160 i‡(
	`wrôe
(
¥ocfd
, "1\n", 2) < 0) {}

161 
	`˛o£
(
¥ocfd
);

163 
sock
 = 
	`sockë
(
AF_PACKET
, 
SOCK_DGRAM
 | 
SOCK_CLOEXEC
, 
	`ht⁄s
(
ETH_P_IPV6
));

164 i‡(
sock
 < 0) {

165 
	`sy¶og
(
LOG_ERR
, "UnableÅo openÖacket socket: %s",

166 
	`°ªº‹
(
î∫o
));

170 #ifde‡
PACKET_RECV_TYPE


171 
pkâ
 = 1 << 
PACKET_MULTICAST
;

172 
	`£tsock›t
(
sock
, 
SOL_PACKET
, 
PACKET_RECV_TYPE
, &
pkâ
, (pktt));

175 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_ATTACH_FILTER
,

176 &
bpf_¥og
, (bpf_prog))) {

177 
	`sy¶og
(
LOG_ERR
, "FaûedÅÿ£àBPF: %s", 
	`°ªº‹
(
î∫o
));

181 
sockaddr_Œ
 
Œ
 = {

182 .
¶l_Ámûy
 = 
AF_PACKET
,

183 .
¶l_ifödex
 = 
iÁ˚
->
ifödex
,

184 .
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IPV6
),

185 .
¶l_h©y≥
 = 0,

186 .
¶l_pkây≥
 = 0,

187 .
¶l_hÆí
 = 0,

188 .
¶l_addr
 = {0},

190 
	`böd
(
sock
, (
sockaddr
*)&
Œ
, (ll));

192 
∑ckë_mªq
 
mªq
 = {
iÁ˚
->
ifödex
, 
PACKET_MR_ALLMULTI
, 
ETH_ALEN
, {0}};

193 
	`£tsock›t
(
sock
, 
SOL_PACKET
, 
PACKET_ADD_MEMBERSHIP
, &
mªq
, (mreq));

195 
iÁ˚
->
ndp_evít
.
ulo›
.
fd
 = 
sock
;

196 
iÁ˚
->
ndp_evít
.
h™dÀ_dgøm
 = 
h™dÀ_sﬁicô
;

197 
	`odh˝d_ªgi°î
(&
iÁ˚
->
ndp_evít
);

200 i‡(!
dump_√igh
)

201 
	`dump_√igh_èbÀ
(
Ál£
);

203 
dump_√igh
 = 
Ál£
;

205 
	`˛o£
(
¥ocfd
);

208 i‡(
dump_√igh
)

209 
	`dump_√igh_èbÀ
(
åue
);

212 
	}
}

217 
	$pög6
(
ö6_addr
 *
addr
,

218 c⁄° 
öãrÁ˚
 *
iÁ˚
)

220 
sockaddr_ö6
 
de°
 = {
AF_INET6
, 0, 0, *
addr
, 
iÁ˚
->
ifödex
};

221 
icmp6_hdr
 
echo
 = {.
icmp6_ty≥
 = 
ICMP6_ECHO_REQUEST
};

222 
iovec
 
iov
 = {&
echo
, (echo)};

224 
	`odh˝d_£tup_rouã
(
addr
, 128, 
iÁ˚
, 
NULL
, 128, 
åue
);

225 
	`odh˝d_£nd
(
pög_sockë
, &
de°
, &
iov
, 1, 
iÁ˚
);

226 
	`odh˝d_£tup_rouã
(
addr
, 128, 
iÁ˚
, 
NULL
, 128, 
Ál£
);

227 
	}
}

231 
	$h™dÀ_sﬁicô
(*
addr
, *
d©a
, 
size_t
 
Àn
,

232 
öãrÁ˚
 *
iÁ˚
, 
_unu£d
 *
de°
)

234 
ù6_hdr
 *
ù6
 = 
d©a
;

235 
nd_√ighb‹_sﬁicô
 *
ªq
 = (nd_√ighb‹_sﬁicô*)&
ù6
[1];

236 
sockaddr_Œ
 *
Œ
 = 
addr
;

239 
boﬁ
 
ns_is_dad
 = 
	`IN6_IS_ADDR_UNSPECIFIED
(&
ù6
->
ù6_§c
);

243 i‡(
iÁ˚
->
exã∫Æ
 && !
ns_is_dad
)

246 i‡(
Àn
 < (*
ù6
Ë+ (*
ªq
))

249 i‡(
	`IN6_IS_ADDR_LINKLOCAL
(&
ªq
->
nd_ns_èrgë
) ||

250 
	`IN6_IS_ADDR_LOOPBACK
(&
ªq
->
nd_ns_èrgë
) ||

251 
	`IN6_IS_ADDR_MULTICAST
(&
ªq
->
nd_ns_èrgë
))

254 
ùbuf
[
INET6_ADDRSTRLEN
];

255 
	`öë_¡›
(
AF_INET6
, &
ªq
->
nd_ns_èrgë
, 
ùbuf
, (ipbuf));

256 
	`sy¶og
(
LOG_DEBUG
, "GŸá NS f‹ %s", 
ùbuf
);

258 
uöt8_t
 
mac
[6];

259 
	`odh˝d_gë_mac
(
iÁ˚
, 
mac
);

260 i‡(!
	`memcmp
(
Œ
->
¶l_addr
, 
mac
, (mac)))

263 
öãrÁ˚
 *
c
;

264 
	`li°_f‹_óch_íåy
(
c
, &
öãrÁ˚s
, 
hód
)

265 i‡(
iÁ˚
->
ndp
 =
RELAYD_RELAY
 && iÁ˚ !
c
 &&

266 (
ns_is_dad
 || !
c
->
exã∫Æ
))

267 
	`pög6
(&
ªq
->
nd_ns_èrgë
, 
c
);

268 
	}
}

271 
	$£tup_rouã
(
ö6_addr
 *
addr
, 
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
add
)

273 
«mebuf
[
INET6_ADDRSTRLEN
];

274 
	`öë_¡›
(
AF_INET6
, 
addr
, 
«mebuf
, (namebuf));

275 
	`sy¶og
(
LOG_NOTICE
, "%sábout %s on %s",

276 (
add
Ë? "Ló∫ed" : "F‹gŸ", 
«mebuf
, 
iÁ˚
->
i‚ame
);

278 i‡(
iÁ˚
->
À¨n_rouãs
)

279 
	`odh˝d_£tup_rouã
(
addr
, 128, 
iÁ˚
, 
NULL
, 1024, 
add
);

280 
	}
}

283 
	$¥efixcmp
(c⁄° *
va
, c⁄° *
vb
)

285 c⁄° 
odh˝d_ùaddr
 *
a
 = 
va
, *
b
 = 
vb
;

286 
uöt32_t
 
a_¥ef
 = ((
a
->
addr
.
s6_addr
[0] & 0x„Ë!0xfcË?á->
¥e„ºed
 : 1;

287 
uöt32_t
 
b_¥ef
 = ((
b
->
addr
.
s6_addr
[0] & 0x„Ë!0xfcË? b->
¥e„ºed
 : 1;

288  (
a_¥ef
 < 
b_¥ef
) ? 1 : (a_pref > b_pref) ? -1 : 0;

289 
	}
}

292 
	$check_upd©es
(
öãrÁ˚
 *
iÁ˚
)

294 
odh˝d_ùaddr
 
addr
[8] = {{
IN6ADDR_ANY_INIT
, 0, 0, 0, 0}};

295 
time_t
 
now
 = 
	`odh˝d_time
();

296 
ssize_t
 
Àn
 = 
	`odh˝d_gë_öãrÁ˚_addªs£s
(
iÁ˚
->
ifödex
, 
addr
, 8);

298 i‡(
Àn
 < 0)

301 
	`qs‹t
(
addr
, 
Àn
, (*addr), 
¥efixcmp
);

303 
i
 = 0; i < 
Àn
; ++i) {

304 
addr
[
i
].addr.
s6_addr32
[3] = 0;

306 i‡(
addr
[
i
].
¥e„ºed
 < 
UINT32_MAX
 - 
now
)

307 
addr
[
i
].
¥e„ºed
 +
now
;

309 i‡(
addr
[
i
].
vÆid
 < 
UINT32_MAX
 - 
now
)

310 
addr
[
i
].
vÆid
 +
now
;

313 
boﬁ
 
ch™ge
 = 
Àn
 !(
ssize_t
)
iÁ˚
->
ü_addr_Àn
;

314 
ssize_t
 
i
 = 0; !
ch™ge
 && i < 
Àn
; ++i)

315 i‡(!
	`IN6_ARE_ADDR_EQUAL
(&
addr
[
i
].addr, &
iÁ˚
->
ü_addr
[i].addr) ||

316 (
addr
[
i
].
¥e„ºed
 > 0Ë!(
iÁ˚
->
ü_addr
[i].preferred > 0) ||

317 
addr
[
i
].
vÆid
 < 
iÁ˚
->
ü_addr
[i].valid ||

318 
addr
[
i
].
¥e„ºed
 < 
iÁ˚
->
ü_addr
[i].preferred)

319 
ch™ge
 = 
åue
;

321 i‡(
ch™ge
)

322 
	`dh˝v6_ü_¥eupd©e
(
iÁ˚
);

324 
	`mem˝y
(
iÁ˚
->
ü_addr
, 
addr
, 
Àn
 * (*addr));

325 
iÁ˚
->
ü_addr_Àn
 = 
Àn
;

327 i‡(
ch™ge
)

328 
	`dh˝v6_ü_po°upd©e
(
iÁ˚
, 
now
);

330 i‡(
ch™ge
)

331 
	`øi£
(
SIGUSR1
);

332 
	}
}

337 
	$h™dÀ_π√éök
(
_unu£d
 *
addr
, *
d©a
, 
size_t
 
Àn
,

338 
_unu£d
 
öãrÁ˚
 *
iÁ˚
, _unu£d *
de°
)

340 
boﬁ
 
dump_√igh
 = 
Ál£
;

341 
ö6_addr
 
œ°_sﬁicôed
 = 
IN6ADDR_ANY_INIT
;

343 
∆msghdr
 *
nh
 = 
d©a
; 
	`NLMSG_OK
“h, 
Àn
);

344 
nh
 = 
	`NLMSG_NEXT
“h, 
Àn
)) {

345 
ndmsg
 *
ndm
 = 
	`NLMSG_DATA
(
nh
);

346 
πmsg
 *
πm
 = 
	`NLMSG_DATA
(
nh
);

348 
boﬁ
 
is_addr
 = (
nh
->
∆msg_ty≥
 =
RTM_NEWADDR


349 || 
nh
->
∆msg_ty≥
 =
RTM_DELADDR
);

350 
boﬁ
 
is_rouã
 = (
nh
->
∆msg_ty≥
 =
RTM_NEWROUTE


351 || 
nh
->
∆msg_ty≥
 =
RTM_DELROUTE
);

352 
boﬁ
 
is_√igh
 = (
nh
->
∆msg_ty≥
 =
RTM_NEWNEIGH


353 || 
nh
->
∆msg_ty≥
 =
RTM_DELNEIGH
);

356 i‡((!
is_addr
 && !
is_rouã
 && !
is_√igh
)

357 || 
	`NLMSG_PAYLOAD
(
nh
, 0Ë< (*
ndm
)

358 || 
ndm
->
ndm_Ámûy
 !
AF_INET6
)

362 i‡(
is_rouã
 && 
πm
->
πm_d°_Àn
 == 0)

363 
	`øi£
(
SIGUSR1
);

364 i‡(
is_rouã
)

368 
size_t
 
πa_off£t
 = (
is_addr
Ë? (
iÁddrmsg
Ë: (*
ndm
);

369 
uöt16_t
 
©y≥
 = (
is_addr
Ë? 
IFA_ADDRESS
 : 
NDA_DST
;

370 
ssize_t
 
Æí
 = 
	`NLMSG_PAYLOAD
(
nh
, 
πa_off£t
);

371 
ö6_addr
 *
addr
 = 
NULL
;

373 
π©å
 *
πa
 = (*)(((
uöt8_t
*)
ndm
Ë+ 
πa_off£t
);

374 
	`RTA_OK
(
πa
, 
Æí
);Ñè = 
	`RTA_NEXT
(rta,álen)) {

375 i‡(
πa
->
πa_ty≥
 =
©y≥
 &&

376 
	`RTA_PAYLOAD
(
πa
Ë>(*
addr
)) {

377 
addr
 = 
	`RTA_DATA
(
πa
);

382 
öãrÁ˚
 *
iÁ˚
 = 
	`odh˝d_gë_öãrÁ˚_by_ödex
(
ndm
->
ndm_ifödex
);

383 i‡(!
iÁ˚
)

387 i‡(!
addr
 || 
	`IN6_IS_ADDR_LINKLOCAL
(addr) ||

388 
	`IN6_IS_ADDR_MULTICAST
(
addr
))

392 
boﬁ
 
add
;

393 i‡(
is_addr
)

394 
add
 = (
nh
->
∆msg_ty≥
 =
RTM_NEWADDR
);

396 
add
 = (
nh
->
∆msg_ty≥
 =
RTM_NEWNEIGH
 && (
ndm
->
ndm_°©e
 &

397 (
NUD_REACHABLE
 | 
NUD_STALE
 | 
NUD_DELAY
 | 
NUD_PROBE


398 | 
NUD_PERMANENT
 | 
NUD_NOARP
)));

400 i‡(
iÁ˚
->
ndp
 =
RELAYD_RELAY
) {

403 
∆msghdr
 
nh
;

404 
ndmsg
 
ndm
;

405 
∆©å
 
∆a_d°
;

406 
ö6_addr
 
d°
;

407 } 
ªq
 = {

408 {(
ªq
), 
RTM_DELNEIGH
, 
NLM_F_REQUEST
,

409 ++
π∆_£qid
, 0},

410 {.
ndm_Ámûy
 = 
AF_INET6
, .
ndm_Êags
 = 
NTF_PROXY
},

411 {(
∆©å
Ë+ (
ö6_addr
), 
NDA_DST
},

412 *
addr


415 i‡(
ndm
->
ndm_Êags
 & 
NTF_PROXY
) {

417 i‡(
nh
->
∆msg_ty≥
 =
RTM_NEWNEIGH
) {

418 
ªq
.
ndm
.
ndm_ifödex
 = 
iÁ˚
->
ifödex
;

419 
	`£nd
(
π∆_evít
.
ulo›
.
fd
, &
ªq
, ‘eq), 
MSG_DONTWAIT
);

420 
	`£tup_rouã
(
addr
, 
iÁ˚
, 
Ál£
);

421 
dump_√igh
 = 
åue
;

423 } i‡(
add
) {

424 
öãrÁ˚
 *
c
;

425 
	`li°_f‹_óch_íåy
(
c
, &
öãrÁ˚s
, 
hód
) {

426 i‡(
iÁ˚
 =
c
)

429 i‡(
c
->
ndp
 =
RELAYD_RELAY
) {

430 
ªq
.
nh
.
∆msg_ty≥
 = 
RTM_NEWNEIGH
;

431 
ªq
.
nh
.
∆msg_Êags
 |
NLM_F_CREATE
 | 
NLM_F_REPLACE
;

433 
ªq
.
ndm
.
ndm_ifödex
 = 
c
->
ifödex
;

434 
	`£nd
(
π∆_evít
.
ulo›
.
fd
, &
ªq
, ‘eq), 
MSG_DONTWAIT
);

436 
ªq
.
nh
.
∆msg_ty≥
 = 
RTM_DELNEIGH
;

437 
ªq
.
nh
.
∆msg_Êags
 &~(
NLM_F_CREATE
 | 
NLM_F_REPLACE
);

439 
ªq
.
ndm
.
ndm_ifödex
 = 
c
->
ifödex
;

440 
	`£nd
(
π∆_evít
.
ulo›
.
fd
, &
ªq
, ‘eq), 
MSG_DONTWAIT
);

444 
	`£tup_rouã
(
addr
, 
iÁ˚
, 
åue
);

446 i‡(
nh
->
∆msg_ty≥
 =
RTM_NEWNEIGH
) {

448 i‡(!
	`IN6_ARE_ADDR_EQUAL
(&
œ°_sﬁicôed
, 
addr
)) {

449 
œ°_sﬁicôed
 = *
addr
;

451 
öãrÁ˚
 *
c
;

452 
	`li°_f‹_óch_íåy
(
c
, &
öãrÁ˚s
, 
hód
)

453 i‡(
iÁ˚
->
ndp
 =
RELAYD_RELAY
 && iÁ˚ !
c
 &&

454 !
c
->
exã∫Æ
 =
Ál£
)

455 
	`pög6
(
addr
, 
c
);

458 
öãrÁ˚
 *
c
;

459 
	`li°_f‹_óch_íåy
(
c
, &
öãrÁ˚s
, 
hód
) {

460 i‡(
c
->
ndp
 =
RELAYD_RELAY
 && 
iÁ˚
 != c) {

461 
ªq
.
ndm
.
ndm_ifödex
 = 
c
->
ifödex
;

462 
	`£nd
(
π∆_evít
.
ulo›
.
fd
, &
ªq
, ‘eq), 
MSG_DONTWAIT
);

465 
	`£tup_rouã
(
addr
, 
iÁ˚
, 
Ál£
);

468 
dump_√igh
 = 
åue
;

473 i‡(
is_addr
) {

474 
	`check_upd©es
(
iÁ˚
);

476 i‡(
iÁ˚
->
dh˝v6
 =
RELAYD_SERVER
)

477 
iÁ˚
->
ü_ªc⁄f
 = 
åue
;

479 i‡(
iÁ˚
->
ndp
 =
RELAYD_RELAY
 && iÁ˚->
ma°î
) {

481 
nh
->
∆msg_Êags
 = 
NLM_F_REQUEST
;

483 i‡(
nh
->
∆msg_ty≥
 =
RTM_NEWADDR
)

484 
nh
->
∆msg_Êags
 |
NLM_F_CREATE
 | 
NLM_F_REPLACE
;

486 
öãrÁ˚
 *
c
;

487 
	`li°_f‹_óch_íåy
(
c
, &
öãrÁ˚s
, 
hód
) {

488 i‡(
c
->
ndp
 =
RELAYD_RELAY
 && !c->
ma°î
) {

489 
ndm
->
ndm_ifödex
 = 
c
->
ifödex
;

490 
	`£nd
(
π∆_evít
.
ulo›
.
fd
, 
nh
,Çh->
∆msg_Àn
, 
MSG_DONTWAIT
);

497 i‡(
dump_√igh
)

498 
	`dump_√igh_èbÀ
(
Ál£
);

499 
	}
}

501 
	$ˇtch_π√éök
(
îr‹
)

503 i‡(
îr‹
 =
ENOBUFS
) {

505 
∆msghdr
 
nh
;

506 
iÁddrmsg
 
iÁ
;

507 } 
ªq2
 = {

508 {(
ªq2
), 
RTM_GETADDR
, 
NLM_F_REQUEST
 | 
NLM_F_DUMP
,

509 ++
π∆_£qid
, 0},

510 {.
iÁ_Ámûy
 = 
AF_INET6
}

512 
	`£nd
(
π∆_evít
.
ulo›
.
fd
, &
ªq2
, ‘eq2), 
MSG_DONTWAIT
);

514 
	}
}

	@ndp.h

15 #¥agm®
⁄˚


16 
	~"odh˝d.h
"

17 
	~<time.h
>

19 #i‚de‡
SOL_NETLINK


20 
	#SOL_NETLINK
 270

	)

23 
	#NDP_MAX_NEIGHBORS
 1000

	)

25 
	sndp_√ighb‹
 {

26 
li°_hód
 
	mhód
;

27 
öãrÁ˚
 *
	miÁ˚
;

28 
ö6_addr
 
	maddr
;

29 
uöt8_t
 
	mÀn
;

30 
time_t
 
	mtimeout
;

	@odhcpd.c

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<°dio.h
>

19 
	~<ªsﬁv.h
>

20 
	~<gë›t.h
>

21 
	~<°ddef.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<sig«l.h
>

26 
	~<°dboﬁ.h
>

28 
	~<¨∑/öë.h
>

29 
	~<√t/if.h
>

30 
	~<√töë/ù6.h
>

31 
	~<√çackë/∑ckë.h
>

32 
	~<löux/π√éök.h
>

34 
	~<sys/sockë.h
>

35 
	~<sys/io˘l.h
>

36 
	~<sys/ïﬁl.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/sysˇŒ.h
>

42 
	~"ulo›.h
"

43 
	~"odh˝d.h
"

47 
	gio˘l_sock
;

48 
	gπ∆_sockë
 = -1;

49 
	gπ∆_£q
 = 0;

50 
	guøndom_fd
 = -1;

53 
	$sigh™dÀr
(
_unu£d
 
sig«l
)

55 
	`ulo›_íd
();

56 
	}
}

59 
	$maö
(
¨gc
, *
¨gv
[])

61 
	`›ílog
("odh˝d", 
LOG_PERROR
 | 
LOG_PID
, 
LOG_DAEMON
);

62 
	`£éogmask
(
	`LOG_UPTO
(
LOG_WARNING
));

63 
	`ulo›_öô
();

65 i‡(
	`gëuid
() != 0) {

66 
	`sy¶og
(
LOG_ERR
, "Must beÑunásÑoot!");

70 
io˘l_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
 | 
SOCK_CLOEXEC
, 0);

72 i‡((
π∆_sockë
 = 
	`odh˝d_›í_π∆
()) < 0) {

73 
	`sy¶og
(
LOG_ERR
, "U«bÀÅÿ›í sockë: %s", 
	`°ªº‹
(
î∫o
));

77 i‡((
uøndom_fd
 = 
	`›í
("/dev/uøndom", 
O_RDONLY
 | 
O_CLOEXEC
)) < 0)

80 
	`sig«l
(
SIGUSR1
, 
SIG_IGN
);

81 
	`sig«l
(
SIGINT
, 
sigh™dÀr
);

82 
	`sig«l
(
SIGTERM
, 
sigh™dÀr
);

84 i‡(
	`öô_rouãr
())

87 i‡(
	`öô_dh˝v6
())

90 i‡(
	`öô_ndp
())

93 i‡(
	`öô_dh˝v4
())

96 
	`odh˝d_run
(
¨gc
, 
¨gv
);

98 
	}
}

100 
	$odh˝d_›í_π∆
()

102 
sock
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
 | 
SOCK_CLOEXEC
, 
NETLINK_ROUTE
);

105 
sockaddr_∆
 
∆
 = {.
∆_Ámûy
 = 
AF_NETLINK
};

106 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
*)&
∆
, (nl))) {

107 
	`sy¶og
(
LOG_ERR
, "FailedÅo connectÅo kernelÑtnetlink: %s",

108 
	`°ªº‹
(
î∫o
));

112  
sock
;

113 
	}
}

117 
	$odh˝d_gë_öãrÁ˚_c⁄fig
(c⁄° *
i‚ame
, c⁄° *
wh©
)

119 
buf
[64];

120 c⁄° *
sys˘l_∑âîn
 = "/proc/sys/net/ipv6/conf/%s/%s";

121 
	`¢¥ötf
(
buf
, (buf), 
sys˘l_∑âîn
, 
i‚ame
, 
wh©
);

123 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

124 
ssize_t
 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf) - 1);

125 
	`˛o£
(
fd
);

127 i‡(
Àn
 < 0)

130 
buf
[
Àn
] = 0;

131  
	`©oi
(
buf
);

132 
	}
}

136 
	$odh˝d_gë_mac
(c⁄° 
öãrÁ˚
 *
iÁ˚
, 
uöt8_t
 
mac
[6])

138 
i‰eq
 
i‰
;

139 
	`mem£t
(&
i‰
, 0, (ifr));

140 
	`°∫˝y
(
i‰
.
i‰_«me
, 
iÁ˚
->
i‚ame
, (ifr.ifr_name));

141 i‡(
	`io˘l
(
io˘l_sock
, 
SIOCGIFHWADDR
, &
i‰
) < 0)

143 
	`mem˝y
(
mac
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 6);

145 
	}
}

149 
ssize_t
 
	$odh˝d_£nd
(
sockë
, 
sockaddr_ö6
 *
de°
,

150 
iovec
 *
iov
, 
size_t
 
iov_Àn
,

151 c⁄° 
öãrÁ˚
 *
iÁ˚
)

154 
uöt8_t
 
cmsg_buf
[
	`CMSG_SPACE
((
ö6_pktöfo
))] = {0};

155 
msghdr
 
msg
 = {

156 .
msg_«me
 = (*Ë
de°
,

157 .
msg_«mñí
 = (*
de°
),

158 .
msg_iov
 = 
iov
,

159 .
msg_iovÀn
 = 
iov_Àn
,

160 .
msg_c⁄åﬁ
 = 
cmsg_buf
,

161 .
msg_c⁄åﬁÀn
 = (
cmsg_buf
),

162 .
msg_Êags
 = 0

166 
cmsghdr
 *
chdr
 = 
	`CMSG_FIRSTHDR
(&
msg
);

167 
chdr
->
cmsg_Àvñ
 = 
IPPROTO_IPV6
;

168 
chdr
->
cmsg_ty≥
 = 
IPV6_PKTINFO
;

169 
chdr
->
cmsg_Àn
 = 
	`CMSG_LEN
((
ö6_pktöfo
));

170 
ö6_pktöfo
 *
pktöfo
 = (ö6_pktöfo*)
	`CMSG_DATA
(
chdr
);

171 
pktöfo
->
ùi6_ifödex
 = 
iÁ˚
->
ifödex
;

174 i‡(
	`IN6_IS_ADDR_LINKLOCAL
(&
de°
->
sö6_addr
)

175 || 
	`IN6_IS_ADDR_MC_LINKLOCAL
(&
de°
->
sö6_addr
))

176 
de°
->
sö6_sc›e_id
 = 
iÁ˚
->
ifödex
;

178 
ùbuf
[
INET6_ADDRSTRLEN
];

179 
	`öë_¡›
(
AF_INET6
, &
de°
->
sö6_addr
, 
ùbuf
, (ipbuf));

181 
ssize_t
 
£¡
 = 
	`£ndmsg
(
sockë
, &
msg
, 
MSG_DONTWAIT
);

182 i‡(
£¡
 < 0)

183 
	`sy¶og
(
LOG_NOTICE
, "FailedÅo sendÅo %s%%%s (%s)",

184 
ùbuf
, 
iÁ˚
->
i‚ame
, 
	`°ªº‹
(
î∫o
));

186 
	`sy¶og
(
LOG_DEBUG
, "Sent %li bytesÅo %s%%%s",

187 ()
£¡
, 
ùbuf
, 
iÁ˚
->
i‚ame
);

188  
£¡
;

189 
	}
}

193 
ssize_t
 
	$odh˝d_gë_öãrÁ˚_addªs£s
(
ifödex
,

194 
odh˝d_ùaddr
 *
addrs
, 
size_t
 
˙t
)

197 
∆msghdr
 
nhm
;

198 
iÁddrmsg
 
iÁ
;

199 } 
ªq
 = {{‘eq), 
RTM_GETADDR
, 
NLM_F_REQUEST
 | 
NLM_F_DUMP
,

200 ++
π∆_£q
, 0}, {
AF_INET6
, 0, 0, 0, 
ifödex
}};

201 i‡(
	`£nd
(
π∆_sockë
, &
ªq
, ‘eq), 0Ë< (
ssize_t
)(req))

204 
uöt8_t
 
buf
[8192];

205 
ssize_t
 
Àn
 = 0, 
ªt
 = 0;

207 
∆msghdr
 *
nhm
 = 
NULL
; ;Çhm = 
	`NLMSG_NEXT
“hm, 
Àn
)) {

208 
Àn
 < 0 || !
	`NLMSG_OK
(
nhm
, (
size_t
)len)) {

209 
Àn
 = 
	`ªcv
(
π∆_sockë
, 
buf
, (buf), 0);

210 
nhm
 = (
∆msghdr
*)
buf
;

211 i‡(
Àn
 < 0 || !
	`NLMSG_OK
(
nhm
, (
size_t
)len)) {

212 i‡(
î∫o
 =
EINTR
)

215  
ªt
;

219 i‡(
nhm
->
∆msg_ty≥
 !
RTM_NEWADDR
)

223 i‡(
ªt
 >(
ssize_t
)
˙t
)

226 
iÁddrmsg
 *
iÁ
 = 
	`NLMSG_DATA
(
nhm
);

227 i‡(
iÁ
->
iÁ_sc›e
 !
RT_SCOPE_UNIVERSE
 ||

228 (
ifödex
 && 
iÁ
->
iÁ_ödex
 != ()ifindex))

231 
π©å
 *
πa
 = (π©å*)&
iÁ
[1];

232 
size_t
 
Æí
 = 
	`NLMSG_PAYLOAD
(
nhm
, (*
iÁ
));

233 
	`mem£t
(&
addrs
[
ªt
], 0, (addrs[ret]));

234 
addrs
[
ªt
].
¥efix
 = 
iÁ
->
iÁ_¥efixÀn
;

236 
	`RTA_OK
(
πa
, 
Æí
)) {

237 i‡(
πa
->
πa_ty≥
 =
IFA_ADDRESS
) {

238 
	`mem˝y
(&
addrs
[
ªt
].
addr
, 
	`RTA_DATA
(
πa
),

239 (
ö6_addr
));

240 } i‡(
πa
->
πa_ty≥
 =
IFA_CACHEINFO
) {

241 
iÁ_ˇcheöfo
 *
ifc
 = 
	`RTA_DATA
(
πa
);

242 
addrs
[
ªt
].
¥e„ºed
 = 
ifc
->
iÁ_¥e„ªd
;

243 
addrs
[
ªt
].
vÆid
 = 
ifc
->
iÁ_vÆid
;

246 
πa
 = 
	`RTA_NEXT
‘è, 
Æí
);

249 i‡(
iÁ
->
iÁ_Êags
 & 
IFA_F_DEPRECATED
)

250 
addrs
[
ªt
].
¥e„ºed
 = 0;

252 ++
ªt
;

255  
ªt
;

256 
	}
}

258 
	$odh˝d_gë_lökloˇl_öãrÁ˚_addªss
(
ifödex
, 
ö6_addr
 *
Œaddr
)

260 
°©us
 = -1;

261 
sockaddr_ö6
 
addr
 = {
AF_INET6
, 0, 0, 
ALL_IPV6_ROUTERS
, 
ifödex
};

262 
sockÀn_t
 
Æí
 = (
addr
);

263 
sock
 = 
	`sockë
(
AF_INET6
, 
SOCK_RAW
, 
IPPROTO_ICMPV6
);

265 i‡(!
	`c⁄√˘
(
sock
, (
sockaddr
*)&
addr
, (addr)) &&

266 !
	`gësock«me
(
sock
, (
sockaddr
*)&
addr
, &
Æí
)) {

267 *
Œaddr
 = 
addr
.
sö6_addr
;

268 
°©us
 = 0;

271 
	`˛o£
(
sock
);

272  
°©us
;

273 
	}
}

275 
	$odh˝d_£tup_rouã
(c⁄° 
ö6_addr
 *
addr
, 
¥efixÀn
,

276 c⁄° 
öãrÁ˚
 *
iÁ˚
, c⁄° 
ö6_addr
 *
gw
,

277 
mëric
, 
boﬁ
 
add
)

279 
	sªq
 {

280 
∆msghdr
 
nh
;

281 
πmsg
 
πm
;

282 
π©å
 
πa_d°
;

283 
ö6_addr
 
d°_addr
;

284 
π©å
 
πa_oif
;

285 
uöt32_t
 
ifödex
;

286 
π©å
 
πa_èbÀ
;

287 
uöt32_t
 
èbÀ
;

288 
π©å
 
πa_¥io
;

289 
uöt32_t
 
¥io
;

290 
π©å
 
πa_gw
;

291 
ö6_addr
 
gw
;

292 } 
ªq
 = {

293 {(
ªq
), 0, 
NLM_F_REQUEST
, ++
π∆_£q
, 0},

294 {
AF_INET6
, 
¥efixÀn
, 0, 0, 0, 0, 0, 0, 0},

295 {(
π©å
Ë+ (
ö6_addr
), 
RTA_DST
},

296 *
addr
,

297 {(
π©å
Ë+ (
uöt32_t
), 
RTA_OIF
},

298 
iÁ˚
->
ifödex
,

299 {(
π©å
Ë+ (
uöt32_t
), 
RTA_TABLE
},

300 
RT_TABLE_MAIN
,

301 {(
π©å
Ë+ (
uöt32_t
), 
RTA_PRIORITY
},

302 
mëric
,

303 {(
π©å
Ë+ (
ö6_addr
), 
RTA_GATEWAY
},

304 
IN6ADDR_ANY_INIT
,

307 i‡(
gw
)

308 
ªq
.
gw
 = *gw;

310 i‡(
add
) {

311 
ªq
.
nh
.
∆msg_ty≥
 = 
RTM_NEWROUTE
;

312 
ªq
.
nh
.
∆msg_Êags
 |(
NLM_F_CREATE
 | 
NLM_F_REPLACE
);

313 
ªq
.
πm
.
πm_¥Ÿocﬁ
 = 
RTPROT_STATIC
;

314 
ªq
.
πm
.
πm_sc›e
 = (
gw
Ë? 
RT_SCOPE_UNIVERSE
 : 
RT_SCOPE_LINK
;

315 
ªq
.
πm
.
πm_ty≥
 = 
RTN_UNICAST
;

317 
ªq
.
nh
.
∆msg_ty≥
 = 
RTM_DELROUTE
;

318 
ªq
.
πm
.
πm_sc›e
 = 
RT_SCOPE_NOWHERE
;

321 
ªq
.
nh
.
∆msg_Àn
 = (
gw
Ë? ‘eqË: 
	`off£tof
(ªq, 
πa_gw
);

322 
	`£nd
(
π∆_sockë
, &
ªq
,Ñeq.
nh
.
∆msg_Àn
, 
MSG_DONTWAIT
);

323 
	}
}

325 
öãrÁ˚
* 
	$odh˝d_gë_öãrÁ˚_by_ödex
(
ifödex
)

327 
öãrÁ˚
 *
iÁ˚
;

328 
	`li°_f‹_óch_íåy
(
iÁ˚
, &
öãrÁ˚s
, 
hód
)

329 i‡(
iÁ˚
->
ifödex
 == ifindex)

330  
iÁ˚
;

332  
NULL
;

333 
	}
}

336 
öãrÁ˚
* 
	$odh˝d_gë_öãrÁ˚_by_«me
(c⁄° *
«me
)

338 
öãrÁ˚
 *
iÁ˚
;

339 
	`li°_f‹_óch_íåy
(
iÁ˚
, &
öãrÁ˚s
, 
hód
)

340 i‡(!
	`°rcmp
(
iÁ˚
->
i‚ame
, 
«me
))

341  
iÁ˚
;

343  
NULL
;

344 
	}
}

347 
öãrÁ˚
* 
	$odh˝d_gë_ma°î_öãrÁ˚
()

349 
öãrÁ˚
 *
iÁ˚
;

350 
	`li°_f‹_óch_íåy
(
iÁ˚
, &
öãrÁ˚s
, 
hód
)

351 i‡(
iÁ˚
->
ma°î
)

352  
iÁ˚
;

354  
NULL
;

355 
	}
}

359 
	$odh˝d_ª˚ive_∑ckës
(
ulo›_fd
 *
u
, 
_unu£d
 
evíts
)

361 
odh˝d_evít
 *
e
 = 
	`c⁄èöî_of
(
u
, odh˝d_evít, 
ulo›
);

363 
uöt8_t
 
d©a_buf
[
RELAYD_BUFFER_SIZE
], 
cmsg_buf
[128];

365 
sockaddr_ö6
 
ö6
;

366 
sockaddr_ö
 
ö
;

367 
sockaddr_Œ
 
Œ
;

368 
sockaddr_∆
 
∆
;

369 } 
addr
;

371 i‡(
u
->
îr‹
) {

372 
ªt
 = -1;

373 
sockÀn_t
 
ªt_Àn
 = (
ªt
);

374 
	`gësock›t
(
u
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, &
ªt
, &
ªt_Àn
);

375 
u
->
îr‹
 = 
Ál£
;

376 i‡(
e
->
h™dÀ_îr‹
)

377 
e
->
	`h™dÀ_îr‹
(
ªt
);

380 
åue
) {

381 
iovec
 
iov
 = {
d©a_buf
, (data_buf)};

382 
msghdr
 
msg
 = {

383 .
msg_«me
 = (*Ë&
addr
,

384 .
msg_«mñí
 = (
addr
),

385 .
msg_iov
 = &
iov
,

386 .
msg_iovÀn
 = 1,

387 .
msg_c⁄åﬁ
 = 
cmsg_buf
,

388 .
msg_c⁄åﬁÀn
 = (
cmsg_buf
),

389 .
msg_Êags
 = 0

392 
ssize_t
 
Àn
 = 
	`ªcvmsg
(
u
->
fd
, &
msg
, 
MSG_DONTWAIT
);

393 i‡(
Àn
 < 0) {

394 i‡(
î∫o
 =
EAGAIN
)

402 
de°iÁ˚
 = 0;

403 *
hlim
 = 
NULL
;

404 *
de°
 = 
NULL
;

405 
ö6_pktöfo
 *
pktöfo
;

406 
ö_pktöfo
 *
pkt4öfo
;

407 
cmsghdr
 *
ch
 = 
	`CMSG_FIRSTHDR
(&
msg
); ch !
NULL
; ch = 
	`CMSG_NXTHDR
(&msg, ch)) {

408 i‡(
ch
->
cmsg_Àvñ
 =
IPPROTO_IPV6
 &&

409 
ch
->
cmsg_ty≥
 =
IPV6_PKTINFO
) {

410 
pktöfo
 = (
ö6_pktöfo
*)
	`CMSG_DATA
(
ch
);

411 
de°iÁ˚
 = 
pktöfo
->
ùi6_ifödex
;

412 
de°
 = &
pktöfo
->
ùi6_addr
;

413 } i‡(
ch
->
cmsg_Àvñ
 =
IPPROTO_IP
 &&

414 
ch
->
cmsg_ty≥
 =
IP_PKTINFO
) {

415 
pkt4öfo
 = (
ö_pktöfo
*)
	`CMSG_DATA
(
ch
);

416 
de°iÁ˚
 = 
pkt4öfo
->
ùi_ifödex
;

417 
de°
 = &
pkt4öfo
->
ùi_addr
;

418 } i‡(
ch
->
cmsg_Àvñ
 =
IPPROTO_IPV6
 &&

419 
ch
->
cmsg_ty≥
 =
IPV6_HOPLIMIT
) {

420 
hlim
 = (*)
	`CMSG_DATA
(
ch
);

425 i‡(
hlim
 && *hlim != 255)

429 i‡(
addr
.
Œ
.
¶l_Ámûy
 =
AF_PACKET
)

430 
de°iÁ˚
 = 
addr
.
Œ
.
¶l_ifödex
;

432 
öãrÁ˚
 *
iÁ˚
 =

433 
	`odh˝d_gë_öãrÁ˚_by_ödex
(
de°iÁ˚
);

435 i‡(!
iÁ˚
 && 
addr
.
∆
.
∆_Ámûy
 !
AF_NETLINK
)

438 
ùbuf
[
INET6_ADDRSTRLEN
] = "kernel";

439 i‡(
addr
.
Œ
.
¶l_Ámûy
 =
AF_PACKET
 &&

440 
Àn
 >(
ssize_t
)(
ù6_hdr
))

441 
	`öë_¡›
(
AF_INET6
, &
d©a_buf
[8], 
ùbuf
, (ipbuf));

442 i‡(
addr
.
ö6
.
sö6_Ámûy
 =
AF_INET6
)

443 
	`öë_¡›
(
AF_INET6
, &
addr
.
ö6
.
sö6_addr
, 
ùbuf
, (ipbuf));

444 i‡(
addr
.
ö
.
sö_Ámûy
 =
AF_INET
)

445 
	`öë_¡›
(
AF_INET
, &
addr
.
ö
.
sö_addr
, 
ùbuf
, (ipbuf));

447 
	`sy¶og
(
LOG_DEBUG
, "--");

448 
	`sy¶og
(
LOG_DEBUG
, "Re˚ived %lòByã†‰om %s%%%s", ()
Àn
,

449 
ùbuf
, (
iÁ˚
Ë? iÁ˚->
i‚ame
 : "netlink");

451 
e
->
	`h™dÀ_dgøm
(&
addr
, 
d©a_buf
, 
Àn
, 
iÁ˚
, 
de°
);

453 
	}
}

456 
	$odh˝d_ªgi°î
(
odh˝d_evít
 *
evít
)

458 
evít
->
ulo›
.
cb
 = 
odh˝d_ª˚ive_∑ckës
;

459  
	`ulo›_fd_add
(&
evít
->
ulo›
, 
ULOOP_READ
 |

460 ((
evít
->
h™dÀ_îr‹
Ë? 
ULOOP_ERROR_CB
 : 0));

461 
	}
}

463 
	$odh˝d_¥o˚ss
(
odh˝d_evít
 *
evít
)

465 
	`odh˝d_ª˚ive_∑ckës
(&
evít
->
ulo›
, 0);

466 
	}
}

468 
	$odh˝d_uøndom
(*
d©a
, 
size_t
 
Àn
)

470  
	`ªad
(
uøndom_fd
, 
d©a
, 
Àn
);

471 
	}
}

474 
time_t
 
	$odh˝d_time
()

476 
time•ec
 
ts
;

477 
	`sysˇŒ
(
SYS_˛ock_gëtime
, 
CLOCK_MONOTONIC
, &
ts
);

478  
ts
.
tv_£c
;

479 
	}
}

482 c⁄° 
	ghexdigôs
[] = "0123456789abcdef";

483 c⁄° 
öt8_t
 
	ghexvÆs
[] = {

494 
ssize_t
 
	$odh˝d_unhexlify
(
uöt8_t
 *
d°
, 
size_t
 
Àn
, c⁄° *
§c
)

496 
size_t
 
c
;

497 
c
 = 0; c < 
Àn
 && 
§c
[0] && src[1]; ++c) {

498 
öt8_t
 
x
 = (öt8_t)*
§c
++;

499 
öt8_t
 
y
 = (öt8_t)*
§c
++;

500 i‡(
x
 < 0 || (x = 
hexvÆs
[x]) < 0

501 || 
y
 < 0 || (y = 
hexvÆs
[y]) < 0)

503 
d°
[
c
] = 
x
 << 4 | 
y
;

504 ((
öt8_t
)*
§c
) < 0 ||

505 (*
§c
 && 
hexvÆs
[(
uöt8_t
)*src] < 0))

506 
§c
++;

509  
c
;

510 
	}
}

513 
	$odh˝d_hexlify
(*
d°
, c⁄° 
uöt8_t
 *
§c
, 
size_t
 
Àn
)

515 
size_t
 
i
 = 0; i < 
Àn
; ++i) {

516 *
d°
++ = 
hexdigôs
[
§c
[
i
] >> 4];

517 *
d°
++ = 
hexdigôs
[
§c
[
i
] & 0x0f];

519 *
d°
 = 0;

520 
	}
}

523 
	$odh˝d_bmemcmp
(c⁄° *
av
, c⁄° *
bv
, 
size_t
 
bôs
)

525 c⁄° 
uöt8_t
 *
a
 = 
av
, *
b
 = 
bv
;

526 
size_t
 
byãs
 = 
bôs
 / 8;

527 
bôs
 %= 8;

529 
ªs
 = 
	`memcmp
(
a
, 
b
, 
byãs
);

530 i‡(
ªs
 =0 && 
bôs
 > 0)

531 
ªs
 = (
a
[
byãs
] >> (8 - 
bôs
)Ë- (
b
[bytes] >> (8 - bits));

533  
ªs
;

534 
	}
}

537 
	$odh˝d_bmem˝y
(*
av
, c⁄° *
bv
, 
size_t
 
bôs
)

539 
uöt8_t
 *
a
 = 
av
;

540 c⁄° 
uöt8_t
 *
b
 = 
bv
;

542 
size_t
 
byãs
 = 
bôs
 / 8;

543 
bôs
 %= 8;

544 
	`mem˝y
(
a
, 
b
, 
byãs
);

546 i‡(
bôs
 > 0) {

547 
uöt8_t
 
mask
 = (1 << (8 - 
bôs
)) - 1;

548 
a
[
byãs
] = (a[byãs] & 
mask
Ë| ((~maskË& 
b
[bytes]);

550 
	}
}

	@odhcpd.h

15 #¥agm®
⁄˚


16 
	~<√töë/ö.h
>

17 
	~<√töë/icmp6.h
>

18 
	~<√töë/ëhî.h
>

19 
	~<√t/if.h
>

20 
	~<°dboﬁ.h
>

21 
	~<sy¶og.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/sockë.h
>

25 
	~"blobmsg.h
"

27 #i‚de‡
ty≥of


28 
	#ty≥of
 
__ty≥of


	)

31 #i‚de‡
c⁄èöî_of


32 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ( \

33 (
ty≥
 *)–(*)
±r
 - 
	`off£tof
—y≥,
membî
Ë))

	)

37 
	~"libubox/li°.h
"

38 
	~"libubox/ulo›.h
"

40 
	~"li°.h
"

41 
	~"ulo›.h
"

44 
	#ARRAY_SIZE
(
¨r
Ë(◊ºË/ (◊º)[0]))

	)

46 
	#sy¶og
(
lvl
, 
fmt
, ...) \

48 
	`¥ötf
("[%s][%d]", 
__func__
, 
__LINE__
); \

49 
	`¥ötf
(
fmt
, ##
__VA_ARGS__
); \

50 
	`¥ötf
("\n"); \

51 } 0)

	)

54 
	#ND_OPT_ROUTE_INFO
 24

	)

55 
	#ND_OPT_RECURSIVE_DNS
 25

	)

56 
	#ND_OPT_DNS_SEARCH
 31

	)

58 
	#RELAYD_BUFFER_SIZE
 8192

	)

59 
	#RELAYD_MAX_PREFIXES
 8

	)

61 
	#_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

62 
	#_∑cked
 
	`__©åibuã__
((
∑cked
))

	)

65 
	#ALL_IPV6_NODES
 {{{0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\

66 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}}}

	)

68 
	#ALL_IPV6_ROUTERS
 {{{0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\

69 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02}}}

	)

72 
	göãrÁ˚
;

73 
li°_hód
 
Àa£s
;

75 
	sodh˝d_evít
 {

76 
ulo›_fd
 
	mulo›
;

77 (*
	mh™dÀ_dgøm
)(*
	maddr
, *
	md©a
, 
size_t
 
	mÀn
,

78 
öãrÁ˚
 *
	miÁ˚
, *
	mde°_addr
);

79 (*
	mh™dÀ_îr‹
)(
	mîr‹
);

83 
	sodh˝d_ùaddr
 {

84 
ö6_addr
 
	maddr
;

85 
uöt8_t
 
	m¥efix
;

86 
uöt8_t
 
	md¥efix
;

87 
uöt32_t
 
	m¥e„ºed
;

88 
uöt32_t
 
	mvÆid
;

91 
	eodh˝d_mode
 {

92 
	mRELAYD_DISABLED
,

93 
	mRELAYD_SERVER
,

94 
	mRELAYD_RELAY
,

95 
	mRELAYD_HYBRID


99 
	sc⁄fig
 {

100 
boﬁ
 
	mÀgacy
;

101 *
	mdh˝_cb
;

102 *
	mdh˝_°©efûe
;

103 } 
	gc⁄fig
;

106 
	sÀa£
 {

107 
li°_hód
 
	mhód
;

108 
ö_addr
 
	mùaddr
;

109 
uöt32_t
 
	mho°id
;

110 
ëhî_addr
 
	mmac
;

111 
uöt16_t
 
	mduid_Àn
;

112 
uöt8_t
 *
	mduid
;

113 
uöt32_t
 
	mdh˝v4_Àa£time
;

114 
	mho°«me
[];

118 
	söãrÁ˚
 {

119 
li°_hód
 
	mhód
;

121 
	mifödex
;

122 
	mi‚ame
[
IF_NAMESIZE
];

123 
	m«me
[
IF_NAMESIZE
];

126 
ulo›_timeout
 
	mtimî_rs
;

127 
li°_hód
 
	mü_assignmíts
;

128 
odh˝d_ùaddr
 
	mü_addr
[8];

129 
size_t
 
	mü_addr_Àn
;

130 
boﬁ
 
	mü_ªc⁄f
;

133 
odh˝d_evít
 
	mdh˝v6_evít
;

134 
odh˝d_evít
 
	mdh˝v4_evít
;

135 
odh˝d_evít
 
	mndp_evít
;

136 
li°_hód
 
	mdh˝v4_assignmíts
;

139 
	mdh˝v6_pd_m™agî
[128];

140 
ö6_addr
 
	mdh˝v6_pd_˚r
;

143 
odh˝d_mode
 
	mø
;

144 
odh˝d_mode
 
	mdh˝v6
;

145 
odh˝d_mode
 
	mndp
;

146 
odh˝d_mode
 
	mdh˝v4
;

149 
boﬁ
 
	möu£
;

150 
boﬁ
 
	mexã∫Æ
;

151 
boﬁ
 
	mma°î
;

152 
boﬁ
 
	mign‹e
;

153 
boﬁ
 
	mÆways_ªwrôe_dns
;

154 
boﬁ
 
	mø_nŸ_⁄lök
;

155 
boﬁ
 
	mø_advrouãr
;

156 
boﬁ
 
	mno_dy«mic_dh˝
;

158 
	mÀ¨n_rouãs
;

159 
	mdeÁu…_rouãr
;

160 
	mm™aged
;

161 
	mrouã_¥e„ªn˚
;

162 
	mø_maxöãrvÆ
;

165 
ö_addr
 
	mdh˝v4_°¨t
;

166 
ö_addr
 
	mdh˝v4_íd
;

167 
ö_addr
 *
	mdh˝v4_rouãr
;

168 
size_t
 
	mdh˝v4_rouãr_˙t
;

169 
ö_addr
 *
	mdh˝v4_dns
;

170 
size_t
 
	mdh˝v4_dns_˙t
;

171 
uöt32_t
 
	mdh˝v4_Àa£time
;

174 
ö6_addr
 *
	mdns
;

175 
size_t
 
	mdns_˙t
;

176 
uöt8_t
 *
	m£¨ch
;

177 
size_t
 
	m£¨ch_Àn
;

179 *
	mdh˝v6_øw
;

180 
size_t
 
	mdh˝v6_øw_Àn
;

182 *
	mup°ªam
;

183 
size_t
 
	mup°ªam_Àn
;

185 *
	mfûãr_˛ass
;

188 
li°_hód
 
öãrÁ˚s
;

190 
	#RELAYD_MANAGED_MFLAG
 1

	)

191 
	#RELAYD_MANAGED_NO_AFLAG
 2

	)

195 
odh˝d_›í_π∆
();

196 
odh˝d_ªgi°î
(
odh˝d_evít
 *
evít
);

197 
odh˝d_¥o˚ss
(
odh˝d_evít
 *
evít
);

199 
ssize_t
 
odh˝d_£nd
(
sockë
, 
sockaddr_ö6
 *
de°
,

200 
iovec
 *
iov
, 
size_t
 
iov_Àn
,

201 c⁄° 
öãrÁ˚
 *
iÁ˚
);

202 
ssize_t
 
odh˝d_gë_öãrÁ˚_addªs£s
(
ifödex
,

203 
odh˝d_ùaddr
 *
addrs
, 
size_t
 
˙t
);

204 
odh˝d_gë_lökloˇl_öãrÁ˚_addªss
(
ifödex
, 
ö6_addr
 *
Œaddr
);

205 
öãrÁ˚
* 
odh˝d_gë_öãrÁ˚_by_«me
(c⁄° *
«me
);

206 
odh˝d_gë_öãrÁ˚_c⁄fig
(c⁄° *
i‚ame
, c⁄° *
wh©
);

207 
odh˝d_gë_mac
(c⁄° 
öãrÁ˚
 *
iÁ˚
, 
uöt8_t
 
mac
[6]);

208 
öãrÁ˚
* 
odh˝d_gë_öãrÁ˚_by_ödex
(
ifödex
);

209 
öãrÁ˚
* 
odh˝d_gë_ma°î_öãrÁ˚
();

210 
odh˝d_uøndom
(*
d©a
, 
size_t
 
Àn
);

211 
odh˝d_£tup_rouã
(c⁄° 
ö6_addr
 *
addr
, 
¥efixÀn
,

212 c⁄° 
öãrÁ˚
 *
iÁ˚
, c⁄° 
ö6_addr
 *
gw
,

213 
mëric
, 
boﬁ
 
add
);

215 
odh˝d_run
(
¨gc
, *
¨gv
[]);

216 
time_t
 
odh˝d_time
();

217 
ssize_t
 
odh˝d_unhexlify
(
uöt8_t
 *
d°
, 
size_t
 
Àn
, c⁄° *
§c
);

218 
odh˝d_hexlify
(*
d°
, c⁄° 
uöt8_t
 *
§c
, 
size_t
 
Àn
);

220 
odh˝d_bmemcmp
(c⁄° *
av
, c⁄° *
bv
, 
size_t
 
bôs
);

221 
odh˝d_bmem˝y
(*
av
, c⁄° *
bv
, 
size_t
 
bôs
);

223 
c⁄fig_∑r£_öãrÁ˚
(*
d©a
, 
size_t
 
Àn
, c⁄° *
öame
, 
boﬁ
 
ovîwrôe
);

225 #ifde‡
WITH_UBUS


226 
öô_ubus
();

227 c⁄° * 
ubus_gë_i‚ame
(c⁄° *
«me
);

228 
ubus_≠∂y_√tw‹k
();

229 
boﬁ
 
ubus_has_¥efix
(c⁄° *
«me
, c⁄° *
i‚ame
);

234 
öô_rouãr
();

235 
öô_dh˝v6
();

236 
öô_dh˝v4
();

237 
öô_ndp
();

239 
£tup_rouãr_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
);

240 
£tup_dh˝v6_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
);

241 
£tup_ndp_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
);

242 
£tup_dh˝v4_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
);

244 
odh˝d_ªlﬂd
(c⁄° *
°f
,

245 c⁄° *
cb
,

246 c⁄° *
i‚ame
,

247 c⁄° *
dns
);

250 
	#SOCK_CLOEXEC
 02000000

	)

251 
	#__O_CLOEXEC
 02000000

	)

252 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

	@router.c

15 
	~<î∫o.h
>

16 
	~<f˙é.h
>

17 
	~<sig«l.h
>

18 
	~<ªsﬁv.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<uni°d.h
>

22 
	~<°dboﬁ.h
>

23 
	~<√t/rouã.h
>

25 
	~"rouãr.h
"

26 
	~"odh˝d.h
"

29 
f‹w¨d_rouãr_sﬁicô©i⁄
(c⁄° 
öãrÁ˚
 *
iÁ˚
);

30 
f‹w¨d_rouãr_advîti£mít
(
uöt8_t
 *
d©a
, 
size_t
 
Àn
);

32 
h™dÀ_icmpv6
(*
addr
, *
d©a
, 
size_t
 
Àn
,

33 
öãrÁ˚
 *
iÁ˚
, *
de°
);

34 
åiggî_rouãr_advît
(
ulo›_timeout
 *
evít
);

35 
sigu§1_ª‰esh
(
sig«l
);

37 
odh˝d_evít
 
	grouãr_evít
 = {{.
fd
 = -1}, 
	gh™dÀ_icmpv6
, 
	gNULL
};

39 
FILE
 *
	gÂ_rouã
 = 
NULL
;

40 
	#RA_IOV_LEN
 6

	)

42 
	#TIME_LEFT
(
t1
, 
now
Ë(—1Ë!
UINT32_MAX
 ? (t1Ë- (nowË: UINT32_MAX)

	)

44 
	$öô_rouãr
()

47 
sock
 = 
	`sockë
(
AF_INET6
, 
SOCK_RAW
 | 
SOCK_CLOEXEC
, 
IPPROTO_ICMPV6
);

48 i‡(
sock
 < 0 && 
î∫o
 !
EAFNOSUPPORT
) {

49 
	`sy¶og
(
LOG_ERR
, "FaûedÅÿ›í RAW-sockë: %s", 
	`°ªº‹
(
î∫o
));

54 
vÆ
 = 2;

55 
	`£tsock›t
(
sock
, 
IPPROTO_RAW
, 
IPV6_CHECKSUM
, &
vÆ
, (val));

58 
vÆ
 = 255;

59 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_HOPS
, &
vÆ
, (val));

60 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_UNICAST_HOPS
, &
vÆ
, (val));

63 
vÆ
 = 1;

64 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_RECVPKTINFO
, &
vÆ
, (val));

65 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_RECVHOPLIMIT
, &
vÆ
, (val));

68 
vÆ
 = 0;

69 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_LOOP
, &
vÆ
, (val));

72 
icmp6_fûãr
 
fût
;

73 
	`ICMP6_FILTER_SETBLOCKALL
(&
fût
);

74 
	`ICMP6_FILTER_SETPASS
(
ND_ROUTER_ADVERT
, &
fût
);

75 
	`ICMP6_FILTER_SETPASS
(
ND_ROUTER_SOLICIT
, &
fût
);

76 
	`£tsock›t
(
sock
, 
IPPROTO_ICMPV6
, 
ICMP6_FILTER
, &
fût
, (filt));

79 
rouãr_evít
.
ulo›
.
fd
 = 
sock
;

80 
	`odh˝d_ªgi°î
(&
rouãr_evít
);

82 i‡(!(
Â_rouã
 = 
	`f›í
("/proc/net/ipv6_route", "r")))

83 
	`sy¶og
(
LOG_ERR
, "FailedÅo openÑoutingÅable: %s",

84 
	`°ªº‹
(
î∫o
));

86 
	`sig«l
(
SIGUSR1
, 
sigu§1_ª‰esh
);

88 
	}
}

91 
	$£tup_rouãr_öãrÁ˚
(
öãrÁ˚
 *
iÁ˚
, 
boﬁ
 
íabÀ
)

93 i‡(!
Â_rouã
 || 
rouãr_evít
.
ulo›
.
fd
 < 0)

96 
ùv6_mªq
 
Æl_nodes
 = {
ALL_IPV6_NODES
, 
iÁ˚
->
ifödex
};

97 
ùv6_mªq
 
Æl_rouãrs
 = {
ALL_IPV6_ROUTERS
, 
iÁ˚
->
ifödex
};

99 
	`ulo›_timeout_ˇn˚l
(&
iÁ˚
->
timî_rs
);

100 
iÁ˚
->
timî_rs
.
cb
 = 
NULL
;

102 i‡(
iÁ˚
->
ifödex
 <= 0)

105 
	`£tsock›t
(
rouãr_evít
.
ulo›
.
fd
, 
IPPROTO_IPV6
, 
IPV6_DROP_MEMBERSHIP
,

106 &
Æl_nodes
, (all_nodes));

107 
	`£tsock›t
(
rouãr_evít
.
ulo›
.
fd
, 
IPPROTO_IPV6
, 
IPV6_DROP_MEMBERSHIP
,

108 &
Æl_rouãrs
, (all_routers));

110 i‡(!
íabÀ
) {

111 i‡(
iÁ˚
->
ø
)

112 
	`åiggî_rouãr_advît
(&
iÁ˚
->
timî_rs
);

114 *
mªq
 = &
Æl_rouãrs
;

116 i‡(
iÁ˚
->
ø
 =
RELAYD_RELAY
 && iÁ˚->
ma°î
) {

117 
mªq
 = &
Æl_nodes
;

118 
	`f‹w¨d_rouãr_sﬁicô©i⁄
(
iÁ˚
);

119 } i‡(
iÁ˚
->
ø
 =
RELAYD_SERVER
 && !iÁ˚->
ma°î
) {

120 
iÁ˚
->
timî_rs
.
cb
 = 
åiggî_rouãr_advît
;

121 
	`ulo›_timeout_£t
(&
iÁ˚
->
timî_rs
, 1000);

124 i‡(
iÁ˚
->
ø
 =
RELAYD_RELAY
 || (iÁ˚->ø =
RELAYD_SERVER
 && !iÁ˚->
ma°î
))

125 
	`£tsock›t
(
rouãr_evít
.
ulo›
.
fd
, 
IPPROTO_IPV6
,

126 
IPV6_ADD_MEMBERSHIP
, 
mªq
, (
Æl_nodes
));

129 
	}
}

133 
	$sigu§1_ª‰esh
(
_unu£d
 
sig«l
)

135 
öãrÁ˚
 *
iÁ˚
;

136 
	`li°_f‹_óch_íåy
(
iÁ˚
, &
öãrÁ˚s
, 
hód
)

137 i‡(
iÁ˚
->
ø
 =
RELAYD_SERVER
 && !iÁ˚->
ma°î
)

138 
	`ulo›_timeout_£t
(&
iÁ˚
->
timî_rs
, 1000);

139 
	}
}

141 
boﬁ
 
	$rouãr_icmpv6_vÆid
(
sockaddr_ö6
 *
sour˚
, 
uöt8_t
 *
d©a
, 
size_t
 
Àn
)

143 
icmp6_hdr
 *
hdr
 = (icmp6_hd∏*)
d©a
;

144 
icmpv6_›t
 *
›t
, *
íd
 = (icmpv6_›t*)&
d©a
[
Àn
];

147 i‡(
Àn
 < (*
hdr
Ë|| hdr->
icmp6_code
)

148  
Ál£
;

150 
hdr
->
icmp6_ty≥
) {

151 
ND_ROUTER_ADVERT
:

152 i‡(!
	`IN6_IS_ADDR_LINKLOCAL
(&
sour˚
->
sö6_addr
))

153  
Ál£
;

155 
›t
 = (
icmpv6_›t
 *)((
nd_rouãr_advît
 *)
d©a
 + 1);

158 
ND_ROUTER_SOLICIT
:

159 
›t
 = (
icmpv6_›t
 *)((
nd_rouãr_sﬁicô
 *)
d©a
 + 1);

163  
Ál£
;

166 
	`icmpv6_f‹_óch_›ti⁄
(
›t
, o±, 
íd
)

167 i‡(
›t
->
ty≥
 =
ND_OPT_SOURCE_LINKADDR
 &&

168 
	`IN6_IS_ADDR_UNSPECIFIED
(&
sour˚
->
sö6_addr
) &&

169 
hdr
->
icmp6_ty≥
 =
ND_ROUTER_SOLICIT
)

170  
Ál£
;

173  
›t
 =
íd
;

174 
	}
}

178 
boﬁ
 
	$∑r£_rouãs
(
odh˝d_ùaddr
 *
n
, 
ssize_t
 
Àn
)

180 
	`ªwöd
(
Â_rouã
);

182 
löe
[512], 
i‚ame
[16];

183 
boﬁ
 
found_deÁu…
 = 
Ál£
;

184 
odh˝d_ùaddr
 
p
 = {
IN6ADDR_ANY_INIT
, 0, 0, 0, 0};

185 
	`fgës
(
löe
, ÷öe), 
Â_rouã
)) {

186 
uöt32_t
 
rÊags
;

187 i‡(
	`ssˇnf
(
löe
, "00000000000000000000000000000000 00 "

188 "%*†%*†%*†%*†%*†%*†%*†%15s", 
i‚ame
) &&

189 
	`°rcmp
(
i‚ame
, "lo")) {

190 
found_deÁu…
 = 
åue
;

191 } i‡(
	`ssˇnf
(
löe
, "%8" 
SCNx32
 "%8" SCNx32 "%*8" SCNx32 "%*8" SCNx32 " %hhx %*s "

192 "%*†00000000000000000000000000000000 %*†%*†%*†%" 
SCNx32
 "Üo",

193 &
p
.
addr
.
s6_addr32
[0], &p.addr.s6_addr32[1], &p.
¥efix
, &
rÊags
) &&

194 
p
.
¥efix
 > 0 && (
rÊags
 & 
RTF_NONEXTHOP
Ë&& (rÊag†& 
RTF_REJECT
)) {

196 
p
.
addr
.
s6_addr32
[0] = 
	`ht⁄l
(p.addr.s6_addr32[0]);

197 
p
.
addr
.
s6_addr32
[1] = 
	`ht⁄l
(p.addr.s6_addr32[1]);

199 
ssize_t
 
i
 = 0; i < 
Àn
; ++i) {

200 i‡(
n
[
i
].
¥efix
 <64 &&Ç[i].¥efix >
p
.prefix &&

201 !
	`odh˝d_bmemcmp
(&
p
.
addr
, &
n
[
i
].addr,Ö.
¥efix
)) {

202 
n
[
i
].
d¥efix
 = 
p
.
¥efix
;

210  
found_deÁu…
;

211 
	}
}

214 
uöt64_t
 
	$£nd_rouãr_advît
(
öãrÁ˚
 *
iÁ˚
, c⁄° 
ö6_addr
 *
‰om
)

216 
time_t
 
now
 = 
	`odh˝d_time
();

217 
mtu
 = 
	`odh˝d_gë_öãrÁ˚_c⁄fig
(
iÁ˚
->
i‚ame
, "mtu");

218 
hlim
 = 
	`odh˝d_gë_öãrÁ˚_c⁄fig
(
iÁ˚
->
i‚ame
, "hop_limit");

220 i‡(
mtu
 < 1280)

221 
mtu
 = 1280;

224 
nd_rouãr_advît
 
h
;

225 
icmpv6_›t
 
Œaddr
;

226 
nd_›t_mtu
 
mtu
;

227 
nd_›t_¥efix_öfo
 
¥efix
[(
iÁ˚
->
ü_addr
) / (*iface->ia_addr)];

228 } 
adv
 = {

229 .
h
 = {{.
icmp6_ty≥
 = 
ND_ROUTER_ADVERT
, .
icmp6_code
 = 0}, 0, 0},

230 .
Œaddr
 = {
ND_OPT_SOURCE_LINKADDR
, 1, {0}},

231 .
mtu
 = {
ND_OPT_MTU
, 1, 0, 
	`ht⁄l
(mtu)},

234 i‡(
hlim
 > 0)

235 
adv
.
h
.
nd_ø_curh›limô
 = 
hlim
;

237 i‡(
iÁ˚
->
dh˝v6
)

238 
adv
.
h
.
nd_ø_Êags_ª£rved
 = 
ND_RA_FLAG_OTHER
;

240 i‡(
iÁ˚
->
m™aged
 >
RELAYD_MANAGED_MFLAG
)

241 
adv
.
h
.
nd_ø_Êags_ª£rved
 |
ND_RA_FLAG_MANAGED
;

243 i‡(
iÁ˚
->
rouã_¥e„ªn˚
 < 0)

244 
adv
.
h
.
nd_ø_Êags_ª£rved
 |
ND_RA_PREF_LOW
;

245 i‡(
iÁ˚
->
rouã_¥e„ªn˚
 > 0)

246 
adv
.
h
.
nd_ø_Êags_ª£rved
 |
ND_RA_PREF_HIGH
;

247 
	`odh˝d_gë_mac
(
iÁ˚
, 
adv
.
Œaddr
.
d©a
);

250 
odh˝d_ùaddr
 
addrs
[8];

251 
ssize_t
 
ù˙t
 = 0;

252 
öt64_t
 
mövÆid
 = 
INT64_MAX
;

255 i‡(
iÁ˚
->
timî_rs
.
cb
) {

256 
ù˙t
 = 
iÁ˚
->
ü_addr_Àn
;

257 
	`mem˝y
(
addrs
, 
iÁ˚
->
ü_addr
, 
ù˙t
 * (*addrs));

260 i‡(
	`∑r£_rouãs
(
addrs
, 
ù˙t
))

261 
adv
.
h
.
nd_ø_rouãr_li„time
 = 
	`ht⁄s
(1);

262 i‡(
iÁ˚
->
deÁu…_rouãr
 > 1)

263 
adv
.
h
.
nd_ø_rouãr_li„time
 = 
	`ht⁄s
(
iÁ˚
->
deÁu…_rouãr
);

267 
size_t
 
˙t
 = 0;

269 
ö6_addr
 
dns_¥ef
, *
dns_addr
 = &dns_pref;

270 
size_t
 
dns_˙t
 = 1;

272 
	`odh˝d_gë_lökloˇl_öãrÁ˚_addªss
(
iÁ˚
->
ifödex
, &
dns_¥ef
);

274 
ssize_t
 
i
 = 0; i < 
ù˙t
; ++i) {

275 
odh˝d_ùaddr
 *
addr
 = &
addrs
[
i
];

276 i‡(
addr
->
¥efix
 > 96 ||áddr->
vÆid
 <(
uöt32_t
)
now
)

279 
nd_›t_¥efix_öfo
 *
p
 = 
NULL
;

280 
size_t
 
i
 = 0; i < 
˙t
; ++i) {

281 i‡(
addr
->
¥efix
 =
adv
.¥efix[
i
].
nd_›t_pi_¥efix_Àn
 &&

282 !
	`odh˝d_bmemcmp
(&
adv
.
¥efix
[
i
].
nd_›t_pi_¥efix
,

283 &
addr
->addr,áddr->
¥efix
))

284 
p
 = &
adv
.
¥efix
[
i
];

287 i‡(!
p
) {

288 i‡(
˙t
 >
	`ARRAY_SIZE
(
adv
.
¥efix
))

291 
p
 = &
adv
.
¥efix
[
˙t
++];

294 i‡(
addr
->
¥e„ºed
 > (
uöt32_t
)
now
 &&

295 
mövÆid
 > 1000LL * 
	`TIME_LEFT
(
addr
->
vÆid
, 
now
))

296 
mövÆid
 = 1000LL * 
	`TIME_LEFT
(
addr
->
vÆid
, 
now
);

298 
uöt32_t
 
this_li„time
 = 
	`TIME_LEFT
(
addr
->
vÆid
, 
now
);

299 i‡(
this_li„time
 > 
UINT16_MAX
)

300 
this_li„time
 = 
UINT16_MAX
;

301 i‡(((
addr
->addr.
s6_addr
[0] & 0x„Ë!0xf¯|| 
iÁ˚
->
deÁu…_rouãr
)

302 && 
adv
.
h
.
nd_ø_rouãr_li„time


303 && 
	`¡ohs
(
adv
.
h
.
nd_ø_rouãr_li„time
Ë< 
this_li„time
)

304 
adv
.
h
.
nd_ø_rouãr_li„time
 = 
	`ht⁄s
(
this_li„time
);

306 
	`odh˝d_bmem˝y
(&
p
->
nd_›t_pi_¥efix
, &
addr
->addr,

307 (
iÁ˚
->
ø_advrouãr
Ë? 128 : 
addr
->
¥efix
);

308 
p
->
nd_›t_pi_ty≥
 = 
ND_OPT_PREFIX_INFORMATION
;

309 
p
->
nd_›t_pi_Àn
 = 4;

310 
p
->
nd_›t_pi_¥efix_Àn
 = (
addr
->
¥efix
 < 64) ? 64 :áddr->prefix;

311 
p
->
nd_›t_pi_Êags_ª£rved
 = 0;

312 i‡(!
iÁ˚
->
ø_nŸ_⁄lök
)

313 
p
->
nd_›t_pi_Êags_ª£rved
 |
ND_OPT_PI_FLAG_ONLINK
;

314 i‡(
iÁ˚
->
m™aged
 < 
RELAYD_MANAGED_NO_AFLAG
 && 
addr
->
¥efix
 <= 64)

315 
p
->
nd_›t_pi_Êags_ª£rved
 |
ND_OPT_PI_FLAG_AUTO
;

316 i‡(
iÁ˚
->
ø_advrouãr
)

317 
p
->
nd_›t_pi_Êags_ª£rved
 |
ND_OPT_PI_FLAG_RADDR
;

318 
p
->
nd_›t_pi_vÆid_time
 = 
	`ht⁄l
(
	`TIME_LEFT
(
addr
->
vÆid
, 
now
));

319 i‡(
addr
->
¥e„ºed
 > (
uöt32_t
)
now
)

320 
p
->
nd_›t_pi_¥e„ºed_time
 = 
	`ht⁄l
(
	`TIME_LEFT
(
addr
->
¥e„ºed
, 
now
));

321 i‡(
addr
->
vÆid
 - 
now
 < 7200)

322 
p
->
nd_›t_pi_vÆid_time
 = 0;

325 i‡(!
iÁ˚
->
deÁu…_rouãr
 && 
adv
.
h
.
nd_ø_rouãr_li„time
 =
	`ht⁄s
(1)) {

326 
	`sy¶og
(
LOG_WARNING
, "A defaultÑoute isÖresent butÅhere isÇoÖublicÖrefix "

327 "⁄ %†thu†wêd⁄'à™noun˚á deÁu…Ñouã!", 
iÁ˚
->
i‚ame
);

328 
adv
.
h
.
nd_ø_rouãr_li„time
 = 0;

332 i‡(
iÁ˚
->
dns_˙t
 > 0) {

333 
dns_addr
 = 
iÁ˚
->
dns
;

334 
dns_˙t
 = 
iÁ˚
->dns_cnt;

337 i‡(!
dns_addr
 || 
	`IN6_IS_ADDR_UNSPECIFIED
(dns_addr))

338 
dns_˙t
 = 0;

341 
uöt8_t
 
ty≥
;

342 
uöt8_t
 
Àn
;

343 
uöt8_t
 
∑d
;

344 
uöt8_t
 
∑d2
;

345 
uöt32_t
 
li„time
;

346 } 
dns
 = {
ND_OPT_RECURSIVE_DNS
, (1 + (2 * 
dns_˙t
)), 0, 0, 0};

351 
uöt8_t
 
£¨ch_buf
[256], *
£¨ch_domaö
 = 
iÁ˚
->
£¨ch
;

352 
size_t
 
£¨ch_Àn
 = 
iÁ˚
->£¨ch_Àn, 
£¨ch_∑dded
 = 0;

354 i‡(!
£¨ch_domaö
 && !
	`ªs_öô
(Ë&& 
_ªs
.
dn§ch
[0] && _res.dnsrch[0][0]) {

355 
Àn
 = 
	`dn_comp
(
_ªs
.
dn§ch
[0], 
£¨ch_buf
,

356 (
£¨ch_buf
), 
NULL
, NULL);

357 i‡(
Àn
 > 0) {

358 
£¨ch_domaö
 = 
£¨ch_buf
;

359 
£¨ch_Àn
 = 
Àn
;

363 i‡(
£¨ch_Àn
 > 0)

364 
£¨ch_∑dded
 = ((
£¨ch_Àn
 + 7) & (~7)) + 8;

367 
uöt8_t
 
ty≥
;

368 
uöt8_t
 
Àn
;

369 
uöt8_t
 
∑d
;

370 
uöt8_t
 
∑d2
;

371 
uöt32_t
 
li„time
;

372 
uöt8_t
 
«me
[];

373 } *
£¨ch
 = 
	`Æloˇ
((*£¨chË+ 
£¨ch_∑dded
);

375 
£¨ch
->
ty≥
 = 
ND_OPT_DNS_SEARCH
;

376 
£¨ch
->
Àn
 = 
£¨ch_Àn
 ? (((*£¨chË+ 
£¨ch_∑dded
) / 8) : 0;

377 
£¨ch
->
∑d
 = 0;

378 
£¨ch
->
∑d2
 = 0;

379 
	`mem˝y
(
£¨ch
->
«me
, 
£¨ch_domaö
, 
£¨ch_Àn
);

380 
	`mem£t
(&
£¨ch
->
«me
[
£¨ch_Àn
], 0, 
£¨ch_∑dded
 - search_len);

383 
size_t
 
rouãs_˙t
 = 0;

385 
uöt8_t
 
ty≥
;

386 
uöt8_t
 
Àn
;

387 
uöt8_t
 
¥efix
;

388 
uöt8_t
 
Êags
;

389 
uöt32_t
 
li„time
;

390 
uöt32_t
 
addr
[4];

391 } 
rouãs
[
RELAYD_MAX_PREFIXES
];

393 
ssize_t
 
i
 = 0; i < 
ù˙t
; ++i) {

394 
odh˝d_ùaddr
 *
addr
 = &
addrs
[
i
];

395 i‡(
addr
->
d¥efix
 > 64 ||áddr->d¥efix =0 ||áddr->
vÆid
 <(
uöt32_t
)
now
 ||

396 (
addr
->
d¥efix
 =64 &&áddr->
¥efix
 == 64)) {

398 } i‡(
addr
->
d¥efix
 > 32) {

399 
addr
->addr.
s6_addr32
[1] &
	`ht⁄l
(~((1U << (64 -áddr->
d¥efix
)) - 1));

400 } i‡(
addr
->
d¥efix
 <= 32) {

401 
addr
->addr.
s6_addr32
[0] &
	`ht⁄l
(~((1U << (32 -áddr->
d¥efix
)) - 1));

402 
addr
->addr.
s6_addr32
[1] = 0;

405 
rouãs
[
rouãs_˙t
].
ty≥
 = 
ND_OPT_ROUTE_INFO
;

406 
rouãs
[
rouãs_˙t
].
Àn
 = (*routes) / 8;

407 
rouãs
[
rouãs_˙t
].
¥efix
 = 
addr
->
d¥efix
;

408 
rouãs
[
rouãs_˙t
].
Êags
 = 0;

409 i‡(
iÁ˚
->
rouã_¥e„ªn˚
 < 0)

410 
rouãs
[
rouãs_˙t
].
Êags
 |
ND_RA_PREF_LOW
;

411 i‡(
iÁ˚
->
rouã_¥e„ªn˚
 > 0)

412 
rouãs
[
rouãs_˙t
].
Êags
 |
ND_RA_PREF_HIGH
;

413 
rouãs
[
rouãs_˙t
].
li„time
 = 
	`ht⁄l
(
	`TIME_LEFT
(
addr
->
vÆid
, 
now
));

414 
rouãs
[
rouãs_˙t
].
addr
[0] =áddr->addr.
s6_addr32
[0];

415 
rouãs
[
rouãs_˙t
].
addr
[1] =áddr->addr.
s6_addr32
[1];

416 
rouãs
[
rouãs_˙t
].
addr
[2] = 0;

417 
rouãs
[
rouãs_˙t
].
addr
[3] = 0;

419 ++
rouãs_˙t
;

423 
m£cs
 = 0;

424 
uöt32_t
 
maxivÆ
 = 
iÁ˚
->
ø_maxöãrvÆ
 * 1000;

425 
uöt32_t
 
möivÆ
;

427 i‡(
maxivÆ
 < 4000 || maxivÆ > 
MaxRåAdvI¡îvÆ
 * 1000)

428 
maxivÆ
 = 
MaxRåAdvI¡îvÆ
 * 1000;

430 i‡(
maxivÆ
 > 
mövÆid
 / 3) {

431 
maxivÆ
 = 
mövÆid
 / 3;

433 i‡(
maxivÆ
 < 4000)

434 
maxivÆ
 = 4000;

437 
möivÆ
 = (
maxivÆ
 * 3) / 4;

439 
£¨ch
->
li„time
 = 
	`ht⁄l
(
maxivÆ
 / 100);

440 
dns
.
li„time
 = 
£¨ch
->lifetime;

442 
	`odh˝d_uøndom
(&
m£cs
, (msecs));

443 
m£cs
 = (
	`œbs
(m£csË% (
maxivÆ
 - 
möivÆ
)) + minival;

445 
icmpv6_›t
 
adv_öãrvÆ
 = {

446 .
ty≥
 = 
ND_OPT_RTR_ADV_INTERVAL
,

447 .
Àn
 = 1,

448 .
d©a
 = {0, 0, 
maxivÆ
 >> 24, maxival >> 16, maxival >> 8, maxival}

451 
iovec
 
iov
[
RA_IOV_LEN
] = {

452 {&
adv
, (
uöt8_t
*)&adv.
¥efix
[
˙t
] - (uint8_t*)&adv},

453 {&
rouãs
, 
rouãs_˙t
 * (*routes)},

454 {&
dns
, (
dns_˙t
) ? (dns) : 0},

455 {
dns_addr
, 
dns_˙t
 * (*dns_addr)},

456 {
£¨ch
, sórch->
Àn
 * 8},

457 {&
adv_öãrvÆ
,ádv_öãrvÆ.
Àn
 * 8}};

458 
sockaddr_ö6
 
de°
 = {
AF_INET6
, 0, 0, 
ALL_IPV6_NODES
, 0};

460 i‡(
‰om
 && !
	`IN6_IS_ADDR_UNSPECIFIED
(from))

461 
de°
.
sö6_addr
 = *
‰om
;

463 
	`odh˝d_£nd
(
rouãr_evít
.
ulo›
.
fd
,

464 &
de°
, 
iov
, 
	`ARRAY_SIZE
(iov), 
iÁ˚
);

466  
m£cs
;

467 
	}
}

470 
	$åiggî_rouãr_advît
(
ulo›_timeout
 *
evít
)

472 
öãrÁ˚
 *
iÁ˚
 = 
	`c⁄èöî_of
(
evít
, öãrÁ˚, 
timî_rs
);

473 
m£cs
 = 
	`£nd_rouãr_advît
(
iÁ˚
, 
NULL
);

476 i‡(
evít
->
cb
)

477 
	`ulo›_timeout_£t
(
evít
, 
m£cs
);

478 
	}
}

482 
	$h™dÀ_icmpv6
(*
addr
, *
d©a
, 
size_t
 
Àn
,

483 
öãrÁ˚
 *
iÁ˚
, 
_unu£d
 *
de°
)

485 
icmp6_hdr
 *
hdr
 = 
d©a
;

486 
sockaddr_ö6
 *
‰om
 = 
addr
;

488 i‡(!
	`rouãr_icmpv6_vÆid
(
addr
, 
d©a
, 
Àn
))

491 i‡((
iÁ˚
->
ø
 =
RELAYD_SERVER
 && !iÁ˚->
ma°î
)) {

492 i‡(
hdr
->
icmp6_ty≥
 =
ND_ROUTER_SOLICIT
)

493 
	`£nd_rouãr_advît
(
iÁ˚
, &
‰om
->
sö6_addr
);

494 } i‡(
iÁ˚
->
ø
 =
RELAYD_RELAY
) {

495 i‡(
hdr
->
icmp6_ty≥
 =
ND_ROUTER_ADVERT
 && 
iÁ˚
->
ma°î
)

496 
	`f‹w¨d_rouãr_advîti£mít
(
d©a
, 
Àn
);

497 i‡(
hdr
->
icmp6_ty≥
 =
ND_ROUTER_SOLICIT
 && !
iÁ˚
->
ma°î
)

498 
	`f‹w¨d_rouãr_sﬁicô©i⁄
(
	`odh˝d_gë_ma°î_öãrÁ˚
());

500 
	}
}

504 
	$f‹w¨d_rouãr_sﬁicô©i⁄
(c⁄° 
öãrÁ˚
 *
iÁ˚
)

506 i‡(!
iÁ˚
)

509 
icmp6_hdr
 
rs
 = {
ND_ROUTER_SOLICIT
, 0, 0, {{0}}};

510 
iovec
 
iov
 = {&
rs
, (rs)};

511 
sockaddr_ö6
 
Æl_rouãrs
 =

512 {
AF_INET6
, 0, 0, 
ALL_IPV6_ROUTERS
, 
iÁ˚
->
ifödex
};

514 
	`sy¶og
(
LOG_NOTICE
, "Sídög RSÅÿ%s", 
iÁ˚
->
i‚ame
);

515 
	`odh˝d_£nd
(
rouãr_evít
.
ulo›
.
fd
, &
Æl_rouãrs
, &
iov
, 1, 
iÁ˚
);

516 
	}
}

520 
	$f‹w¨d_rouãr_advîti£mít
(
uöt8_t
 *
d©a
, 
size_t
 
Àn
)

522 
nd_rouãr_advît
 *
adv
 = (nd_rouãr_advîà*)
d©a
;

525 
uöt8_t
 *
íd
 = 
d©a
 + 
Àn
;

526 
uöt8_t
 *
mac_±r
 = 
NULL
;

527 
ö6_addr
 *
dns_±r
 = 
NULL
;

528 
size_t
 
dns_cou¡
 = 0;

530 
icmpv6_›t
 *
›t
;

531 
	`icmpv6_f‹_óch_›ti⁄
(
›t
, &
adv
[1], 
íd
) {

532 i‡(
›t
->
ty≥
 =
ND_OPT_SOURCE_LINKADDR
) {

534 
mac_±r
 = 
›t
->
d©a
;

535 } i‡(
›t
->
ty≥
 =
ND_OPT_RECURSIVE_DNS
 && o±->
Àn
 > 1) {

537 
dns_±r
 = (
ö6_addr
*)&
›t
->
d©a
[6];

538 
dns_cou¡
 = (
›t
->
Àn
 - 1) / 2;

542 
	`sy¶og
(
LOG_NOTICE
, "Gotá RA");

545 
adv
->
nd_ø_Êags_ª£rved
 |
ND_RA_FLAG_PROXY
;

548 
sockaddr_ö6
 
Æl_nodes
 = {
AF_INET6
, 0, 0, 
ALL_IPV6_NODES
, 0};

549 
iovec
 
iov
 = {
d©a
, 
Àn
};

551 
öãrÁ˚
 *
iÁ˚
;

552 
	`li°_f‹_óch_íåy
(
iÁ˚
, &
öãrÁ˚s
, 
hód
) {

553 i‡(
iÁ˚
->
ø
 !
RELAYD_RELAY
 || iÁ˚->
ma°î
)

557 i‡(
mac_±r
)

558 
	`odh˝d_gë_mac
(
iÁ˚
, 
mac_±r
);

561 i‡(
iÁ˚
->
Æways_ªwrôe_dns
 && 
dns_±r
 && 
dns_cou¡
 > 0) {

562 c⁄° 
ö6_addr
 *
ªwrôe
 = 
iÁ˚
->
dns
;

563 
ö6_addr
 
addr
;

564 
size_t
 
ªwrôe_˙t
 = 
iÁ˚
->
dns_˙t
;

566 i‡(
ªwrôe_˙t
 == 0) {

567 i‡(
	`odh˝d_gë_lökloˇl_öãrÁ˚_addªss
(
iÁ˚
->
ifödex
, &
addr
))

570 
ªwrôe
 = &
addr
;

571 
ªwrôe_˙t
 = 1;

575 
size_t
 
i
 = 0; i < 
dns_cou¡
; ++i) {

576 
size_t
 
j
 = (
i
 < 
ªwrôe_˙t
) ? i :Ñewrite_cnt - 1;

577 
dns_±r
[
i
] = 
ªwrôe
[
j
];

581 
	`odh˝d_£nd
(
rouãr_evít
.
ulo›
.
fd
, &
Æl_nodes
, &
iov
, 1, 
iÁ˚
);

583 
	}
}

	@router.h

15 #¥agm®
⁄˚


16 
	~<°döt.h
>

17 
	~<√töë/ö.h
>

18 
	~<√töë/icmp6.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

24 
	sicmpv6_›t
 {

25 
uöt8_t
 
	mty≥
;

26 
uöt8_t
 
	mÀn
;

27 
uöt8_t
 
	md©a
[6];

31 
	#icmpv6_f‹_óch_›ti⁄
(
›t
, 
°¨t
, 
íd
)\

32 
›t
 = (
icmpv6_›t
*)(
°¨t
);\

33 (*)(
›t
 + 1Ë<(*)(
íd
Ë&& o±->
Àn
 > 0 &&\

34 (*)(
›t
 + o±->
Àn
Ë<(*)(
íd
); o± +›t->Àn)

	)

37 
	#MaxVÆidTime
 65535

	)

38 
	#MaxRåAdvI¡îvÆ
 1800

	)

40 
	#ND_RA_FLAG_PROXY
 0x4

	)

41 
	#ND_RA_PREF_HIGH
 (1 << 3)

	)

42 
	#ND_RA_PREF_LOW
 (3 << 3)

	)

	@t.c

1 
	~<sys/waô.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<°rög.h
>

8 
	$maö
(
¨gc
, *
¨gv
[])

10 
pùefd
[2];

11 
pid_t
 
˝id
;

12 
buf
;

14 i‡(
¨gc
 != 2) {

15 
	`Ârötf
(
°dîr
, "Ußge: %†<°rög>\n", 
¨gv
[0]);

16 
	`exô
(
EXIT_FAILURE
);

19 i‡(
	`pùe2
(
pùefd
, 0) == -1) {

20 
	`≥º‹
("pipe");

21 
	`exô
(
EXIT_FAILURE
);

24 
˝id
 = 
	`f‹k
();

25 i‡(
˝id
 == -1) {

26 
	`≥º‹
("fork");

27 
	`exô
(
EXIT_FAILURE
);

30 i‡(
˝id
 == 0) {

31 
	`˛o£
(
pùefd
[1]);

33 
	`ªad
(
pùefd
[0], &
buf
, 1) > 0)

34 
	`wrôe
(
STDOUT_FILENO
, &
buf
, 1);

36 
	`wrôe
(
STDOUT_FILENO
, "\n", 1);

37 
	`˛o£
(
pùefd
[0]);

38 
	`_exô
(
EXIT_SUCCESS
);

41 
	`˛o£
(
pùefd
[0]);

42 
	`wrôe
(
pùefd
[1], 
¨gv
[1], 
	`°æí
(argv[1]));

43 
	`˛o£
(
pùefd
[1]);

44 
	`waô
(
NULL
);

45 
	`exô
(
EXIT_SUCCESS
);

47 
	}
}

	@ubus.c

1 
	~<sy¶og.h
>

2 
	~<libubus.h
>

3 
	~<libubox/ulo›.h
>

4 
	~<¨∑/öë.h
>

6 
	~"odh˝d.h
"

7 
	~"dh˝v6.h
"

8 
	~"dh˝v4.h
"

11 
ubus_c⁄ãxt
 *
	gubus
 = 
NULL
;

12 
ubus_subs¸ibî
 
	g√tifd
;

13 
blob_buf
 
	gb
;

14 
blob_©å
 *
	gdump
 = 
NULL
;

15 
uöt32_t
 
	gobjid
 = 0;

16 
ubus_ªque°
 
	gªq_dump
 = { .
li°
 = 
LIST_HEAD_INIT
(
ªq_dump
.list) };

19 
	$h™dÀ_dh˝v4_Àa£s
(
ubus_c⁄ãxt
 *
˘x
, 
_unu£d
 
ubus_obje˘
 *
obj
,

20 
ubus_ªque°_d©a
 *
ªq
, 
_unu£d
 c⁄° *
mëhod
,

21 
_unu£d
 
blob_©å
 *
msg
)

23 
	`blob_buf_öô
(&
b
, 0);

24 *
a
 = 
	`blobmsg_›í_èbÀ
(&
b
, "device");

25 
time_t
 
now
 = 
	`odh˝d_time
();

27 
öãrÁ˚
 *
iÁ˚
;

28 
	`li°_f‹_óch_íåy
(
iÁ˚
, &
öãrÁ˚s
, 
hód
) {

29 i‡(
iÁ˚
->
dh˝v4
 !
RELAYD_SERVER
)

32 *
i
 = 
	`blobmsg_›í_èbÀ
(&
b
, 
iÁ˚
->
i‚ame
);

33 *
j
 = 
	`blobmsg_›í_¨øy
(&
b
, "leases");

35 
dh˝v4_assignmít
 *
Àa£
;

36 
	`li°_f‹_óch_íåy
(
Àa£
, &
iÁ˚
->
dh˝v4_assignmíts
, 
hód
) {

37 i‡(
Àa£
->
vÆid_u¡û
 < 
now
)

40 *
l
 = 
	`blobmsg_›í_èbÀ
(&
b
, 
NULL
);

42 *
buf
 = 
	`blobmsg_Æloc_°rög_buf„r
(&
b
, "mac", 13);

43 
	`odh˝d_hexlify
(
buf
, 
Àa£
->
hwaddr
, (lease->hwaddr));

44 
	`blobmsg_add_°rög_buf„r
(&
b
);

46 
	`blobmsg_add_°rög
(&
b
, "ho°«me", 
Àa£
->
ho°«me
);

48 
buf
 = 
	`blobmsg_Æloc_°rög_buf„r
(&
b
, "ù", 
INET_ADDRSTRLEN
);

49 
ö_addr
 
addr
 = {
	`ht⁄l
(
Àa£
->addr)};

50 
	`öë_¡›
(
AF_INET
, &
addr
, 
buf
, 
INET_ADDRSTRLEN
);

51 
	`blobmsg_add_°rög_buf„r
(&
b
);

53 
	`blobmsg_add_u32
(&
b
, "vÆid", 
now
 - 
Àa£
->
vÆid_u¡û
);

55 
	`blobmsg_˛o£_èbÀ
(&
b
, 
l
);

58 
	`blobmsg_˛o£_¨øy
(&
b
, 
j
);

59 
	`blobmsg_˛o£_èbÀ
(&
b
, 
i
);

62 
	`blobmsg_˛o£_èbÀ
(&
b
, 
a
);

63 
	`ubus_£nd_ª∂y
(
˘x
, 
ªq
, 
b
.
hód
);

65 
	}
}

68 
	$h™dÀ_dh˝v6_Àa£s
(
_unu£d
 
ubus_c⁄ãxt
 *
˘x
, _unu£d 
ubus_obje˘
 *
obj
,

69 
_unu£d
 
ubus_ªque°_d©a
 *
ªq
, _unu£d c⁄° *
mëhod
,

70 
_unu£d
 
blob_©å
 *
msg
)

72 
	`blob_buf_öô
(&
b
, 0);

73 *
a
 = 
	`blobmsg_›í_èbÀ
(&
b
, "device");

74 
time_t
 
now
 = 
	`odh˝d_time
();

76 
öãrÁ˚
 *
iÁ˚
;

77 
	`li°_f‹_óch_íåy
(
iÁ˚
, &
öãrÁ˚s
, 
hód
) {

78 i‡(
iÁ˚
->
dh˝v6
 !
RELAYD_SERVER
)

81 *
i
 = 
	`blobmsg_›í_èbÀ
(&
b
, 
iÁ˚
->
i‚ame
);

82 *
j
 = 
	`blobmsg_›í_¨øy
(&
b
, "leases");

84 
dh˝v6_assignmít
 *
Àa£
;

85 
	`li°_f‹_óch_íåy
(
Àa£
, &
iÁ˚
->
ü_assignmíts
, 
hód
) {

86 i‡(
Àa£
->
vÆid_u¡û
 < 
now
)

89 *
l
 = 
	`blobmsg_›í_èbÀ
(&
b
, 
NULL
);

91 *
buf
 = 
	`blobmsg_Æloc_°rög_buf„r
(&
b
, "duid", 264);

92 
	`odh˝d_hexlify
(
buf
, 
Àa£
->
˛id_d©a
,Üó£->
˛id_Àn
);

93 
	`blobmsg_add_°rög_buf„r
(&
b
);

95 
	`blobmsg_add_u32
(&
b
, "üid", 
	`¡ohl
(
Àa£
->
üid
));

96 
	`blobmsg_add_°rög
(&
b
, "ho°«me", (
Àa£
->
ho°«me
) ?Üease->hostname : "");

97 
	`blobmsg_add_u32
(&
b
, "assig√d", 
Àa£
->
assig√d
);

98 
	`blobmsg_add_u32
(&
b
, "Àngth", 
Àa£
->
Àngth
);

100 *
m
 = 
	`blobmsg_›í_¨øy
(&
b
, "ipv6");

101 
ö6_addr
 
addr
;

102 
size_t
 
i
 = 0; i < 
iÁ˚
->
ü_addr_Àn
; ++i) {

103 i‡(
iÁ˚
->
ü_addr
[
i
].
¥efix
 > 64)

106 
addr
 = 
iÁ˚
->
ü_addr
[
i
].addr;

107 i‡(
Àa£
->
Àngth
 == 128)

108 
addr
.
s6_addr32
[3] = 
	`ht⁄l
(
Àa£
->
assig√d
);

110 
addr
.
s6_addr32
[1] |
	`ht⁄l
(
Àa£
->
assig√d
);

112 *
c
 = 
	`blobmsg_Æloc_°rög_buf„r
(&
b
, 
NULL
, 
INET6_ADDRSTRLEN
);

113 
	`öë_¡›
(
AF_INET6
, &
addr
, 
c
, 
INET6_ADDRSTRLEN
);

114 
	`blobmsg_add_°rög_buf„r
(&
b
);

116 
	`blobmsg_˛o£_èbÀ
(&
b
, 
m
);

118 
	`blobmsg_add_u32
(&
b
, "vÆid", 
now
 - 
Àa£
->
vÆid_u¡û
);

120 
	`blobmsg_˛o£_èbÀ
(&
b
, 
l
);

123 
	`blobmsg_˛o£_¨øy
(&
b
, 
j
);

124 
	`blobmsg_˛o£_èbÀ
(&
b
, 
i
);

127 
	`blobmsg_˛o£_èbÀ
(&
b
, 
a
);

128 
	`ubus_£nd_ª∂y
(
˘x
, 
ªq
, 
b
.
hód
);

130 
	}
}

133 
ubus_mëhod
 
	gmaö_obje˘_mëhods
[] = {

134 {.
«me
 = "ùv4Àa£s", .
	gh™dÀr
 = 
h™dÀ_dh˝v4_Àa£s
},

135 {.
	g«me
 = "ùv6Àa£s", .
	gh™dÀr
 = 
h™dÀ_dh˝v6_Àa£s
},

138 
ubus_obje˘_ty≥
 
	gmaö_obje˘_ty≥
 =

139 
UBUS_OBJECT_TYPE
("dh˝", 
maö_obje˘_mëhods
);

141 
ubus_obje˘
 
	gmaö_obje˘
 = {

142 .
«me
 = "dhcp",

143 .
	gty≥
 = &
maö_obje˘_ty≥
,

144 .
	gmëhods
 = 
maö_obje˘_mëhods
,

145 .
	gn_mëhods
 = 
ARRAY_SIZE
(
maö_obje˘_mëhods
),

150 
	mDUMP_ATTR_INTERFACE
,

151 
	mDUMP_ATTR_MAX


154 c⁄° 
blobmsg_pﬁicy
 
	gdump_©ås
[
DUMP_ATTR_MAX
] = {

155 [
DUMP_ATTR_INTERFACE
] = { .
«me
 = "öãrÁ˚", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

160 
	mIFACE_ATTR_INTERFACE
,

161 
	mIFACE_ATTR_IFNAME
,

162 
	mIFACE_ATTR_UP
,

163 
	mIFACE_ATTR_DATA
,

164 
	mIFACE_ATTR_PREFIX
,

165 
	mIFACE_ATTR_ADDRESS
,

166 
	mIFACE_ATTR_MAX
,

169 c⁄° 
blobmsg_pﬁicy
 
	giÁ˚_©ås
[
IFACE_ATTR_MAX
] = {

170 [
IFACE_ATTR_INTERFACE
] = { .
«me
 = "öãrÁ˚", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

171 [
IFACE_ATTR_IFNAME
] = { .
«me
 = "l3_devi˚", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

172 [
IFACE_ATTR_UP
] = { .
«me
 = "up", .
	gty≥
 = 
BLOBMSG_TYPE_BOOL
 },

173 [
IFACE_ATTR_DATA
] = { .
«me
 = "d©a", .
	gty≥
 = 
BLOBMSG_TYPE_TABLE
 },

174 [
IFACE_ATTR_PREFIX
] = { .
«me
 = "ùv6-¥efix", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

175 [
IFACE_ATTR_ADDRESS
] = { .
«me
 = "ùv6-addªss", .
	gty≥
 = 
BLOBMSG_TYPE_ARRAY
 },

178 
	$h™dÀ_dump
(
_unu£d
 
ubus_ªque°
 *
ªq
, _unu£d 
ty≥
, 
blob_©å
 *
msg
)

180 
blob_©å
 *
tb
[
DUMP_ATTR_MAX
];

181 
	`blobmsg_∑r£
(
dump_©ås
, 
DUMP_ATTR_MAX
, 
tb
, 
	`blob_d©a
(
msg
), 
	`blob_Àn
(msg));

183 i‡(!
tb
[
DUMP_ATTR_INTERFACE
])

186 
	`‰ì
(
dump
);

187 
dump
 = 
	`blob_memdup
(
tb
[
DUMP_ATTR_INTERFACE
]);

188 
	`odh˝d_ªlﬂd
();

189 
	}
}

192 
	$upd©e_√tifd
(
boﬁ
 
subs¸ibe
)

194 i‡(
subs¸ibe
)

195 
	`ubus_subs¸ibe
(
ubus
, &
√tifd
, 
objid
);

197 
	`ubus_ab‹t_ªque°
(
ubus
, &
ªq_dump
);

198 i‡(!
	`ubus_övoke_async
(
ubus
, 
objid
, "dump", 
NULL
, &
ªq_dump
)) {

199 
ªq_dump
.
d©a_cb
 = 
h™dÀ_dump
;

200 
	`ubus_com∂ëe_ªque°_async
(
ubus
, &
ªq_dump
);

202 
	}
}

205 
	$h™dÀ_upd©e
(
_unu£d
 
ubus_c⁄ãxt
 *
˘x
, _unu£d 
ubus_obje˘
 *
obj
,

206 
_unu£d
 
ubus_ªque°_d©a
 *
ªq
, _unu£d c⁄° *
mëhod
,

207 
blob_©å
 *
msg
)

209 
blob_©å
 *
tb
[
IFACE_ATTR_MAX
];

210 
	`blobmsg_∑r£
(
iÁ˚_©ås
, 
IFACE_ATTR_MAX
, 
tb
, 
	`blob_d©a
(
msg
), 
	`blob_Àn
(msg));

212 c⁄° *
öãrÁ˚
 = (
tb
[
IFACE_ATTR_INTERFACE
]) ?

213 
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_INTERFACE
]) : "";

214 c⁄° *
i‚ame
 = (
tb
[
IFACE_ATTR_IFNAME
]) ?

215 
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_IFNAME
]) : "";

217 
öãrÁ˚
 *
c
, *
iÁ˚
 = 
NULL
;

218 
	`li°_f‹_óch_íåy
(
c
, &
öãrÁ˚s
, 
hód
)

219 i‡(!
	`°rcmp
(
öãrÁ˚
, 
c
->
«me
Ë|| !°rcmp(
i‚ame
, c->ifname))

220 
iÁ˚
 = 
c
;

222 i‡(
iÁ˚
 && iÁ˚->
ign‹e
)

225 
	`upd©e_√tifd
(
Ál£
);

227 
	}
}

230 
	$ubus_≠∂y_√tw‹k
()

232 
blob_©å
 *
a
;

233 
ªm
;

235 i‡(!
dump
)

238 
	`blobmsg_f‹_óch_©å
(
a
, 
dump
, 
ªm
) {

239 
blob_©å
 *
tb
[
IFACE_ATTR_MAX
];

240 
	`blobmsg_∑r£
(
iÁ˚_©ås
, 
IFACE_ATTR_MAX
, 
tb
, 
	`blobmsg_d©a
(
a
), 
	`blobmsg_d©a_Àn
(a));

242 i‡(!
tb
[
IFACE_ATTR_INTERFACE
] || !tb[
IFACE_ATTR_DATA
])

245 c⁄° *
öãrÁ˚
 = (
tb
[
IFACE_ATTR_INTERFACE
]) ?

246 
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_INTERFACE
]) : "";

247 c⁄° *
i‚ame
 = (
tb
[
IFACE_ATTR_IFNAME
]) ?

248 
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_IFNAME
]) : "";

250 
boﬁ
 
m©ched
 = 
Ál£
;

251 
öãrÁ˚
 *
c
, *
n
;

252 
	`li°_f‹_óch_íåy_ß„
(
c
, 
n
, &
öãrÁ˚s
, 
hód
) {

253 *
f
 = 
	`memmem
(
c
->
up°ªam
, c->
up°ªam_Àn
,

254 
öãrÁ˚
, 
	`°æí
(interface) + 1);

255 
boﬁ
 
cm©ched
 = !
	`°rcmp
(
öãrÁ˚
, 
c
->
«me
Ë|| !°rcmp(
i‚ame
, c->ifname);

256 
m©ched
 |
cm©ched
;

258 i‡(!
cm©ched
 && (!
c
->
up°ªam_Àn
 || !
f
 || (‡!c->
up°ªam
 && f[-1] != 0)))

261 i‡(!
c
->
ign‹e
)

262 
	`c⁄fig_∑r£_öãrÁ˚
(
	`blobmsg_d©a
(
tb
[
IFACE_ATTR_DATA
]),

263 
	`blobmsg_d©a_Àn
(
tb
[
IFACE_ATTR_DATA
]), 
c
->
«me
, 
Ál£
);

266 i‡(!
m©ched
)

267 
	`c⁄fig_∑r£_öãrÁ˚
(
	`blobmsg_d©a
(
tb
[
IFACE_ATTR_DATA
]),

268 
	`blobmsg_d©a_Àn
(
tb
[
IFACE_ATTR_DATA
]), 
öãrÁ˚
, 
Ál£
);

270 
	}
}

274 
	mOBJ_ATTR_ID
,

275 
	mOBJ_ATTR_PATH
,

276 
	mOBJ_ATTR_MAX


279 c⁄° 
blobmsg_pﬁicy
 
	gobj_©ås
[
OBJ_ATTR_MAX
] = {

280 [
OBJ_ATTR_ID
] = { .
«me
 = "id", .
	gty≥
 = 
BLOBMSG_TYPE_INT32
 },

281 [
OBJ_ATTR_PATH
] = { .
«me
 = "∑th", .
	gty≥
 = 
BLOBMSG_TYPE_STRING
 },

285 
	$h™dÀ_evít
(
_unu£d
 
ubus_c⁄ãxt
 *
˘x
, _unu£d 
ubus_evít_h™dÀr
 *
ev
,

286 
_unu£d
 c⁄° *
ty≥
, 
blob_©å
 *
msg
)

288 
blob_©å
 *
tb
[
OBJ_ATTR_MAX
];

289 
	`blobmsg_∑r£
(
obj_©ås
, 
OBJ_ATTR_MAX
, 
tb
, 
	`blob_d©a
(
msg
), 
	`blob_Àn
(msg));

291 i‡(!
tb
[
OBJ_ATTR_ID
] || !tb[
OBJ_ATTR_PATH
])

294 i‡(
	`°rcmp
(
	`blobmsg_gë_°rög
(
tb
[
OBJ_ATTR_PATH
]), "network.interface"))

297 
objid
 = 
	`blobmsg_gë_u32
(
tb
[
OBJ_ATTR_ID
]);

298 
	`upd©e_√tifd
(
åue
);

299 
	}
}

301 
ubus_evít_h™dÀr
 
	gevít_h™dÀr
 = { .
cb
 = 
h™dÀ_evít
 };

304 c⁄° * 
	$ubus_gë_i‚ame
(c⁄° *
«me
)

306 
blob_©å
 *
c
;

307 
ªm
;

309 i‡(!
dump
)

310  
NULL
;

312 
	`blobmsg_f‹_óch_©å
(
c
, 
dump
, 
ªm
) {

313 
blob_©å
 *
tb
[
IFACE_ATTR_MAX
];

314 
	`blobmsg_∑r£
(
iÁ˚_©ås
, 
IFACE_ATTR_MAX
, 
tb
, 
	`blobmsg_d©a
(
c
), 
	`blobmsg_d©a_Àn
(c));

316 i‡(!
tb
[
IFACE_ATTR_INTERFACE
] || 
	`°rcmp
(
«me
,

317 
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_INTERFACE
])))

320 i‡(
tb
[
IFACE_ATTR_IFNAME
])

321  
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_IFNAME
]);

324  
NULL
;

325 
	}
}

328 
boﬁ
 
	$ubus_has_¥efix
(c⁄° *
«me
, c⁄° *
i‚ame
)

330 
blob_©å
 *
c
, *
cur
;

331 
ªm
;

333 i‡(!
dump
)

334  
NULL
;

336 
	`blobmsg_f‹_óch_©å
(
c
, 
dump
, 
ªm
) {

337 
blob_©å
 *
tb
[
IFACE_ATTR_MAX
];

338 
	`blobmsg_∑r£
(
iÁ˚_©ås
, 
IFACE_ATTR_MAX
, 
tb
, 
	`blobmsg_d©a
(
c
), 
	`blobmsg_d©a_Àn
(c));

340 i‡(!
tb
[
IFACE_ATTR_INTERFACE
] || !tb[
IFACE_ATTR_IFNAME
])

343 i‡(
	`°rcmp
(
«me
, 
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_INTERFACE
])) ||

344 
	`°rcmp
(
i‚ame
, 
	`blobmsg_gë_°rög
(
tb
[
IFACE_ATTR_IFNAME
])))

347 i‡((
cur
 = 
tb
[
IFACE_ATTR_PREFIX
])) {

348 i‡(
	`blobmsg_ty≥
(
cur
Ë!
BLOBMSG_TYPE_ARRAY
 || !
	`blobmsg_check_©å
(cur, 
Ál£
))

351 
blob_©å
 *
d
;

352 
dªm
;

353 
	`blobmsg_f‹_óch_©å
(
d
, 
cur
, 
dªm
) {

354  
åue
;

359  
Ál£
;

360 
	}
}

363 
	$öô_ubus
()

365 i‡(!(
ubus
 = 
	`ubus_c⁄√˘
(
NULL
))) {

366 
	`sy¶og
(
LOG_ERR
, "U«bÀÅÿc⁄√˘Åÿubus: %s", 
	`°ªº‹
(
î∫o
));

370 
√tifd
.
cb
 = 
h™dÀ_upd©e
;

371 
	`ubus_ªgi°î_subs¸ibî
(
ubus
, &
√tifd
);

373 
	`ubus_add_ulo›
(
ubus
);

374 
	`ubus_add_obje˘
(
ubus
, &
maö_obje˘
);

375 
	`ubus_ªgi°î_evít_h™dÀr
(
ubus
, &
evít_h™dÀr
, "ubus.object.add");

376 i‡(!
	`ubus_lookup_id
(
ubus
, "√tw‹k.öãrÁ˚", &
objid
))

377 
	`upd©e_√tifd
(
åue
);

380 
	}
}

	@uloop.c

18 
	~<sys/time.h
>

19 
	~<sys/ty≥s.h
>

21 
	~<uni°d.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<î∫o.h
>

25 
	~<pﬁl.h
>

26 
	~<°rög.h
>

27 
	~<f˙é.h
>

28 
	~<°dboﬁ.h
>

30 
	~"ulo›.h
"

31 
	~"utûs.h
"

33 #ifde‡
USE_KQUEUE


34 
	~<sys/evít.h
>

36 #ifde‡
USE_EPOLL


37 
	~<sys/ïﬁl.h
>

39 
	~<sys/waô.h
>

41 
	sulo›_fd_evít
 {

42 
ulo›_fd
 *
	mfd
;

43 
	mevíts
;

46 
	sulo›_fd_°ack
 {

47 
ulo›_fd_°ack
 *
	m√xt
;

48 
ulo›_fd
 *
	mfd
;

49 
	mevíts
;

52 
ulo›_fd_°ack
 *
	gfd_°ack
 = 
NULL
;

54 
	#ULOOP_MAX_EVENTS
 10

	)

56 
li°_hód
 
	gtimeouts
 = 
LIST_HEAD_INIT
(
timeouts
);

57 
li°_hód
 
	g¥o˚s£s
 = 
LIST_HEAD_INIT
(
¥o˚s£s
);

59 
	gpﬁl_fd
 = -1;

60 
boﬁ
 
	gulo›_ˇn˚Œed
 = 
Ál£
;

61 
boﬁ
 
	gdo_sigchld
 = 
Ál£
;

63 
ulo›_fd_evít
 
	gcur_fds
[
ULOOP_MAX_EVENTS
];

64 
	gcur_fd
, 
	gcur_nfds
;

66 #ifde‡
USE_KQUEUE


68 
	$ulo›_öô
()

70 
time•ec
 
timeout
 = { 0, 0 };

71 
kevít
 
ev
 = {};

73 i‡(
pﬁl_fd
 >= 0)

76 
pﬁl_fd
 = 
	`kqueue
();

77 i‡(
pﬁl_fd
 < 0)

80 
	`EV_SET
(&
ev
, 
SIGCHLD
, 
EVFILT_SIGNAL
, 
EV_ADD
, 0, 0, 0);

81 
	`kevít
(
pﬁl_fd
, &
ev
, 1, 
NULL
, 0, &
timeout
);

84 
	}
}

87 
uöt16_t
 
	$gë_Êags
(
Êags
, 
mask
)

89 
uöt16_t
 
kÊags
 = 0;

91 i‡(!(
Êags
 & 
mask
))

92  
EV_DELETE
;

94 
kÊags
 = 
EV_ADD
;

95 i‡(
Êags
 & 
ULOOP_EDGE_TRIGGER
)

96 
kÊags
 |
EV_CLEAR
;

98  
kÊags
;

99 
	}
}

101 
kevít
 
	gevíts
[
ULOOP_MAX_EVENTS
];

103 
	$ªgi°î_kevít
(
ulo›_fd
 *
fd
, 
Êags
)

105 
time•ec
 
timeout
 = { 0, 0 };

106 
kevít
 
ev
[2];

107 
√v
 = 0;

108 
Ê
 = 0;

109 
ch™ged
;

110 
uöt16_t
 
kÊags
;

112 i‡(
Êags
 & 
ULOOP_EDGE_DEFER
)

113 
Êags
 &~
ULOOP_EDGE_TRIGGER
;

115 
ch™ged
 = 
Êags
 ^ 
fd
->flags;

116 i‡(
ch™ged
 & 
ULOOP_EDGE_TRIGGER
)

117 
ch™ged
 |
Êags
;

119 i‡(
ch™ged
 & 
ULOOP_READ
) {

120 
kÊags
 = 
	`gë_Êags
(
Êags
, 
ULOOP_READ
);

121 
	`EV_SET
(&
ev
[
√v
++], 
fd
->fd, 
EVFILT_READ
, 
kÊags
, 0, 0, fd);

124 i‡(
ch™ged
 & 
ULOOP_WRITE
) {

125 
kÊags
 = 
	`gë_Êags
(
Êags
, 
ULOOP_WRITE
);

126 
	`EV_SET
(&
ev
[
√v
++], 
fd
->fd, 
EVFILT_WRITE
, 
kÊags
, 0, 0, fd);

129 i‡(!
Êags
)

130 
Ê
 |
EV_DELETE
;

132 
fd
->
Êags
 = flags;

133 i‡(
	`kevít
(
pﬁl_fd
, 
ev
, 
√v
, 
NULL
, 
Ê
, &
timeout
) == -1)

137 
	}
}

139 
	$ªgi°î_pﬁl
(
ulo›_fd
 *
fd
, 
Êags
)

141 i‡(
Êags
 & 
ULOOP_EDGE_TRIGGER
)

142 
Êags
 |
ULOOP_EDGE_DEFER
;

144 
Êags
 &~
ULOOP_EDGE_DEFER
;

146  
	`ªgi°î_kevít
(
fd
, 
Êags
);

147 
	}
}

149 
	$__ulo›_fd_dñëe
(
ulo›_fd
 *
fd
)

151  
	`ªgi°î_pﬁl
(
fd
, 0);

152 
	}
}

154 
	$ulo›_„tch_evíts
(
timeout
)

156 
time•ec
 
ts
;

157 
nfds
, 
n
;

159 i‡(
timeout
 >= 0) {

160 
ts
.
tv_£c
 = 
timeout
 / 1000;

161 
ts
.
tv_n£c
 = (
timeout
 % 1000) * 1000000;

164 
nfds
 = 
	`kevít
(
pﬁl_fd
, 
NULL
, 0, 
evíts
, 
	`ARRAY_SIZE
”víts), 
timeout
 >0 ? &
ts
 : NULL);

165 
n
 = 0;Ç < 
nfds
;Ç++) {

166 
ulo›_fd_evít
 *
cur
 = &
cur_fds
[
n
];

167 
ulo›_fd
 *
u
 = 
evíts
[
n
].
ud©a
;

168 
ev
 = 0;

170 
cur
->
fd
 = 
u
;

171 i‡(!
u
)

174 i‡(
evíts
[
n
].
Êags
 & 
EV_ERROR
) {

175 
u
->
îr‹
 = 
åue
;

176 i‡(!(
u
->
Êags
 & 
ULOOP_ERROR_CB
))

177 
	`ulo›_fd_dñëe
(
u
);

180 if(
evíts
[
n
].
fûãr
 =
EVFILT_READ
)

181 
ev
 |
ULOOP_READ
;

182 i‡(
evíts
[
n
].
fûãr
 =
EVFILT_WRITE
)

183 
ev
 |
ULOOP_WRITE
;

185 i‡(
evíts
[
n
].
Êags
 & 
EV_EOF
)

186 
u
->
eof
 = 
åue
;

187 i‡(!
ev
)

188 
cur
->
fd
 = 
NULL
;

190 
cur
->
evíts
 = 
ev
;

191 i‡(
u
->
Êags
 & 
ULOOP_EDGE_DEFER
) {

192 
u
->
Êags
 &~
ULOOP_EDGE_DEFER
;

193 
u
->
Êags
 |
ULOOP_EDGE_TRIGGER
;

194 
	`ªgi°î_kevít
(
u
, u->
Êags
);

197  
nfds
;

198 
	}
}

202 #ifde‡
USE_EPOLL


207 #i‚de‡
EPOLLRDHUP


208 
	#EPOLLRDHUP
 0x2000

	)

211 
	$ulo›_öô
()

213 i‡(
pﬁl_fd
 >= 0)

216 
pﬁl_fd
 = 
	`ïﬁl_¸óã
(32);

217 i‡(
pﬁl_fd
 < 0)

220 
	`f˙é
(
pﬁl_fd
, 
F_SETFD
, f˙é’ﬁl_fd, 
F_GETFD
Ë| 
FD_CLOEXEC
);

222 
	}
}

224 
	$ªgi°î_pﬁl
(
ulo›_fd
 *
fd
, 
Êags
)

226 
ïﬁl_evít
 
ev
;

227 
›
 = 
fd
->
ªgi°îed
 ? 
EPOLL_CTL_MOD
 : 
EPOLL_CTL_ADD
;

229 
	`mem£t
(&
ev
, 0, (
ïﬁl_evít
));

231 i‡(
Êags
 & 
ULOOP_READ
)

232 
ev
.
evíts
 |
EPOLLIN
 | 
EPOLLRDHUP
;

234 i‡(
Êags
 & 
ULOOP_WRITE
)

235 
ev
.
evíts
 |
EPOLLOUT
;

237 i‡(
Êags
 & 
ULOOP_EDGE_TRIGGER
)

238 
ev
.
evíts
 |
EPOLLET
;

240 
ev
.
d©a
.
fd
 = fd->fd;

241 
ev
.
d©a
.
±r
 = 
fd
;

242 
fd
->
Êags
 = flags;

244  
	`ïﬁl_˘l
(
pﬁl_fd
, 
›
, 
fd
->fd, &
ev
);

245 
	}
}

247 
ïﬁl_evít
 
	gevíts
[
ULOOP_MAX_EVENTS
];

249 
	$__ulo›_fd_dñëe
(
ulo›_fd
 *
sock
)

251 
sock
->
Êags
 = 0;

252  
	`ïﬁl_˘l
(
pﬁl_fd
, 
EPOLL_CTL_DEL
, 
sock
->
fd
, 0);

253 
	}
}

255 
	$ulo›_„tch_evíts
(
timeout
)

257 
n
, 
nfds
;

259 
nfds
 = 
	`ïﬁl_waô
(
pﬁl_fd
, 
evíts
, 
	`ARRAY_SIZE
”víts), 
timeout
);

260 
n
 = 0;Ç < 
nfds
; ++n) {

261 
ulo›_fd_evít
 *
cur
 = &
cur_fds
[
n
];

262 
ulo›_fd
 *
u
 = 
evíts
[
n
].
d©a
.
±r
;

263 
ev
 = 0;

265 
cur
->
fd
 = 
u
;

266 i‡(!
u
)

269 i‡(
evíts
[
n
].evít†& (
EPOLLERR
|
EPOLLHUP
)) {

270 
u
->
îr‹
 = 
åue
;

271 i‡(!(
u
->
Êags
 & 
ULOOP_ERROR_CB
))

272 
	`ulo›_fd_dñëe
(
u
);

275 if(!(
evíts
[
n
].evít†& (
EPOLLRDHUP
|
EPOLLIN
|
EPOLLOUT
|
EPOLLERR
|
EPOLLHUP
))) {

276 
cur
->
fd
 = 
NULL
;

280 if(
evíts
[
n
].evít†& 
EPOLLRDHUP
)

281 
u
->
eof
 = 
åue
;

283 if(
evíts
[
n
].evít†& 
EPOLLIN
)

284 
ev
 |
ULOOP_READ
;

286 if(
evíts
[
n
].evít†& 
EPOLLOUT
)

287 
ev
 |
ULOOP_WRITE
;

289 
cur
->
evíts
 = 
ev
;

292  
nfds
;

293 
	}
}

297 
boﬁ
 
	$ulo›_fd_°ack_evít
(
ulo›_fd
 *
fd
, 
evíts
)

299 
ulo›_fd_°ack
 *
cur
;

305 i‡(!(
fd
->
Êags
 & 
ULOOP_EDGE_TRIGGER
))

306  
Ál£
;

308 
cur
 = 
fd_°ack
; cur; cu∏cur->
√xt
) {

309 i‡(
cur
->
fd
 != fd)

312 i‡(
evíts
 < 0)

313 
cur
->
fd
 = 
NULL
;

315 
cur
->
evíts
 |evít†| 
ULOOP_EVENT_BUFFERED
;

317  
åue
;

320  
Ál£
;

321 
	}
}

323 
	$ulo›_run_evíts
(
timeout
)

325 
ulo›_fd_evít
 *
cur
;

326 
ulo›_fd
 *
fd
;

328 i‡(!
cur_nfds
) {

329 
cur_fd
 = 0;

330 
cur_nfds
 = 
	`ulo›_„tch_evíts
(
timeout
);

331 i‡(
cur_nfds
 < 0)

332 
cur_nfds
 = 0;

335 
cur_nfds
 > 0) {

336 
ulo›_fd_°ack
 
°ack_cur
;

337 
evíts
;

339 
cur
 = &
cur_fds
[
cur_fd
++];

340 
cur_nfds
--;

342 
fd
 = 
cur
->fd;

343 
evíts
 = 
cur
->events;

344 i‡(!
fd
)

347 i‡(!
fd
->
cb
)

350 i‡(
	`ulo›_fd_°ack_evít
(
fd
, 
cur
->
evíts
))

353 
°ack_cur
.
√xt
 = 
fd_°ack
;

354 
°ack_cur
.
fd
 = fd;

355 
fd_°ack
 = &
°ack_cur
;

357 
°ack_cur
.
evíts
 = 0;

358 
fd
->
	`cb
(fd, 
evíts
);

359 
evíts
 = 
°ack_cur
.evít†& 
ULOOP_EVENT_MASK
;

360 } 
°ack_cur
.
fd
 && 
evíts
);

361 
fd_°ack
 = 
°ack_cur
.
√xt
;

365 
	}
}

367 
	$ulo›_fd_add
(
ulo›_fd
 *
sock
, 
Êags
)

369 
Ê
;

370 
ªt
;

372 i‡(!(
Êags
 & (
ULOOP_READ
 | 
ULOOP_WRITE
)))

373  
	`ulo›_fd_dñëe
(
sock
);

375 i‡(!
sock
->
ªgi°îed
 && !(
Êags
 & 
ULOOP_BLOCKING
)) {

376 
Ê
 = 
	`f˙é
(
sock
->
fd
, 
F_GETFL
, 0);

377 
Ê
 |
O_NONBLOCK
;

378 
	`f˙é
(
sock
->
fd
, 
F_SETFL
, 
Ê
);

381 
ªt
 = 
	`ªgi°î_pﬁl
(
sock
, 
Êags
);

382 i‡(
ªt
 < 0)

383 
out
;

385 
sock
->
ªgi°îed
 = 
åue
;

386 
sock
->
eof
 = 
Ál£
;

387 
sock
->
îr‹
 = 
Ál£
;

389 
out
:

390  
ªt
;

391 
	}
}

393 
	$ulo›_fd_dñëe
(
ulo›_fd
 *
fd
)

395 
i
;

397 
i
 = 0; i < 
cur_nfds
; i++) {

398 i‡(
cur_fds
[
cur_fd
 + 
i
].
fd
 != fd)

401 
cur_fds
[
cur_fd
 + 
i
].
fd
 = 
NULL
;

404 i‡(!
fd
->
ªgi°îed
)

407 
fd
->
ªgi°îed
 = 
Ál£
;

408 
	`ulo›_fd_°ack_evít
(
fd
, -1);

409  
	`__ulo›_fd_dñëe
(
fd
);

410 
	}
}

412 
	$tv_diff
(
timevÆ
 *
t1
, timevÆ *
t2
)

415 (
t1
->
tv_£c
 - 
t2
->tv_sec) * 1000 +

416 (
t1
->
tv_u£c
 - 
t2
->tv_usec) / 1000;

417 
	}
}

419 
	$ulo›_timeout_add
(
ulo›_timeout
 *
timeout
)

421 
ulo›_timeout
 *
tmp
;

422 
li°_hód
 *
h
 = &
timeouts
;

424 i‡(
timeout
->
≥ndög
)

427 
	`li°_f‹_óch_íåy
(
tmp
, &
timeouts
, 
li°
) {

428 i‡(
	`tv_diff
(&
tmp
->
time
, &
timeout
->time) > 0) {

429 
h
 = &
tmp
->
li°
;

434 
	`li°_add_èû
(&
timeout
->
li°
, 
h
);

435 
timeout
->
≥ndög
 = 
åue
;

438 
	}
}

440 
	$ulo›_gëtime
(
timevÆ
 *
tv
)

442 
time•ec
 
ts
;

444 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

445 
tv
->
tv_£c
 = 
ts
.tv_sec;

446 
tv
->
tv_u£c
 = 
ts
.
tv_n£c
 / 1000;

447 
	}
}

449 
	$ulo›_timeout_£t
(
ulo›_timeout
 *
timeout
, 
m£cs
)

451 
timevÆ
 *
time
 = &
timeout
->time;

453 i‡(
timeout
->
≥ndög
)

454 
	`ulo›_timeout_ˇn˚l
(
timeout
);

456 
	`ulo›_gëtime
(
time
);

458 
time
->
tv_£c
 +
m£cs
 / 1000;

459 
time
->
tv_u£c
 +(
m£cs
 % 1000) * 1000;

461 i‡(
time
->
tv_u£c
 > 1000000) {

462 
time
->
tv_£c
++;

463 
time
->
tv_u£c
 -= 1000000;

466  
	`ulo›_timeout_add
(
timeout
);

467 
	}
}

469 
	$ulo›_timeout_ˇn˚l
(
ulo›_timeout
 *
timeout
)

471 i‡(!
timeout
->
≥ndög
)

474 
	`li°_dñ
(&
timeout
->
li°
);

475 
timeout
->
≥ndög
 = 
Ál£
;

478 
	}
}

480 
	$ulo›_timeout_ªmaöög
(
ulo›_timeout
 *
timeout
)

482 
timevÆ
 
now
;

484 i‡(!
timeout
->
≥ndög
)

487 
	`ulo›_gëtime
(&
now
);

489  
	`tv_diff
(&
timeout
->
time
, &
now
);

490 
	}
}

492 
	$ulo›_¥o˚ss_add
(
ulo›_¥o˚ss
 *
p
)

494 
ulo›_¥o˚ss
 *
tmp
;

495 
li°_hód
 *
h
 = &
¥o˚s£s
;

497 i‡(
p
->
≥ndög
)

500 
	`li°_f‹_óch_íåy
(
tmp
, &
¥o˚s£s
, 
li°
) {

501 i‡(
tmp
->
pid
 > 
p
->pid) {

502 
h
 = &
tmp
->
li°
;

507 
	`li°_add_èû
(&
p
->
li°
, 
h
);

508 
p
->
≥ndög
 = 
åue
;

511 
	}
}

513 
	$ulo›_¥o˚ss_dñëe
(
ulo›_¥o˚ss
 *
p
)

515 i‡(!
p
->
≥ndög
)

518 
	`li°_dñ
(&
p
->
li°
);

519 
p
->
≥ndög
 = 
Ál£
;

522 
	}
}

524 
	$ulo›_h™dÀ_¥o˚s£s
()

526 
ulo›_¥o˚ss
 *
p
, *
tmp
;

527 
pid_t
 
pid
;

528 
ªt
;

530 
do_sigchld
 = 
Ál£
;

533 
pid
 = 
	`waôpid
(-1, &
ªt
, 
WNOHANG
);

534 i‡(
pid
 <= 0)

537 
	`li°_f‹_óch_íåy_ß„
(
p
, 
tmp
, &
¥o˚s£s
, 
li°
) {

538 i‡(
p
->
pid
 <Öid)

541 i‡(
p
->
pid
 >Öid)

544 
	`ulo›_¥o˚ss_dñëe
(
p
);

545 
p
->
	`cb
’, 
ªt
);

549 
	}
}

551 
	$ulo›_h™dÀ_sigöt
(
signo
)

553 
ulo›_ˇn˚Œed
 = 
åue
;

554 
	}
}

556 
	$ulo›_sigchld
(
signo
)

558 
do_sigchld
 = 
åue
;

559 
	}
}

561 
ulo›_ö°Æl_h™dÀr
(
signum
, (*
h™dÀr
)(), 
siga˘i⁄
* 
ﬁd
, 
boﬁ
 
add
)

563 
siga˘i⁄
 
s
;

564 
siga˘i⁄
 *
a˘
;

566 
a˘
 = 
NULL
;

567 
	`siga˘i⁄
(
signum
, 
NULL
, &
s
);

569 i‡(
add
) {

570 i‡(
s
.
ß_h™dÀr
 =
SIG_DFL
) {

571 
	`mem˝y
(
ﬁd
, &
s
, (
siga˘i⁄
));

572 
s
.
ß_h™dÀr
 = 
h™dÀr
;

573 
s
.
ß_Êags
 = 0;

574 
a˘
 = &
s
;

577 i‡(
s
.
ß_h™dÀr
 =
h™dÀr
) {

578 
a˘
 = 
ﬁd
;

581 i‡(
a˘
 !
NULL
)

582 
	`siga˘i⁄
(
signum
, 
a˘
, 
NULL
);

583 
	}
}

585 
	$ulo›_ign‹e_sig«l
(
signum
, 
boﬁ
 
ign‹e
)

587 
siga˘i⁄
 
s
;

588 *
√w_h™dÀr
 = 
NULL
;

590 
	`siga˘i⁄
(
signum
, 
NULL
, &
s
);

592 i‡(
ign‹e
) {

593 i‡(
s
.
ß_h™dÀr
 =
SIG_DFL
)

594 
√w_h™dÀr
 = 
SIG_IGN
;

596 i‡(
s
.
ß_h™dÀr
 =
SIG_IGN
)

597 
√w_h™dÀr
 = 
SIG_DFL
;

600 i‡(
√w_h™dÀr
) {

601 
s
.
ß_h™dÀr
 = 
√w_h™dÀr
;

602 
s
.
ß_Êags
 = 0;

603 
	`siga˘i⁄
(
signum
, &
s
, 
NULL
);

605 
	}
}

607 
	$ulo›_£tup_sig«ls
(
boﬁ
 
add
)

609 
siga˘i⁄
 
ﬁd_sigöt
, 
ﬁd_sigchld
, 
ﬁd_sigãrm
;

611 
	`ulo›_ö°Æl_h™dÀr
(
SIGINT
, 
ulo›_h™dÀ_sigöt
, &
ﬁd_sigöt
, 
add
);

612 
	`ulo›_ö°Æl_h™dÀr
(
SIGTERM
, 
ulo›_h™dÀ_sigöt
, &
ﬁd_sigãrm
, 
add
);

613 
	`ulo›_ö°Æl_h™dÀr
(
SIGCHLD
, 
ulo›_sigchld
, &
ﬁd_sigchld
, 
add
);

615 
	`ulo›_ign‹e_sig«l
(
SIGPIPE
, 
add
);

616 
	}
}

618 
	$ulo›_gë_√xt_timeout
(
timevÆ
 *
tv
)

620 
ulo›_timeout
 *
timeout
;

621 
diff
;

623 i‡(
	`li°_em±y
(&
timeouts
))

626 
timeout
 = 
	`li°_fú°_íåy
(&
timeouts
, 
ulo›_timeout
, 
li°
);

627 
diff
 = 
	`tv_diff
(&
timeout
->
time
, 
tv
);

628 i‡(
diff
 < 0)

631  
diff
;

632 
	}
}

634 
	$ulo›_¥o˚ss_timeouts
(
timevÆ
 *
tv
)

636 
ulo›_timeout
 *
t
;

638 !
	`li°_em±y
(&
timeouts
)) {

639 
t
 = 
	`li°_fú°_íåy
(&
timeouts
, 
ulo›_timeout
, 
li°
);

641 i‡(
	`tv_diff
(&
t
->
time
, 
tv
) > 0)

644 
	`ulo›_timeout_ˇn˚l
(
t
);

645 i‡(
t
->
cb
)

646 
t
->
	`cb
(t);

648 
	}
}

650 
	$ulo›_˛ór_timeouts
()

652 
ulo›_timeout
 *
t
, *
tmp
;

654 
	`li°_f‹_óch_íåy_ß„
(
t
, 
tmp
, &
timeouts
, 
li°
)

655 
	`ulo›_timeout_ˇn˚l
(
t
);

656 
	}
}

658 
	$ulo›_˛ór_¥o˚s£s
()

660 
ulo›_¥o˚ss
 *
p
, *
tmp
;

662 
	`li°_f‹_óch_íåy_ß„
(
p
, 
tmp
, &
¥o˚s£s
, 
li°
)

663 
	`ulo›_¥o˚ss_dñëe
(
p
);

664 
	}
}

666 
	$ulo›_run
()

668 
ªcursive_ˇŒs
 = 0;

669 
timevÆ
 
tv
;

675 i‡(!
ªcursive_ˇŒs
++)

676 
	`ulo›_£tup_sig«ls
(
åue
);

678 
ulo›_ˇn˚Œed
 = 
Ál£
;

679 !
ulo›_ˇn˚Œed
)

681 
	`ulo›_gëtime
(&
tv
);

682 
	`ulo›_¥o˚ss_timeouts
(&
tv
);

684 i‡(
do_sigchld
)

685 
	`ulo›_h™dÀ_¥o˚s£s
();

687 i‡(
ulo›_ˇn˚Œed
)

690 
	`ulo›_gëtime
(&
tv
);

691 
	`ulo›_run_evíts
(
	`ulo›_gë_√xt_timeout
(&
tv
));

694 i‡(!--
ªcursive_ˇŒs
)

695 
	`ulo›_£tup_sig«ls
(
Ál£
);

696 
	}
}

698 
	$ulo›_d⁄e
()

700 i‡(
pﬁl_fd
 < 0)

703 
	`˛o£
(
pﬁl_fd
);

704 
pﬁl_fd
 = -1;

706 
	`ulo›_˛ór_timeouts
();

707 
	`ulo›_˛ór_¥o˚s£s
();

708 
	}
}

	@uloop.h

18 #i‚de‡
_ULOOP_H__


19 
	#_ULOOP_H__


	)

21 
	~<sys/time.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<°dboﬁ.h
>

24 
	~<°döt.h
>

25 
	~<sig«l.h
>

27 #i‡
deföed
(
__APPLE__
Ë|| deföed(
__FªeBSD__
)

28 
	#USE_KQUEUE


	)

30 
	#USE_EPOLL


	)

33 
	~"li°.h
"

35 
	gulo›_fd
;

36 
	gulo›_timeout
;

37 
	gulo›_¥o˚ss
;

39 (*
	tulo›_fd_h™dÀr
)(
	tulo›_fd
 *
	tu
, 
	tevíts
);

40 (*
	tulo›_timeout_h™dÀr
)(
	tulo›_timeout
 *
	tt
);

41 (*
	tulo›_¥o˚ss_h™dÀr
)(
	tulo›_¥o˚ss
 *
	tc
, 
	tªt
);

43 
	#ULOOP_READ
 (1 << 0)

	)

44 
	#ULOOP_WRITE
 (1 << 1)

	)

45 
	#ULOOP_EDGE_TRIGGER
 (1 << 2)

	)

46 
	#ULOOP_BLOCKING
 (1 << 3)

	)

48 
	#ULOOP_EVENT_MASK
 (
ULOOP_READ
 | 
ULOOP_WRITE
)

	)

51 
	#ULOOP_EVENT_BUFFERED
 (1 << 4)

	)

52 #ifde‡
USE_KQUEUE


53 
	#ULOOP_EDGE_DEFER
 (1 << 5)

	)

56 
	#ULOOP_ERROR_CB
 (1 << 6)

	)

58 
	sulo›_fd


60 
ulo›_fd_h™dÀr
 
cb
;

61 
fd
;

62 
boﬁ
 
eof
;

63 
boﬁ
 
îr‹
;

64 
boﬁ
 
ªgi°îed
;

65 
uöt8_t
 
Êags
;

68 
	sulo›_timeout


70 
li°_hód
 
li°
;

71 
boﬁ
 
≥ndög
;

73 
ulo›_timeout_h™dÀr
 
cb
;

74 
timevÆ
 
time
;

77 
	sulo›_¥o˚ss


79 
li°_hód
 
li°
;

80 
boﬁ
 
≥ndög
;

82 
ulo›_¥o˚ss_h™dÀr
 
cb
;

83 
pid_t
 
pid
;

86 
boﬁ
 
ulo›_ˇn˚Œed
;

87 
boﬁ
 
ulo›_h™dÀ_sigchld
;

89 
	`ulo›_fd_add
(
ulo›_fd
 *
sock
, 
Êags
);

90 
	`ulo›_fd_dñëe
(
ulo›_fd
 *
sock
);

92 
	`ulo›_timeout_add
(
ulo›_timeout
 *
timeout
);

93 
	`ulo›_timeout_£t
(
ulo›_timeout
 *
timeout
, 
m£cs
);

94 
	`ulo›_timeout_ˇn˚l
(
ulo›_timeout
 *
timeout
);

95 
	`ulo›_timeout_ªmaöög
(
ulo›_timeout
 *
timeout
);

97 
	`ulo›_¥o˚ss_add
(
ulo›_¥o˚ss
 *
p
);

98 
	`ulo›_¥o˚ss_dñëe
(
ulo›_¥o˚ss
 *
p
);

100 
ölöe
 
	$ulo›_íd
()

102 
ulo›_ˇn˚Œed
 = 
åue
;

103 
	}
}

105 
ulo›_öô
();

106 
ulo›_run
();

107 
ulo›_d⁄e
();

	@usock.c

19 
	~<sys/ty≥s.h
>

20 
	~<sys/sockë.h
>

21 
	~<sys/un.h
>

22 
	~<√tdb.h
>

23 
	~<pﬁl.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<î∫o.h
>

28 
	~<°rög.h
>

29 
	~<°dboﬁ.h
>

30 
	~<°dio.h
>

31 
	~<pﬁl.h
>

33 
	~"usock.h
"

34 
	~"utûs.h
"

36 
	$usock_£t_Êags
(
sock
, 
ty≥
)

38 i‡(!(
ty≥
 & 
USOCK_NOCLOEXEC
))

39 
	`f˙é
(
sock
, 
F_SETFD
, f˙é(sock, 
F_GETFD
Ë| 
FD_CLOEXEC
);

41 i‡(
ty≥
 & 
USOCK_NONBLOCK
)

42 
	`f˙é
(
sock
, 
F_SETFL
, f˙é(sock, 
F_GETFL
Ë| 
O_NONBLOCK
);

43 
	}
}

45 
	$usock_c⁄√˘
(
ty≥
, 
sockaddr
 *
ß
, 
ß_Àn
, 
Ámûy
, 
sockty≥
, 
boﬁ
 
£rvî
)

47 
sock
;

49 
sock
 = 
	`sockë
(
Ámûy
, 
sockty≥
, 0);

50 i‡(
sock
 < 0)

53 
	`usock_£t_Êags
(
sock
, 
ty≥
);

55 i‡(
£rvî
) {

56 c⁄° 
⁄e
 = 1;

57 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄e
, (one));

59 i‡(!
	`böd
(
sock
, 
ß
, 
ß_Àn
) &&

60 (
sockty≥
 !
SOCK_STREAM
 || !
	`li°í
(
sock
, 
SOMAXCONN
)))

61  
sock
;

63 i‡(!
	`c⁄√˘
(
sock
, 
ß
, 
ß_Àn
Ë|| 
î∫o
 =
EINPROGRESS
)

64  
sock
;

67 
	`˛o£
(
sock
);

69 
	}
}

71 
	$usock_unix
(
ty≥
, c⁄° *
ho°
)

73 
sockaddr_un
 
sun
 = {.
sun_Ámûy
 = 
AF_UNIX
};

74 
boﬁ
 
£rvî
 = !!(
ty≥
 & 
USOCK_SERVER
);

75 
sockty≥
 = ((
ty≥
 & 0xffË=
USOCK_TCP
Ë? 
SOCK_STREAM
 : 
SOCK_DGRAM
;

77 i‡(
	`°æí
(
ho°
Ë>(
sun
.
sun_∑th
)) {

78 
î∫o
 = 
EINVAL
;

81 
	`°r˝y
(
sun
.
sun_∑th
, 
ho°
);

83  
	`usock_c⁄√˘
(
ty≥
, (
sockaddr
*)&
sun
, (sun), 
AF_UNIX
, 
sockty≥
, 
£rvî
);

84 
	}
}

87 
	$usock_öë_nŸimeout
(
ty≥
, 
addröfo
 *
ªsu…
, *
addr
)

89 
addröfo
 *
Ω
;

90 
sockty≥
 = ((
ty≥
 & 0xffË=
USOCK_TCP
Ë? 
SOCK_STREAM
 : 
SOCK_DGRAM
;

91 
boﬁ
 
£rvî
 = !!(
ty≥
 & 
USOCK_SERVER
);

92 
sock
;

94 
Ω
 = 
ªsu…
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

95 
sock
 = 
	`usock_c⁄√˘
(
ty≥
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
,Ñp->
ai_Ámûy
, 
sockty≥
, 
£rvî
);

96 i‡(
sock
 >= 0) {

97 i‡(
addr
)

98 
	`mem˝y
(
addr
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

99  
sock
;

104 
	}
}

106 
	$pﬁl_ª°¨t
(
pﬁlfd
 *
fds
, 
nfds
, 
timeout
)

108 
time•ec
 
ts
, 
cur
;

109 
m£c
 = 
timeout
 % 1000;

110 
ªt
;

112 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

114 
ts
.
tv_n£c
 +
m£c
 * 1000000;

115 i‡(
ts
.
tv_n£c
 > 1000000000) {

116 
ts
.
tv_£c
++;

117 
ts
.
tv_n£c
 -= 1000000000;

119 
ts
.
tv_£c
 +
timeout
 / 1000;

122 
ªt
 = 
	`pﬁl
(
fds
, 
nfds
, 
timeout
);

123 i‡(
ªt
 =
EAGAIN
)

126 i‡(
ªt
 !
EINTR
)

127  
ªt
;

129 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
cur
);

130 
timeout
 = (
ts
.
tv_£c
 - 
cur
.tv_sec) * 1000;

131 
timeout
 +(
ts
.
tv_n£c
 - 
cur
.tv_nsec) / 1000000;

132 i‡(
timeout
 <= 0)

135 
	}
}

137 
	$usock_öë_timeout
(
ty≥
, c⁄° *
ho°
, c⁄° *
£rvi˚
,

138 *
addr
, 
timeout
)

140 
sockty≥
 = ((
ty≥
 & 0xffË=
USOCK_TCP
Ë? 
SOCK_STREAM
 : 
SOCK_DGRAM
;

141 
boﬁ
 
£rvî
 = !!(
ty≥
 & 
USOCK_SERVER
);

142 
addröfo
 *
ªsu…
, *
Ω
;

143 
addröfo
 
höts
 = {

144 .
ai_Ámûy
 = (
ty≥
 & 
USOCK_IPV6ONLY
Ë? 
AF_INET6
 :

145 (
ty≥
 & 
USOCK_IPV4ONLY
Ë? 
AF_INET
 : 
AF_UNSPEC
,

146 .
ai_sockty≥
 = 
sockty≥
,

147 .
ai_Êags
 = 
AI_ADDRCONFIG


148 | ((
ty≥
 & 
USOCK_SERVER
Ë? 
AI_PASSIVE
 : 0)

149 | ((
ty≥
 & 
USOCK_NUMERIC
Ë? 
AI_NUMERICHOST
 : 0),

151 
addröfo
 *
Ω_v6
 = 
NULL
;

152 
addröfo
 *
Ω_v4
 = 
NULL
;

153 
pﬁlfd
 
pfds
[2] = {

154 { .
fd
 = -1, .
evíts
 = 
POLLOUT
 },

155 { .
fd
 = -1, .
evíts
 = 
POLLOUT
 },

157 
sock
 = -1;

158 
i
;

160 i‡(
	`gëaddröfo
(
ho°
, 
£rvi˚
, &
höts
, &
ªsu…
))

163 i‡(
timeout
 <0 || 
£rvî
) {

164 
sock
 = 
	`usock_öë_nŸimeout
(
ty≥
, 
ªsu…
, 
addr
);

165 
‰ì_addröfo
;

168 
Ω
 = 
ªsu…
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

169 i‡(
Ω
->
ai_Ámûy
 =
AF_INET6
 && !
Ω_v6
)

170 
Ω_v6
 = 
Ω
;

171 i‡(
Ω
->
ai_Ámûy
 =
AF_INET
 && !
Ω_v4
)

172 
Ω_v4
 = 
Ω
;

175 i‡(!
Ω_v6
 && !
Ω_v4
)

176 
out
;

178 i‡(
Ω_v6
) {

179 
Ω
 = 
Ω_v6
;

180 
pfds
[0].
fd
 = 
	`usock_c⁄√˘
(
ty≥
 | 
USOCK_NONBLOCK
, 
Ω
->
ai_addr
,

181 
Ω
->
ai_addæí
,Ñp->
ai_Ámûy
,

182 
sockty≥
, 
£rvî
);

183 i‡(
pfds
[0].
fd
 < 0) {

184 
Ω_v6
 = 
NULL
;

185 
åy_v4
;

188 i‡(
timeout
 > 300) {

189 i‡(
	`pﬁl_ª°¨t
(
pfds
, 1, 300) == 1) {

190 
Ω
 = 
Ω_v6
;

191 
sock
 = 
pfds
[0].
fd
;

192 
out
;

195 
timeout
 -= 300;

198 
åy_v4
:

199 i‡(
Ω_v4
) {

200 
Ω
 = 
Ω_v4
;

201 
pfds
[1].
fd
 = 
	`usock_c⁄√˘
(
ty≥
 | 
USOCK_NONBLOCK
, 
Ω
->
ai_addr
,

202 
Ω
->
ai_addæí
,Ñp->
ai_Ámûy
,

203 
sockty≥
, 
£rvî
);

204 i‡(
pfds
[1].
fd
 < 0) {

205 
Ω_v4
 = 
NULL
;

206 i‡(!
Ω_v6
)

207 
out
;

208 
waô
;

212 
waô
:

213 
	`pﬁl_ª°¨t
(
pfds
 + !
Ω_v6
, !!Ω_v6 + !!
Ω_v4
, 
timeout
);

214 i‡(
pfds
[0].
ªvíts
 & 
POLLOUT
) {

215 
Ω
 = 
Ω_v6
;

216 
sock
 = 
pfds
[0].
fd
;

217 
out
;

220 i‡(
pfds
[1].
ªvíts
 & 
POLLOUT
) {

221 
Ω
 = 
Ω_v4
;

222 
sock
 = 
pfds
[1].
fd
;

223 
out
;

226 
out
:

227 
i
 = 0; i < 2; i++) {

228 
fd
 = 
pfds
[
i
].fd;

229 i‡(
fd
 >0 && fd !
sock
)

230 
	`˛o£
(
fd
);

233 i‡(!(
ty≥
 & 
USOCK_NONBLOCK
))

234 
	`f˙é
(
sock
, 
F_SETFL
, f˙é(sock, 
F_GETFL
Ë& ~
O_NONBLOCK
);

236 i‡(
addr
 && 
sock
 >= 0)

237 
	`mem˝y
(
addr
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

238 
‰ì_addröfo
:

239 
	`‰ìaddröfo
(
ªsu…
);

240  
sock
;

241 
	}
}

243 c⁄° *
	$usock_p‹t
(
p‹t
)

245 
buf„r
[("65535\0")];

247 i‡(
p‹t
 < 0 ||Öort > 65535)

248  
NULL
;

250 
	`¢¥ötf
(
buf„r
, (buf„r), "%u", 
p‹t
);

252  
buf„r
;

253 
	}
}

255 
	$usock
(
ty≥
, c⁄° *
ho°
, c⁄° *
£rvi˚
) {

256 
sock
;

258 i‡(
ty≥
 & 
USOCK_UNIX
)

259 
sock
 = 
	`usock_unix
(
ty≥
, 
ho°
);

261 
sock
 = 
	`usock_öë
(
ty≥
, 
ho°
, 
£rvi˚
, 
NULL
);

263 i‡(
sock
 < 0)

266  
sock
;

267 
	}
}

269 
	$usock_waô_ªady
(
fd
, 
m£cs
) {

270 
pﬁlfd
 
fds
[1];

271 
ªs
;

273 
fds
[0].
fd
 = fd;

274 
fds
[0].
evíts
 = 
POLLOUT
;

276 
ªs
 = 
	`pﬁl
(
fds
, 1, 
m£cs
);

277 i‡(
ªs
 < 0) {

278  
î∫o
;

279 } i‡(
ªs
 == 0) {

280  -
ETIMEDOUT
;

282 
îr
 = 0;

283 
sockÀn_t
 
›éí
 = (
îr
);

285 
ªs
 = 
	`gësock›t
(
fd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
›éí
);

286 i‡(
ªs
)

287  
î∫o
;

288 i‡(
îr
)

289  
îr
;

293 
	}
}

	@usock.h

19 #i‚de‡
USOCK_H_


20 
	#USOCK_H_


	)

22 
	#USOCK_TCP
 0

	)

23 
	#USOCK_UDP
 1

	)

25 
	#USOCK_SERVER
 0x0100

	)

26 
	#USOCK_NOCLOEXEC
 0x0200

	)

27 
	#USOCK_NONBLOCK
 0x0400

	)

28 
	#USOCK_NUMERIC
 0x0800

	)

29 
	#USOCK_IPV6ONLY
 0x2000

	)

30 
	#USOCK_IPV4ONLY
 0x4000

	)

31 
	#USOCK_UNIX
 0x8000

	)

33 c⁄° *
usock_p‹t
(
p‹t
);

34 
usock
(
ty≥
, c⁄° *
ho°
, c⁄° *
£rvi˚
);

35 
usock_öë_timeout
(
ty≥
, c⁄° *
ho°
, c⁄° *
£rvi˚
,

36 *
addr
, 
timeout
);

37 
ölöe
 

38 
	$usock_öë
(
ty≥
, c⁄° *
ho°
, c⁄° *
£rvi˚
, *
addr
)

40  
	`usock_öë_timeout
(
ty≥
, 
ho°
, 
£rvi˚
, 
addr
, -1);

41 
	}
}

52 
usock_waô_ªady
(
fd
, 
m£cs
);

	@ustream-fd.c

19 
	~<uni°d.h
>

20 
	~<î∫o.h
>

21 
	~<°dio.h
>

22 
	~"u°ªam.h
"

24 
	$u°ªam_fd_£t_ulo›
(
u°ªam
 *
s
, 
boﬁ
 
wrôe
)

26 
u°ªam_fd
 *
sf
 = 
	`c⁄èöî_of
(
s
, u°ªam_fd, 
°ªam
);

27 
u°ªam_buf
 *
buf
;

28 
Êags
 = 
ULOOP_EDGE_TRIGGER
 | 
ULOOP_ERROR_CB
;

30 i‡(!
s
->
ªad_blocked
 && !s->
eof
)

31 
Êags
 |
ULOOP_READ
;

33 
buf
 = 
s
->
w
.
hód
;

34 i‡(
wrôe
 || (
buf
 && 
s
->
w
.
d©a_byãs
 && !s->
wrôe_îr‹
))

35 
Êags
 |
ULOOP_WRITE
;

37 
	`ulo›_fd_add
(&
sf
->
fd
, 
Êags
);

38 
	}
}

40 
	$u°ªam_fd_£t_ªad_blocked
(
u°ªam
 *
s
)

42 
	`u°ªam_fd_£t_ulo›
(
s
, 
Ál£
);

43 
	}
}

45 
	$u°ªam_fd_ªad_≥ndög
(
u°ªam_fd
 *
sf
, 
boﬁ
 *
m‹e
)

47 
u°ªam
 *
s
 = &
sf
->
°ªam
;

48 
buÊí
 = 0;

49 
ssize_t
 
Àn
;

50 *
buf
;

53 i‡(
s
->
ªad_blocked
)

56 
buf
 = 
	`u°ªam_ª£rve
(
s
, 1, &
buÊí
);

57 i‡(!
buf
)

60 
Àn
 = 
	`ªad
(
sf
->
fd
.fd, 
buf
, 
buÊí
);

61 i‡(
Àn
 < 0) {

62 i‡(
î∫o
 =
EINTR
)

65 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
ENOTCONN
)

68 
Àn
 = 0;

71 i‡(!
Àn
) {

72 i‡(!
s
->
eof
)

73 
	`u°ªam_°©e_ch™ge
(
s
);

74 
s
->
eof
 = 
åue
;

75 
	`u°ªam_fd_£t_ulo›
(
s
, 
Ál£
);

79 
	`u°ªam_fûl_ªad
(
s
, 
Àn
);

80 *
m‹e
 = 
åue
;

82 
	}
}

84 
	$u°ªam_fd_wrôe
(
u°ªam
 *
s
, c⁄° *
buf
, 
buÊí
, 
boﬁ
 
m‹e
)

86 
u°ªam_fd
 *
sf
 = 
	`c⁄èöî_of
(
s
, u°ªam_fd, 
°ªam
);

87 
ssize_t
 
ªt
 = 0, 
Àn
;

89 i‡(!
buÊí
)

92 
buÊí
) {

93 
Àn
 = 
	`wrôe
(
sf
->
fd
.fd, 
buf
, 
buÊí
);

95 i‡(
Àn
 < 0) {

96 i‡(
î∫o
 =
EINTR
)

99 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
 ||Éºnÿ=
ENOTCONN
)

105 
ªt
 +
Àn
;

106 
buf
 +
Àn
;

107 
buÊí
 -
Àn
;

110 i‡(
buÊí
)

111 
	`u°ªam_fd_£t_ulo›
(
s
, 
åue
);

113  
ªt
;

114 
	}
}

116 
boﬁ
 
	$__u°ªam_fd_pﬁl
(
u°ªam_fd
 *
sf
, 
evíts
)

118 
u°ªam
 *
s
 = &
sf
->
°ªam
;

119 
boﬁ
 
m‹e
 = 
Ál£
;

121 i‡(
evíts
 & 
ULOOP_READ
)

122 
	`u°ªam_fd_ªad_≥ndög
(
sf
, &
m‹e
);

124 i‡(
evíts
 & 
ULOOP_WRITE
) {

125 
boﬁ
 
no_m‹e
 = 
	`u°ªam_wrôe_≥ndög
(
s
);

126 i‡(
no_m‹e
)

127 
	`u°ªam_fd_£t_ulo›
(
s
, 
Ál£
);

130 i‡(
sf
->
fd
.
îr‹
 && !
s
->
wrôe_îr‹
) {

131 
	`u°ªam_°©e_ch™ge
(
s
);

132 
s
->
wrôe_îr‹
 = 
åue
;

133 
	`u°ªam_fd_£t_ulo›
(
s
, 
Ál£
);

136  
m‹e
;

137 
	}
}

139 
boﬁ
 
	$u°ªam_fd_pﬁl
(
u°ªam
 *
s
)

141 
u°ªam_fd
 *
sf
 = 
	`c⁄èöî_of
(
s
, u°ªam_fd, 
°ªam
);

143  
	`__u°ªam_fd_pﬁl
(
sf
, 
ULOOP_READ
 | 
ULOOP_WRITE
);

144 
	}
}

146 
	$u°ªam_ulo›_cb
(
ulo›_fd
 *
fd
, 
evíts
)

148 
u°ªam_fd
 *
sf
 = 
	`c⁄èöî_of
(
fd
, ustream_fd, fd);

150 
	`__u°ªam_fd_pﬁl
(
sf
, 
evíts
);

151 
	}
}

153 
	$u°ªam_fd_‰ì
(
u°ªam
 *
s
)

155 
u°ªam_fd
 *
sf
 = 
	`c⁄èöî_of
(
s
, u°ªam_fd, 
°ªam
);

157 
	`ulo›_fd_dñëe
(&
sf
->
fd
);

158 
	}
}

160 
	$u°ªam_fd_öô
(
u°ªam_fd
 *
sf
, 
fd
)

162 
u°ªam
 *
s
 = &
sf
->
°ªam
;

164 
	`u°ªam_öô_deÁu…s
(
s
);

166 
sf
->
fd
.fd = fd;

167 
sf
->
fd
.
cb
 = 
u°ªam_ulo›_cb
;

168 
s
->
£t_ªad_blocked
 = 
u°ªam_fd_£t_ªad_blocked
;

169 
s
->
wrôe
 = 
u°ªam_fd_wrôe
;

170 
s
->
‰ì
 = 
u°ªam_fd_‰ì
;

171 
s
->
pﬁl
 = 
u°ªam_fd_pﬁl
;

172 
	`u°ªam_fd_£t_ulo›
(
s
, 
Ál£
);

173 
	}
}

	@ustream.c

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

22 
	~<°dio.h
>

23 
	~<°d¨g.h
>

25 
	~"u°ªam.h
"

27 
	$u°ªam_öô_buf
(
u°ªam_buf
 *
buf
, 
Àn
)

29 i‡(!
Àn
)

30 
	`ab‹t
();

32 
	`mem£t
(
buf
, 0, (*buf));

33 
buf
->
d©a
 = buf->
èû
 = buf->
hód
;

34 
buf
->
íd
 = buf->
hód
 + 
Àn
;

35 *
buf
->
hód
 = 0;

36 
	}
}

38 
	$u°ªam_add_buf
(
u°ªam_buf_li°
 *
l
, 
u°ªam_buf
 *
buf
)

40 
l
->
buf„rs
++;

41 i‡(!
l
->
èû
)

42 
l
->
hód
 = 
buf
;

44 
l
->
èû
->
√xt
 = 
buf
;

46 
buf
->
√xt
 = 
NULL
;

47 
l
->
èû
 = 
buf
;

48 i‡(!
l
->
d©a_èû
)

49 
l
->
d©a_èû
 =Ü->
hód
;

50 
	}
}

52 
boﬁ
 
	$u°ªam_ˇn_Æloc
(
u°ªam_buf_li°
 *
l
)

54 i‡(
l
->
max_buf„rs
 <= 0)

55  
åue
;

57  (
l
->
buf„rs
 <Ü->
max_buf„rs
);

58 
	}
}

60 
	$u°ªam_Æloc_deÁu…
(
u°ªam
 *
s
, 
u°ªam_buf_li°
 *
l
)

62 
u°ªam_buf
 *
buf
;

64 i‡(!
	`u°ªam_ˇn_Æloc
(
l
))

67 
buf
 = 
	`mÆloc
((*bufË+ 
l
->
buf„r_Àn
 + 
s
->
°rög_d©a
);

68 
	`u°ªam_öô_buf
(
buf
, 
l
->
buf„r_Àn
);

69 
	`u°ªam_add_buf
(
l
, 
buf
);

72 
	}
}

74 
	$u°ªam_‰ì_buf„rs
(
u°ªam_buf_li°
 *
l
)

76 
u°ªam_buf
 *
buf
 = 
l
->
hód
;

78 
buf
) {

79 
u°ªam_buf
 *
√xt
 = 
buf
->next;

81 
	`‰ì
(
buf
);

82 
buf
 = 
√xt
;

84 
l
->
hód
 = 
NULL
;

85 
l
->
èû
 = 
NULL
;

86 
l
->
d©a_èû
 = 
NULL
;

87 
	}
}

89 
	$u°ªam_‰ì
(
u°ªam
 *
s
)

91 i‡(
s
->
‰ì
)

92 
s
->
	`‰ì
(s);

94 
	`ulo›_timeout_ˇn˚l
(&
s
->
°©e_ch™ge
);

95 
	`u°ªam_‰ì_buf„rs
(&
s
->
r
);

96 
	`u°ªam_‰ì_buf„rs
(&
s
->
w
);

97 
	}
}

99 
	$u°ªam_°©e_ch™ge_cb
(
ulo›_timeout
 *
t
)

101 
u°ªam
 *
s
 = 
	`c⁄èöî_of
(
t
, u°ªam, 
°©e_ch™ge
);

103 i‡(
s
->
wrôe_îr‹
)

104 
	`u°ªam_‰ì_buf„rs
(&
s
->
w
);

105 i‡(
s
->
nŸify_°©e
)

106 
s
->
	`nŸify_°©e
(s);

107 
	}
}

109 
	$u°ªam_öô_deÁu…s
(
u°ªam
 *
s
)

111 
	#DEFAULT_SET
(
_f
, 
_deÁu…
) \

113 i‡(!
_f
) \

114 
_f
 = 
_deÁu…
; \

115 } 0)

	)

117 
	`DEFAULT_SET
(
s
->
r
.
Æloc
, 
u°ªam_Æloc_deÁu…
);

118 
	`DEFAULT_SET
(
s
->
w
.
Æloc
, 
u°ªam_Æloc_deÁu…
);

120 
	`DEFAULT_SET
(
s
->
r
.
mö_buf„rs
, 1);

121 
	`DEFAULT_SET
(
s
->
r
.
max_buf„rs
, 1);

122 
	`DEFAULT_SET
(
s
->
r
.
buf„r_Àn
, 4096);

124 
	`DEFAULT_SET
(
s
->
w
.
mö_buf„rs
, 2);

125 
	`DEFAULT_SET
(
s
->
w
.
max_buf„rs
, -1);

126 
	`DEFAULT_SET
(
s
->
w
.
buf„r_Àn
, 256);

128 #unde‡
DEFAULT_SET


130 
s
->
°©e_ch™ge
.
cb
 = 
u°ªam_°©e_ch™ge_cb
;

131 
s
->
wrôe_îr‹
 = 
Ál£
;

132 
s
->
eof
 = 
Ál£
;

133 
s
->
eof_wrôe_d⁄e
 = 
Ál£
;

134 
s
->
ªad_blocked
 = 0;

136 
s
->
r
.
buf„rs
 = 0;

137 
s
->
r
.
d©a_byãs
 = 0;

139 
s
->
w
.
buf„rs
 = 0;

140 
s
->
w
.
d©a_byãs
 = 0;

141 
	}
}

143 
boﬁ
 
	$u°ªam_should_move
(
u°ªam_buf_li°
 *
l
, 
u°ªam_buf
 *
buf
, 
Àn
)

145 
maxÀn
;

146 
off£t
;

149 i‡(
buf
->
d©a
 =buf->
hód
)

150  
Ál£
;

152 
maxÀn
 = 
buf
->
íd
 - buf->
hód
;

153 
off£t
 = 
buf
->
d©a
 - buf->
hód
;

156 i‡(
off£t
 > 
maxÀn
 / 2)

157  
åue
;

160 i‡(
buf
->
èû
 - buf->
d©a
 < 32 && 
off£t
 > 
maxÀn
 / 4)

161  
åue
;

164 i‡(
buf
 !
l
->
èû
 || 
	`u°ªam_ˇn_Æloc
(l))

165  
Ál£
;

168  (
buf
->
íd
 - buf->
èû
 < 
Àn
);

169 
	}
}

171 
	$u°ªam_‰ì_buf
(
u°ªam_buf_li°
 *
l
, 
u°ªam_buf
 *
buf
)

173 i‡(
buf
 =
l
->
hód
)

174 
l
->
hód
 = 
buf
->
√xt
;

176 i‡(
buf
 =
l
->
d©a_èû
)

177 
l
->
d©a_èû
 = 
buf
->
√xt
;

179 i‡(
buf
 =
l
->
èû
)

180 
l
->
èû
 = 
NULL
;

182 i‡(--
l
->
buf„rs
 >l->
mö_buf„rs
) {

183 
	`‰ì
(
buf
);

188 
	`u°ªam_öô_buf
(
buf
, buf->
íd
 - buf->
hód
);

189 
	`u°ªam_add_buf
(
l
, 
buf
);

190 
	}
}

192 
	$__u°ªam_£t_ªad_blocked
(
u°ªam
 *
s
, 
vÆ
)

194 
boﬁ
 
ch™ged
 = !!
s
->
ªad_blocked
 !!!
vÆ
;

196 
s
->
ªad_blocked
 = 
vÆ
;

197 i‡(
ch™ged
)

198 
s
->
	`£t_ªad_blocked
(s);

199 
	}
}

201 
	$u°ªam_£t_ªad_blocked
(
u°ªam
 *
s
, 
boﬁ
 
£t
)

203 
vÆ
 = 
s
->
ªad_blocked
 & ~
READ_BLOCKED_USER
;

205 i‡(
£t
)

206 
vÆ
 |
READ_BLOCKED_USER
;

208 
	`__u°ªam_£t_ªad_blocked
(
s
, 
vÆ
);

209 
	}
}

211 
	$u°ªam_c⁄sume
(
u°ªam
 *
s
, 
Àn
)

213 
u°ªam_buf
 *
buf
 = 
s
->
r
.
hód
;

215 i‡(!
Àn
)

218 
s
->
r
.
d©a_byãs
 -
Àn
;

219 i‡(
s
->
r
.
d©a_byãs
 < 0)

220 
	`ab‹t
();

223 
u°ªam_buf
 *
√xt
 = 
buf
->next;

224 
buf_Àn
 = 
buf
->
èû
 - buf->
d©a
;

226 i‡(
Àn
 < 
buf_Àn
) {

227 
buf
->
d©a
 +
Àn
;

231 
Àn
 -
buf_Àn
;

232 
	`u°ªam_‰ì_buf
(&
s
->
r
, 
buf
);

233 
buf
 = 
√xt
;

234 } 
Àn
);

236 
	`__u°ªam_£t_ªad_blocked
(
s
, s->
ªad_blocked
 & ~
READ_BLOCKED_FULL
);

237 
	}
}

239 
	$u°ªam_fixup_°rög
(
u°ªam
 *
s
, 
u°ªam_buf
 *
buf
)

241 i‡(!
s
->
°rög_d©a
)

244 *
buf
->
èû
 = 0;

245 
	}
}

247 
boﬁ
 
	$u°ªam_¥ï¨e_buf
(
u°ªam
 *
s
, 
u°ªam_buf_li°
 *
l
, 
Àn
)

249 
u°ªam_buf
 *
buf
;

251 
buf
 = 
l
->
d©a_èû
;

252 i‡(
buf
) {

253 i‡(
	`u°ªam_should_move
(
l
, 
buf
, 
Àn
)) {

254 
Àn
 = 
buf
->
èû
 - buf->
d©a
;

256 
	`memmove
(
buf
->
hód
, buf->
d©a
, 
Àn
);

257 
buf
->
d©a
 = buf->
hód
;

258 
buf
->
èû
 = buf->
d©a
 + 
Àn
;

260 i‡(
l
 =&
s
->
r
)

261 
	`u°ªam_fixup_°rög
(
s
, 
buf
);

264 i‡(
buf
->
èû
 !buf->
íd
)

265  
åue
;

267 i‡(
buf
->
√xt
) {

268 
l
->
d©a_èû
 = 
buf
->
√xt
;

269  
åue
;

273 i‡(!
	`u°ªam_ˇn_Æloc
(
l
))

274  
Ál£
;

276 i‡(
l
->
	`Æloc
(
s
,Ü) < 0)

277  
Ál£
;

279 
l
->
d©a_èû
 =Ü->
èû
;

280  
åue
;

281 
	}
}

283 *
	$u°ªam_ª£rve
(
u°ªam
 *
s
, 
Àn
, *
maxÀn
)

285 
u°ªam_buf
 *
buf
;

287 i‡(!
	`u°ªam_¥ï¨e_buf
(
s
, &s->
r
, 
Àn
)) {

288 
	`__u°ªam_£t_ªad_blocked
(
s
, s->
ªad_blocked
 | 
READ_BLOCKED_FULL
);

289 *
maxÀn
 = 0;

290  
NULL
;

293 
buf
 = 
s
->
r
.
d©a_èû
;

294 *
maxÀn
 = 
buf
->
íd
 - buf->
èû
;

295  
buf
->
èû
;

296 
	}
}

298 
	$u°ªam_fûl_ªad
(
u°ªam
 *
s
, 
Àn
)

300 
u°ªam_buf
 *
buf
 = 
s
->
r
.
d©a_èû
;

301 
n
 = 
Àn
;

302 
maxÀn
;

304 
s
->
r
.
d©a_byãs
 +
Àn
;

306 i‡(!
buf
)

307 
	`ab‹t
();

309 
maxÀn
 = 
buf
->
íd
 - buf->
èû
;

310 i‡(
Àn
 < 
maxÀn
)

311 
maxÀn
 = 
Àn
;

313 
Àn
 -
maxÀn
;

314 
buf
->
èû
 +
maxÀn
;

315 
	`u°ªam_fixup_°rög
(
s
, 
buf
);

317 
s
->
r
.
d©a_èû
 = 
buf
;

318 
buf
 = buf->
√xt
;

319 } 
Àn
);

321 i‡(
s
->
nŸify_ªad
)

322 
s
->
	`nŸify_ªad
(s, 
n
);

323 
	}
}

325 *
	$u°ªam_gë_ªad_buf
(
u°ªam
 *
s
, *
buÊí
)

327 *
d©a
 = 
NULL
;

328 
Àn
 = 0;

330 i‡(
s
->
r
.
hód
) {

331 
Àn
 = 
s
->
r
.
hód
->
èû
 - s->r.hód->
d©a
;

332 i‡(
Àn
 > 0)

333 
d©a
 = 
s
->
r
.
hód
->data;

336 i‡(
buÊí
)

337 *
buÊí
 = 
Àn
;

339  
d©a
;

340 
	}
}

342 
	$u°ªam_ªad
(
u°ªam
 *
s
, *
buf
, 
buÊí
)

344 *
chunk
;

345 
chunk_Àn
;

346 
Àn
 = 0;

349 
chunk
 = 
	`u°ªam_gë_ªad_buf
(
s
, &
chunk_Àn
);

350 i‡(!
chunk
)

352 i‡(
chunk_Àn
 > 
buÊí
 - 
Àn
)

353 
chunk_Àn
 = 
buÊí
 - 
Àn
;

354 
	`mem˝y
(
buf
 + 
Àn
, 
chunk
, 
chunk_Àn
);

355 
	`u°ªam_c⁄sume
(
s
, 
chunk_Àn
);

356 
Àn
 +
chunk_Àn
;

357 } 
Àn
 < 
buÊí
);

359  
Àn
;

360 
	}
}

362 
	$u°ªam_wrôe_îr‹
(
u°ªam
 *
s
)

364 i‡(!
s
->
wrôe_îr‹
)

365 
	`u°ªam_°©e_ch™ge
(
s
);

366 
s
->
wrôe_îr‹
 = 
åue
;

367 
	}
}

369 
boﬁ
 
	$u°ªam_wrôe_≥ndög
(
u°ªam
 *
s
)

371 
u°ªam_buf
 *
buf
 = 
s
->
w
.
hód
;

372 
wr
 = 0, 
Àn
;

374 i‡(
s
->
wrôe_îr‹
)

375  
Ál£
;

377 
buf
 && 
s
->
w
.
d©a_byãs
) {

378 
u°ªam_buf
 *
√xt
 = 
buf
->next;

379 
maxÀn
 = 
buf
->
èû
 - buf->
d©a
;

381 
Àn
 = 
s
->
	`wrôe
(s, 
buf
->
d©a
, 
maxÀn
, !!buf->
√xt
);

382 i‡(
Àn
 < 0) {

383 
	`u°ªam_wrôe_îr‹
(
s
);

387 i‡(
Àn
 == 0)

390 
wr
 +
Àn
;

391 
s
->
w
.
d©a_byãs
 -
Àn
;

392 i‡(
Àn
 < 
maxÀn
) {

393 
buf
->
d©a
 +
Àn
;

397 
	`u°ªam_‰ì_buf
(&
s
->
w
, 
buf
);

398 
buf
 = 
√xt
;

401 i‡(
s
->
nŸify_wrôe
)

402 
s
->
	`nŸify_wrôe
(s, 
wr
);

404 i‡(
s
->
eof
 && 
wr
 && !s->
w
.
d©a_byãs
)

405 
	`u°ªam_°©e_ch™ge
(
s
);

407  !
s
->
w
.
d©a_byãs
;

408 
	}
}

410 
	$u°ªam_wrôe_buf„ªd
(
u°ªam
 *
s
, c⁄° *
d©a
, 
Àn
, 
wr
)

412 
u°ªam_buf_li°
 *
l
 = &
s
->
w
;

413 
u°ªam_buf
 *
buf
;

414 
maxÀn
;

416 
Àn
) {

417 i‡(!
	`u°ªam_¥ï¨e_buf
(
s
, &s->
w
, 
Àn
))

420 
buf
 = 
l
->
d©a_èû
;

422 
maxÀn
 = 
buf
->
íd
 - buf->
èû
;

423 i‡(
maxÀn
 > 
Àn
)

424 
maxÀn
 = 
Àn
;

426 
	`mem˝y
(
buf
->
èû
, 
d©a
, 
maxÀn
);

427 
buf
->
èû
 +
maxÀn
;

428 
d©a
 +
maxÀn
;

429 
Àn
 -
maxÀn
;

430 
wr
 +
maxÀn
;

431 
l
->
d©a_byãs
 +
maxÀn
;

434  
wr
;

435 
	}
}

437 
	$u°ªam_wrôe
(
u°ªam
 *
s
, c⁄° *
d©a
, 
Àn
, 
boﬁ
 
m‹e
)

439 
u°ªam_buf_li°
 *
l
 = &
s
->
w
;

440 
wr
 = 0;

442 i‡(
s
->
wrôe_îr‹
)

445 i‡(!
l
->
d©a_byãs
) {

446 
wr
 = 
s
->
	`wrôe
(s, 
d©a
, 
Àn
, 
m‹e
);

447 i‡(
wr
 =
Àn
)

448  
wr
;

450 i‡(
wr
 < 0) {

451 
	`u°ªam_wrôe_îr‹
(
s
);

452  
wr
;

455 
d©a
 +
wr
;

456 
Àn
 -
wr
;

459  
	`u°ªam_wrôe_buf„ªd
(
s
, 
d©a
, 
Àn
, 
wr
);

460 
	}
}

462 
	#MAX_STACK_BUFLEN
 256

	)

464 
	$u°ªam_v¥ötf
(
u°ªam
 *
s
, c⁄° *
f‹m©
, 
va_li°
 
¨g
)

466 
u°ªam_buf_li°
 *
l
 = &
s
->
w
;

467 *
buf
;

468 
va_li°
 
¨g2
;

469 
wr
, 
maxÀn
, 
buÊí
;

471 i‡(
s
->
wrôe_îr‹
)

474 i‡(!
l
->
d©a_byãs
) {

475 
buf
 = 
	`Æloˇ
(
MAX_STACK_BUFLEN
);

476 
	`va_c›y
(
¨g2
, 
¨g
);

477 
maxÀn
 = 
	`v¢¥ötf
(
buf
, 
MAX_STACK_BUFLEN
, 
f‹m©
, 
¨g2
);

478 
	`va_íd
(
¨g2
);

479 i‡(
maxÀn
 < 
MAX_STACK_BUFLEN
) {

480 
wr
 = 
s
->
	`wrôe
(s, 
buf
, 
maxÀn
, 
Ál£
);

481 i‡(
wr
 < 0) {

482 
	`u°ªam_wrôe_îr‹
(
s
);

483  
wr
;

485 i‡(
wr
 =
maxÀn
)

486  
wr
;

488 
buf
 +
wr
;

489 
maxÀn
 -
wr
;

490  
	`u°ªam_wrôe_buf„ªd
(
s
, 
buf
, 
maxÀn
, 
wr
);

492 
buf
 = 
	`mÆloc
(
maxÀn
 + 1);

493 
wr
 = 
	`v¢¥ötf
(
buf
, 
maxÀn
 + 1, 
f‹m©
, 
¨g
);

494 
wr
 = 
	`u°ªam_wrôe
(
s
, 
buf
, wr, 
Ál£
);

495 
	`‰ì
(
buf
);

496  
wr
;

500 i‡(!
	`u°ªam_¥ï¨e_buf
(
s
, 
l
, 1))

503 
buf
 = 
l
->
d©a_èû
->
èû
;

504 
buÊí
 = 
l
->
d©a_èû
->
íd
 - 
buf
;

506 
	`va_c›y
(
¨g2
, 
¨g
);

507 
maxÀn
 = 
	`v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
¨g2
);

508 
	`va_íd
(
¨g2
);

510 
wr
 = 
maxÀn
;

511 i‡(
wr
 >
buÊí
)

512 
wr
 = 
buÊí
 - 1;

514 
l
->
d©a_èû
->
èû
 +
wr
;

515 
l
->
d©a_byãs
 +
wr
;

516 i‡(
maxÀn
 < 
buÊí
)

517  
wr
;

519 
buf
 = 
	`mÆloc
(
maxÀn
 + 1);

520 
maxÀn
 = 
	`v¢¥ötf
(
buf
, maxÀ¿+ 1, 
f‹m©
, 
¨g
);

521 
wr
 = 
	`u°ªam_wrôe_buf„ªd
(
s
, 
buf
 + wr, 
maxÀn
 - wr, wr);

522 
	`‰ì
(
buf
);

524  
wr
;

525 
	}
}

527 
	$u°ªam_¥ötf
(
u°ªam
 *
s
, c⁄° *
f‹m©
, ...)

529 
va_li°
 
¨g
;

530 
ªt
;

532 i‡(
s
->
wrôe_îr‹
)

535 
	`va_°¨t
(
¨g
, 
f‹m©
);

536 
ªt
 = 
	`u°ªam_v¥ötf
(
s
, 
f‹m©
, 
¨g
);

537 
	`va_íd
(
¨g
);

539  
ªt
;

540 
	}
}

	@ustream.h

19 #i‚de‡
__USTREAM_H


20 
	#__USTREAM_H


	)

22 
	~<°d¨g.h
>

23 
	~"ulo›.h
"

25 
	gu°ªam
;

26 
	gu°ªam_buf
;

28 
	eªad_blocked_ªas⁄
 {

29 
	mREAD_BLOCKED_USER
 = (1 << 0),

30 
	mREAD_BLOCKED_FULL
 = (1 << 1),

33 
	su°ªam_buf_li°
 {

34 
u°ªam_buf
 *
	mhód
;

35 
u°ªam_buf
 *
	md©a_èû
;

36 
u°ªam_buf
 *
	mèû
;

38 (*
	mÆloc
)(
u°ªam
 *
	ms
, 
u°ªam_buf_li°
 *
	ml
);

40 
	md©a_byãs
;

42 
	mmö_buf„rs
;

43 
	mmax_buf„rs
;

44 
	mbuf„r_Àn
;

46 
	mbuf„rs
;

49 
	su°ªam
 {

50 
u°ªam_buf_li°
 
	mr
, 
	mw
;

51 
ulo›_timeout
 
	m°©e_ch™ge
;

52 
u°ªam
 *
	m√xt
;

60 (*
	mnŸify_ªad
)(
u°ªam
 *
	ms
, 
	mbyãs_√w
);

68 (*
	mnŸify_wrôe
)(
u°ªam
 *
	ms
, 
	mbyãs
);

78 (*
	mnŸify_°©e
)(
u°ªam
 *
	ms
);

88 (*
	mwrôe
)(
u°ªam
 *
	ms
, c⁄° *
	mbuf
, 
	mÀn
, 
boﬁ
 
	mm‹e
);

94 (*
	m‰ì
)(
u°ªam
 *
	ms
);

101 (*
	m£t_ªad_blocked
)(
u°ªam
 *
	ms
);

109 
boﬁ
 (*
pﬁl
)(
u°ªam
 *
	ms
);

115 
boﬁ
 
	m°rög_d©a
;

116 
boﬁ
 
	mwrôe_îr‹
;

117 
boﬁ
 
	meof
, 
	meof_wrôe_d⁄e
;

119 
ªad_blocked_ªas⁄
 
	mªad_blocked
;

122 
	su°ªam_fd
 {

123 
u°ªam
 
	m°ªam
;

124 
ulo›_fd
 
	mfd
;

127 
	su°ªam_buf
 {

128 
u°ªam_buf
 *
	m√xt
;

130 *
	md©a
;

131 *
	mèû
;

132 *
	míd
;

134 
	mhód
[];

138 
u°ªam_fd_öô
(
u°ªam_fd
 *
s
, 
fd
);

141 
u°ªam_‰ì
(
u°ªam
 *
s
);

144 
u°ªam_c⁄sume
(
u°ªam
 *
s
, 
Àn
);

150 
u°ªam_ªad
(
u°ªam
 *
s
, *
buf
, 
buÊí
);

152 
u°ªam_wrôe
(
u°ªam
 *
s
, c⁄° *
buf
, 
Àn
, 
boﬁ
 
m‹e
);

153 
u°ªam_¥ötf
(
u°ªam
 *
s
, c⁄° *
f‹m©
, ...);

154 
u°ªam_v¥ötf
(
u°ªam
 *
s
, c⁄° *
f‹m©
, 
va_li°
 
¨g
);

157 *
u°ªam_gë_ªad_buf
(
u°ªam
 *
s
, *
buÊí
);

164 
u°ªam_£t_ªad_blocked
(
u°ªam
 *
s
, 
boﬁ
 
£t
);

166 
ölöe
 
boﬁ
 
	$u°ªam_ªad_blocked
(
u°ªam
 *
s
)

168  !!(
s
->
ªad_blocked
 & 
READ_BLOCKED_USER
);

169 
	}
}

171 
ölöe
 
	$u°ªam_≥ndög_d©a
(
u°ªam
 *
s
, 
boﬁ
 
wrôe
)

173 
u°ªam_buf_li°
 *
b
 = 
wrôe
 ? &
s
->
w
 : &s->
r
;

174  
b
->
d©a_byãs
;

175 
	}
}

177 
ölöe
 
boﬁ
 
	$u°ªam_ªad_buf_fuŒ
(
u°ªam
 *
s
)

179 
u°ªam_buf
 *
buf
 = 
s
->
r
.
d©a_èû
;

180  
buf
 && buf->
d©a
 =buf->
hód
 && buf->
èû
 =buf->
íd
 &&

181 
s
->
r
.
buf„rs
 =s->r.
max_buf„rs
;

182 
	}
}

187 
u°ªam_öô_deÁu…s
(
u°ªam
 *
s
);

195 *
u°ªam_ª£rve
(
u°ªam
 *
s
, 
Àn
, *
maxÀn
);

198 
u°ªam_fûl_ªad
(
u°ªam
 *
s
, 
Àn
);

204 
boﬁ
 
u°ªam_wrôe_≥ndög
(
u°ªam
 *
s
);

206 
ölöe
 
	$u°ªam_°©e_ch™ge
(
u°ªam
 *
s
)

208 
	`ulo›_timeout_£t
(&
s
->
°©e_ch™ge
, 0);

209 
	}
}

211 
ölöe
 
boﬁ
 
	$u°ªam_pﬁl
(
u°ªam
 *
s
)

213 i‡(!
s
->
pﬁl
)

214  
Ál£
;

216  
s
->
	`pﬁl
(s);

217 
	}
}

	@utils.c

19 
	~"utûs.h
"

20 
	~<°d¨g.h
>

21 
	~<°dlib.h
>

22 
	~<°dio.h
>

24 
	#f‹óch_¨g
(
_¨g
, 
_addr
, 
_Àn
, 
_fú°_addr
, 
_fú°_Àn
) \

25 
_addr
 = (
_fú°_addr
), 
_Àn
 = (
_fú°_Àn
); \

26 
_addr
; \

27 
_addr
 = 
	`va_¨g
(
_¨g
, **), 
_Àn
 = _add∏? va_¨g(_¨g, 
size_t
Ë: 0)

	)

29 *
	$__ˇŒoc_a
(
size_t
 
Àn
, ...)

31 
va_li°
 
≠
, 
≠1
;

32 *
ªt
;

33 **
cur_addr
;

34 
size_t
 
cur_Àn
;

35 
Æloc_Àn
 = 0;

36 *
±r
;

38 
	`va_°¨t
(
≠
, 
Àn
);

40 
	`va_c›y
(
≠1
, 
≠
);

41 
	`f‹óch_¨g
(
≠1
, 
cur_addr
, 
cur_Àn
, &
ªt
, 
Àn
)

42 
Æloc_Àn
 +
cur_Àn
;

43 
	`va_íd
(
≠1
);

45 
±r
 = 
	`ˇŒoc
(1, 
Æloc_Àn
);

46 
Æloc_Àn
 = 0;

47 
	`f‹óch_¨g
(
≠
, 
cur_addr
, 
cur_Àn
, &
ªt
, 
Àn
) {

48 *
cur_addr
 = &
±r
[
Æloc_Àn
];

49 
Æloc_Àn
 +
cur_Àn
;

51 
	`va_íd
(
≠
);

53  
ªt
;

54 
	}
}

56 #ifde‡
__APPLE__


57 
	~<mach/mach_ho°.h
>

58 
	~<mach/mach_p‹t.h
>

59 
	~<mach/mach_öô.h
>

60 
	~<mach/˛ock.h
>

62 
˛ock_£rv_t
 
	g˛ock_ªÆtime
;

63 
˛ock_£rv_t
 
	g˛ock_m⁄Ÿ⁄ic
;

65 
__c⁄°ru˘‹
 
	$˛ock_«me_öô
()

67 
mach_p‹t_t
 
ho°_£lf
 = 
	`mach_ho°_£lf
();

69 
	`ho°_gë_˛ock_£rvi˚
(
ho°_£lf
, 
CLOCK_REALTIME
, &
˛ock_ªÆtime
);

70 
	`ho°_gë_˛ock_£rvi˚
(
ho°_£lf
, 
CLOCK_MONOTONIC
, &
˛ock_m⁄Ÿ⁄ic
);

71 
	}
}

73 
__de°ru˘‹
 
	$˛ock_«me_dóŒoc
()

75 
mach_p‹t_t
 
£lf
 = 
	`mach_èsk_£lf
();

77 
	`mach_p‹t_dóŒoˇã
(
£lf
, 
˛ock_ªÆtime
);

78 
	`mach_p‹t_dóŒoˇã
(
£lf
, 
˛ock_m⁄Ÿ⁄ic
);

79 
	}
}

81 
	$˛ock_gëtime
(
ty≥
, 
time•ec
 *
tv
)

83 
ªtvÆ
 = -1;

84 
mach_time•ec_t
 
mts
;

86 
ty≥
) {

87 
CLOCK_REALTIME
:

88 
ªtvÆ
 = 
	`˛ock_gë_time
(
˛ock_ªÆtime
, &
mts
);

90 
CLOCK_MONOTONIC
:

91 
ªtvÆ
 = 
	`˛ock_gë_time
(
˛ock_m⁄Ÿ⁄ic
, &
mts
);

94 
out
;

97 
tv
->
tv_£c
 = 
mts
.tv_sec;

98 
tv
->
tv_n£c
 = 
mts
.tv_nsec;

99 
out
:

100  
ªtvÆ
;

101 
	}
}

	@utils.h

19 #i‚de‡
__LIBUBOX_UTILS_H


20 
	#__LIBUBOX_UTILS_H


	)

22 
	~<sys/ty≥s.h
>

23 
	~<sys/time.h
>

24 
	~<°döt.h
>

25 
	~<°dboﬁ.h
>

26 
	~<time.h
>

37 
	#ˇŒoc_a
(
Àn
, ...Ë
	`__ˇŒoc_a
÷í, ##
__VA_ARGS__
, 
NULL
)

	)

39 *
__ˇŒoc_a
(
size_t
 
Àn
, ...);

41 #i‚de‡
ARRAY_SIZE


42 
	#ARRAY_SIZE
(
¨r
Ë(◊ºË/ (◊º)[0]))

	)

45 
	#__BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()([1 - 2*!!(c⁄dôi⁄)]))

	)

47 #ifde‡
__OPTIMIZE__


48 
__BUILD_BUG_ON_CONDITION_FAILED
;

49 
	#BUILD_BUG_ON
(
c⁄dôi⁄
) \

51 
	`__BUILD_BUG_ON
(
c⁄dôi⁄
); \

52 i‡(
c⁄dôi⁄
) \

53 
__BUILD_BUG_ON_CONDITION_FAILED
 = 1; \

54 } 0)

	)

56 
	#BUILD_BUG_ON
 
__BUILD_BUG_ON


	)

59 #ifde‡
__APPLE__


61 
	~<mach/˛ock_ty≥s.h
>

62 
	#CLOCK_REALTIME
 
CALENDAR_CLOCK


	)

63 
	#CLOCK_MONOTONIC
 
SYSTEM_CLOCK


	)

65 
˛ock_gëtime
(
ty≥
, 
time•ec
 *
tv
);

69 #ifde‡
__GNUC__


70 
	#_GNUC_MIN_VER
(
maj
, 
mö
Ë(((
__GNUC__
 << 8Ë+ 
__GNUC_MINOR__
Ë>(((majË<< 8Ë+ (mö)))

	)

72 
	#_GNUC_MIN_VER
(
maj
, 
mö
Ë0

	)

75 #i‡
deföed
(
__löux__
Ë|| deföed(
__CYGWIN__
)

76 
	~<byãsw≠.h
>

77 
	~<ídün.h
>

79 #ñi‡
deföed
(
__APPLE__
)

80 
	~<machöe/ídün.h
>

81 
	~<machöe/byã_‹dî.h
>

82 
	#bsw≠_32
(
x
Ë
	`OSSw≠I¡32
(x)

	)

83 
	#bsw≠_64
(
x
Ë
	`OSSw≠I¡64
(x)

	)

84 #ñi‡
deföed
(
__FªeBSD__
)

85 
	~<sys/ídün.h
>

86 
	#bsw≠_32
(
x
Ë
	`bsw≠32
(x)

	)

87 
	#bsw≠_64
(
x
Ë
	`bsw≠64
(x)

	)

89 
	~<machöe/ídün.h
>

90 
	#bsw≠_32
(
x
Ë
	`sw≠32
(x)

	)

91 
	#bsw≠_64
(
x
Ë
	`sw≠64
(x)

	)

94 #i‚de‡
__BYTE_ORDER


95 
	#__BYTE_ORDER
 
BYTE_ORDER


	)

97 #i‚de‡
__BIG_ENDIAN


98 
	#__BIG_ENDIAN
 
BIG_ENDIAN


	)

100 #i‚de‡
__LITTLE_ENDIAN


101 
	#__LITTLE_ENDIAN
 
LITTLE_ENDIAN


	)

104 
ölöe
 
uöt16_t
 
	$__u_bsw≠16
(
uöt16_t
 
vÆ
)

106  ((
vÆ
 >> 8) & 0xffu) | ((val & 0xffu) << 8);

107 
	}
}

109 #i‡
_GNUC_MIN_VER
(4, 2)

110 
	#__u_bsw≠32
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

111 
	#__u_bsw≠64
(
x
Ë
	`__buûtö_bsw≠64
(x)

	)

113 
	#__u_bsw≠32
(
x
Ë
	`bsw≠_32
(x)

	)

114 
	#__u_bsw≠64
(
x
Ë
	`bsw≠_64
(x)

	)

117 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


119 
	#˝u_to_be64
(
x
Ë
	`__u_bsw≠64
(x)

	)

120 
	#˝u_to_be32
(
x
Ë
	`__u_bsw≠32
(x)

	)

121 
	#˝u_to_be16
(
x
Ë
	`__u_bsw≠16
((
uöt16_t
Ë(x))

	)

123 
	#be64_to_˝u
(
x
Ë
	`__u_bsw≠64
(x)

	)

124 
	#be32_to_˝u
(
x
Ë
	`__u_bsw≠32
(x)

	)

125 
	#be16_to_˝u
(
x
Ë
	`__u_bsw≠16
((
uöt16_t
Ë(x))

	)

127 
	#˝u_to_À64
(
x
Ë(x)

	)

128 
	#˝u_to_À32
(
x
Ë(x)

	)

129 
	#˝u_to_À16
(
x
Ë(x)

	)

131 
	#À64_to_˝u
(
x
Ë(x)

	)

132 
	#À32_to_˝u
(
x
Ë(x)

	)

133 
	#À16_to_˝u
(
x
Ë(x)

	)

137 
	#˝u_to_À64
(
x
Ë
	`__u_bsw≠64
(x)

	)

138 
	#˝u_to_À32
(
x
Ë
	`__u_bsw≠32
(x)

	)

139 
	#˝u_to_À16
(
x
Ë
	`__u_bsw≠16
((
uöt16_t
Ë(x))

	)

141 
	#À64_to_˝u
(
x
Ë
	`__u_bsw≠64
(x)

	)

142 
	#À32_to_˝u
(
x
Ë
	`__u_bsw≠32
(x)

	)

143 
	#À16_to_˝u
(
x
Ë
	`__u_bsw≠16
((
uöt16_t
Ë(x))

	)

145 
	#˝u_to_be64
(
x
Ë(x)

	)

146 
	#˝u_to_be32
(
x
Ë(x)

	)

147 
	#˝u_to_be16
(
x
Ë(x)

	)

149 
	#be64_to_˝u
(
x
Ë(x)

	)

150 
	#be32_to_˝u
(
x
Ë(x)

	)

151 
	#be16_to_˝u
(
x
Ë(x)

	)

155 #i‚de‡
__∑cked


156 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

159 #i‚de‡
__c⁄°ru˘‹


160 
	#__c⁄°ru˘‹
 
	`__©åibuã__
((
c⁄°ru˘‹
))

	)

163 #i‚de‡
__de°ru˘‹


164 
	#__de°ru˘‹
 
	`__©åibuã__
((
de°ru˘‹
))

	)

167 #i‚de‡
__hiddí


168 
	#__hiddí
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

171 #i‚de‡
BITS_PER_LONG


172 
	#BITS_PER_LONG
 (8 * ())

	)

175 
	#BITFIELD_SIZE
(
_n
Ë(((_nË+ (
BITS_PER_LONG
 - 1)Ë/ BITS_PER_LONG)

	)

177 
ölöe
 
	$bôfõld_£t
(*
bôs
, 
bô
)

179 
bôs
[
bô
 / 
BITS_PER_LONG
] |= (1UL << (bit % BITS_PER_LONG));

180 
	}
}

182 
ölöe
 
boﬁ
 
	$bôfõld_ã°
(*
bôs
, 
bô
)

184  !!(
bôs
[
bô
 / 
BITS_PER_LONG
] & (1UL << (bit % BITS_PER_LONG)));

185 
	}
}

187 
b64_ícode
(c⁄° *
§c
, 
size_t
 
§c_Àn
,

188 *
de°
, 
size_t
 
de°_Àn
);

190 
b64_decode
(c⁄° *
§c
, *
de°
, 
size_t
 
de°_Àn
);

192 
	#B64_ENCODE_LEN
(
_Àn
Ë((((_ÀnË+ 2Ë/ 3Ë* 4 + 1)

	)

193 
	#B64_DECODE_LEN
(
_Àn
Ë(((_ÀnË/ 4Ë* 3 + 1)

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/arpa/nameser.h

52 #i‚de‡
_ARPA_NAMESER_H_


53 
	#_ARPA_NAMESER_H_


	)

57 
	#BIND_4_COMPAT


	)

59 
	~<sys/∑øm.h
>

60 #i‡(!
deföed
(
BSD
)) || (BSD < 199306)

61 
	~<sys/bôy≥s.h
>

63 
	~<sys/ty≥s.h
>

65 
	~<sys/cdefs.h
>

75 
	#__NAMESER
 19991006

	)

79 
	#NS_PACKETSZ
 512

	)

80 
	#NS_MAXDNAME
 1025

	)

81 
	#NS_MAXMSG
 65535

	)

82 
	#NS_MAXCDNAME
 255

	)

83 
	#NS_MAXLABEL
 63

	)

84 
	#NS_HFIXEDSZ
 12

	)

85 
	#NS_QFIXEDSZ
 4

	)

86 
	#NS_RRFIXEDSZ
 10

	)

87 
	#NS_INT32SZ
 4

	)

88 
	#NS_INT16SZ
 2

	)

89 
	#NS_INT8SZ
 1

	)

90 
	#NS_INADDRSZ
 4

	)

91 
	#NS_IN6ADDRSZ
 16

	)

92 
	#NS_CMPRSFLGS
 0xc0

	)

93 
	#NS_DEFAULTPORT
 53

	)

98 
	e__ns_£˘
 {

99 
	mns_s_qd
 = 0,

100 
	mns_s_zn
 = 0,

101 
	mns_s_™
 = 1,

102 
	mns_s_¥
 = 1,

103 
	mns_s_ns
 = 2,

104 
	mns_s_ud
 = 2,

105 
	mns_s_¨
 = 3,

106 
	mns_s_max
 = 4

107 } 
	tns_£˘
;

114 
	s__ns_msg
 {

115 c⁄° 
u_ch¨
 *
	m_msg
, *
	m_eom
;

116 
u_öt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

117 c⁄° 
u_ch¨
 *
	m_£˘i⁄s
[
ns_s_max
];

118 
ns_£˘
 
	m_£˘
;

119 
	m_ºnum
;

120 c⁄° 
u_ch¨
 *
	m_msg_±r
;

121 } 
	tns_msg
;

124 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

125 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

129 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

130 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

131 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

132 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

133 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

138 
	s__ns_º
 {

139 
	m«me
[
NS_MAXDNAME
];

140 
u_öt16_t
 
	mty≥
;

141 
u_öt16_t
 
	mº_˛ass
;

142 
u_öt32_t
 
	mâl
;

143 
u_öt16_t
 
	mrdÀngth
;

144 c⁄° 
u_ch¨
 * 
	mrd©a
;

145 } 
	tns_º
;

148 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

149 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

150 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

151 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

152 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

153 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

160 
	e__ns_Êag
 {

161 
	mns_f_qr
,

162 
	mns_f_›code
,

163 
	mns_f_Ø
,

164 
	mns_f_tc
,

165 
	mns_f_rd
,

166 
	mns_f_ø
,

167 
	mns_f_z
,

168 
	mns_f_ad
,

169 
	mns_f_cd
,

170 
	mns_f_rcode
,

171 
	mns_f_max


172 } 
	tns_Êag
;

177 
	e__ns_›code
 {

178 
	mns_o_quîy
 = 0,

179 
	mns_o_iquîy
 = 1,

180 
	mns_o_°©us
 = 2,

182 
	mns_o_nŸify
 = 4,

183 
	mns_o_upd©e
 = 5,

184 
	mns_o_max
 = 6

185 } 
	tns_›code
;

190 
	e__ns_rcode
 {

191 
	mns_r_n€º‹
 = 0,

192 
	mns_r_f‹mîr
 = 1,

193 
	mns_r_£rvÁû
 = 2,

194 
	mns_r_nxdomaö
 = 3,

195 
	mns_r_nŸim∂
 = 4,

196 
	mns_r_ªfu£d
 = 5,

198 
	mns_r_yxdomaö
 = 6,

199 
	mns_r_yxº£t
 = 7,

200 
	mns_r_nxº£t
 = 8,

201 
	mns_r_nŸauth
 = 9,

202 
	mns_r_nŸz⁄e
 = 10,

203 
	mns_r_max
 = 11,

205 
	mns_r_badvîs
 = 16,

207 
	mns_r_badsig
 = 16,

208 
	mns_r_badkey
 = 17,

209 
	mns_r_badtime
 = 18

210 } 
	tns_rcode
;

213 
	e__ns_upd©e_›î©i⁄
 {

214 
	mns_u›_dñëe
 = 0,

215 
	mns_u›_add
 = 1,

216 
	mns_u›_max
 = 2

217 } 
	tns_upd©e_›î©i⁄
;

222 
	sns_tsig_key
 {

223 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

224 *
	md©a
;

225 
	mÀn
;

227 
ns_tsig_key
 
	tns_tsig_key
;

232 
	sns_t˝_tsig_°©e
 {

233 
	mcou¡î
;

234 
d°_key
 *
	mkey
;

235 *
	m˘x
;

236 
	msig
[
NS_PACKETSZ
];

237 
	msigÀn
;

239 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

241 
	#NS_TSIG_FUDGE
 300

	)

242 
	#NS_TSIG_TCP_COUNT
 100

	)

243 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

245 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

246 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

247 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

252 
	e__ns_ty≥
 {

253 
	mns_t_övÆid
 = 0,

254 
	mns_t_a
 = 1,

255 
	mns_t_ns
 = 2,

256 
	mns_t_md
 = 3,

257 
	mns_t_mf
 = 4,

258 
	mns_t_˙ame
 = 5,

259 
	mns_t_sﬂ
 = 6,

260 
	mns_t_mb
 = 7,

261 
	mns_t_mg
 = 8,

262 
	mns_t_mr
 = 9,

263 
	mns_t_nuŒ
 = 10,

264 
	mns_t_wks
 = 11,

265 
	mns_t_±r
 = 12,

266 
	mns_t_höfo
 = 13,

267 
	mns_t_möfo
 = 14,

268 
	mns_t_mx
 = 15,

269 
	mns_t_txt
 = 16,

270 
	mns_t_Ω
 = 17,

271 
	mns_t_afsdb
 = 18,

272 
	mns_t_x25
 = 19,

273 
	mns_t_isdn
 = 20,

274 
	mns_t_π
 = 21,

275 
	mns_t_nßp
 = 22,

276 
	mns_t_nßp_±r
 = 23,

277 
	mns_t_sig
 = 24,

278 
	mns_t_key
 = 25,

279 
	mns_t_px
 = 26,

280 
	mns_t_gpos
 = 27,

281 
	mns_t_ØØ
 = 28,

282 
	mns_t_loc
 = 29,

283 
	mns_t_nxt
 = 30,

284 
	mns_t_eid
 = 31,

285 
	mns_t_nimloc
 = 32,

286 
	mns_t_§v
 = 33,

287 
	mns_t_©ma
 = 34,

288 
	mns_t_«±r
 = 35,

289 
	mns_t_kx
 = 36,

290 
	mns_t_˚π
 = 37,

291 
	mns_t_a6
 = 38,

292 
	mns_t_d«me
 = 39,

293 
	mns_t_sök
 = 40,

294 
	mns_t_›t
 = 41,

295 
	mns_t_≠l
 = 42,

296 
	mns_t_tkey
 = 249,

297 
	mns_t_tsig
 = 250,

298 
	mns_t_ix‰
 = 251,

299 
	mns_t_ax‰
 = 252,

300 
	mns_t_maûb
 = 253,

301 
	mns_t_maûa
 = 254,

302 
	mns_t_™y
 = 255,

303 
	mns_t_zx‰
 = 256,

304 
	mns_t_max
 = 65536

305 } 
	tns_ty≥
;

308 
	#ns_t_qt_p
(
t
Ë(
	`ns_t_x‰_p
—Ë|| (tË=
ns_t_™y
 || \

309 (
t
Ë=
ns_t_maûb
 || (tË=
ns_t_maûa
)

	)

311 
	#ns_t_mº_p
(
t
Ë(—Ë=
ns_t_tsig
 || (tË=
ns_t_›t
)

	)

313 
	#ns_t_º_p
(
t
Ë(!
	`ns_t_qt_p
—Ë&& !
	`ns_t_mº_p
—))

	)

314 
	#ns_t_udp_p
(
t
Ë(—Ë!
ns_t_ax‰
 && (tË!
ns_t_zx‰
)

	)

315 
	#ns_t_x‰_p
(
t
Ë(—Ë=
ns_t_ax‰
 || (tË=
ns_t_ix‰
 || \

316 (
t
Ë=
ns_t_zx‰
)

	)

321 
	e__ns_˛ass
 {

322 
	mns_c_övÆid
 = 0,

323 
	mns_c_ö
 = 1,

324 
	mns_c_2
 = 2,

325 
	mns_c_chaos
 = 3,

326 
	mns_c_hs
 = 4,

328 
	mns_c_n⁄e
 = 254,

329 
	mns_c_™y
 = 255,

330 
	mns_c_max
 = 65536

331 } 
	tns_˛ass
;

335 
	e__ns_key_ty≥s
 {

336 
	mns_kt_rß
 = 1,

337 
	mns_kt_dh
 = 2,

338 
	mns_kt_dß
 = 3,

339 
	mns_kt_¥iv©e
 = 254

340 } 
	tns_key_ty≥s
;

342 
	e__ns_˚π_ty≥s
 {

343 
	m˚π_t_pkix
 = 1,

344 
	m˚π_t_•ki
 = 2,

345 
	m˚π_t_pgp
 = 3,

346 
	m˚π_t_uæ
 = 253,

347 
	m˚π_t_oid
 = 254

348 } 
	tns_˚π_ty≥s
;

351 
	#NS_KEY_TYPEMASK
 0xC000

	)

352 
	#NS_KEY_TYPE_AUTH_CONF
 0x0000

	)

353 
	#NS_KEY_TYPE_CONF_ONLY
 0x8000

	)

354 
	#NS_KEY_TYPE_AUTH_ONLY
 0x4000

	)

355 
	#NS_KEY_TYPE_NO_KEY
 0xC000

	)

357 
	#NS_KEY_NO_AUTH
 0x8000

	)

358 
	#NS_KEY_NO_CONF
 0x4000

	)

359 
	#NS_KEY_RESERVED2
 0x2000

	)

360 
	#NS_KEY_EXTENDED_FLAGS
 0x1000

	)

361 
	#NS_KEY_RESERVED4
 0x0800

	)

362 
	#NS_KEY_RESERVED5
 0x0400

	)

363 
	#NS_KEY_NAME_TYPE
 0x0300

	)

364 
	#NS_KEY_NAME_USER
 0x0000

	)

365 
	#NS_KEY_NAME_ENTITY
 0x0200

	)

366 
	#NS_KEY_NAME_ZONE
 0x0100

	)

367 
	#NS_KEY_NAME_RESERVED
 0x0300

	)

368 
	#NS_KEY_RESERVED8
 0x0080

	)

369 
	#NS_KEY_RESERVED9
 0x0040

	)

370 
	#NS_KEY_RESERVED10
 0x0020

	)

371 
	#NS_KEY_RESERVED11
 0x0010

	)

372 
	#NS_KEY_SIGNATORYMASK
 0x000F

	)

373 
	#NS_KEY_RESERVED_BITMASK
 ( 
NS_KEY_RESERVED2
 | \

374 
NS_KEY_RESERVED4
 | \

375 
NS_KEY_RESERVED5
 | \

376 
NS_KEY_RESERVED8
 | \

377 
NS_KEY_RESERVED9
 | \

378 
NS_KEY_RESERVED10
 | \

379 
NS_KEY_RESERVED11
 )

	)

380 
	#NS_KEY_RESERVED_BITMASK2
 0xFFFF

	)

382 
	#NS_ALG_MD5RSA
 1

	)

383 
	#NS_ALG_DH
 2

	)

384 
	#NS_ALG_DSA
 3

	)

385 
	#NS_ALG_DSS
 
NS_ALG_DSA


	)

386 
	#NS_ALG_EXPIRE_ONLY
 253

	)

387 
	#NS_ALG_PRIVATE_OID
 254

	)

390 
	#NS_KEY_PROT_TLS
 1

	)

391 
	#NS_KEY_PROT_EMAIL
 2

	)

392 
	#NS_KEY_PROT_DNSSEC
 3

	)

393 
	#NS_KEY_PROT_IPSEC
 4

	)

394 
	#NS_KEY_PROT_ANY
 255

	)

397 
	#NS_MD5RSA_MIN_BITS
 512

	)

398 
	#NS_MD5RSA_MAX_BITS
 4096

	)

400 
	#NS_MD5RSA_MAX_BYTES
 ((
NS_MD5RSA_MAX_BITS
+7/8)*2+3)

	)

402 
	#NS_MD5RSA_MAX_BASE64
 (((
NS_MD5RSA_MAX_BYTES
+2)/3)*4)

	)

403 
	#NS_MD5RSA_MIN_SIZE
 ((
NS_MD5RSA_MIN_BITS
+7)/8)

	)

404 
	#NS_MD5RSA_MAX_SIZE
 ((
NS_MD5RSA_MAX_BITS
+7)/8)

	)

406 
	#NS_DSA_SIG_SIZE
 41

	)

407 
	#NS_DSA_MIN_SIZE
 213

	)

408 
	#NS_DSA_MAX_BYTES
 405

	)

411 
	#NS_SIG_TYPE
 0

	)

412 
	#NS_SIG_ALG
 2

	)

413 
	#NS_SIG_LABELS
 3

	)

414 
	#NS_SIG_OTTL
 4

	)

415 
	#NS_SIG_EXPIR
 8

	)

416 
	#NS_SIG_SIGNED
 12

	)

417 
	#NS_SIG_FOOT
 16

	)

418 
	#NS_SIG_SIGNER
 18

	)

420 
	#NS_NXT_BITS
 8

	)

421 
	#NS_NXT_BIT_SET
–
n
,
p
Ë’[“)/
NS_NXT_BITS
] |(0x80>>(“)%NS_NXT_BITS)))

	)

422 
	#NS_NXT_BIT_CLEAR
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] &~(0x80>>(“)%NS_NXT_BITS)))

	)

423 
	#NS_NXT_BIT_ISSET
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] & (0x80>>(“)%NS_NXT_BITS)))

	)

424 
	#NS_NXT_MAX
 127

	)

429 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

430 
	#NS_OPT_NSID
 3

	)

435 
	#NS_GET16
(
s
, 
˝
) do { \

436 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

437 (
s
Ë((
u_öt16_t
)
t_˝
[0] << 8) \

438 | ((
u_öt16_t
)
t_˝
[1]) \

440 (
˝
Ë+
NS_INT16SZ
; \

441 } 0)

	)

443 
	#NS_GET32
(
l
, 
˝
) do { \

444 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

445 (
l
Ë((
u_öt32_t
)
t_˝
[0] << 24) \

446 | ((
u_öt32_t
)
t_˝
[1] << 16) \

447 | ((
u_öt32_t
)
t_˝
[2] << 8) \

448 | ((
u_öt32_t
)
t_˝
[3]) \

450 (
˝
Ë+
NS_INT32SZ
; \

451 } 0)

	)

453 
	#NS_PUT16
(
s
, 
˝
) do { \

454 
u_öt16_t
 
t_s
 = (u_öt16_t)(
s
); \

455 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

456 *
t_˝
++ = 
t_s
 >> 8; \

457 *
t_˝
 = 
t_s
; \

458 (
˝
Ë+
NS_INT16SZ
; \

459 } 0)

	)

461 
	#NS_PUT32
(
l
, 
˝
) do { \

462 
u_öt32_t
 
t_l
 = (u_öt32_t)(
l
); \

463 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

464 *
t_˝
++ = 
t_l
 >> 24; \

465 *
t_˝
++ = 
t_l
 >> 16; \

466 *
t_˝
++ = 
t_l
 >> 8; \

467 *
t_˝
 = 
t_l
; \

468 (
˝
Ë+
NS_INT32SZ
; \

469 } 0)

	)

471 
__BEGIN_DECLS


472 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

473 
u_öt
 
	$ns_gë16
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

474 
u_l⁄g
 
	$ns_gë32
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

475 
	$ns_put16
 (
u_öt
, 
u_ch¨
 *Ë
__THROW
;

476 
	$ns_put32
 (
u_l⁄g
, 
u_ch¨
 *Ë
__THROW
;

477 
	$ns_öô∑r£
 (c⁄° 
u_ch¨
 *, , 
ns_msg
 *Ë
__THROW
;

478 
	$ns_skùº
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
ns_£˘
, )

479 
__THROW
;

480 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

481 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

482 c⁄° *, c⁄° *, *, 
size_t
)

483 
__THROW
;

484 
	$ns_•röårf
 (c⁄° 
u_ch¨
 *, 
size_t
, const *,

485 
ns_˛ass
, 
ns_ty≥
, 
u_l⁄g
, c⁄° 
u_ch¨
 *,

486 
size_t
, const *, const *,

487 *, 
size_t
Ë
__THROW
;

488 
	$ns_f‹m©_âl
 (
u_l⁄g
, *, 
size_t
Ë
__THROW
;

489 
	$ns_∑r£_âl
 (c⁄° *, 
u_l⁄g
 *Ë
__THROW
;

490 
u_öt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

491 
	$ns_«me_¡ﬁ
 (c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

492 
	$ns_«me_¡›
 (c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

493 
	$ns_«me_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

494 
	$ns_«me_u≈ack
 (c⁄° 
u_ch¨
 *, const u_char *,

495 c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

496 
	$ns_«me_∑ck
 (c⁄° 
u_ch¨
 *, u_char *, ,

497 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

498 
	$ns_«me_uncom¥ess
 (c⁄° 
u_ch¨
 *, const u_char *,

499 c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

500 
	$ns_«me_com¥ess
 (c⁄° *, 
u_ch¨
 *, 
size_t
,

501 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

502 
	$ns_«me_skù
 (c⁄° 
u_ch¨
 **, c⁄° u_ch¨ *Ë
__THROW
;

503 
	$ns_«me_rﬁlback
 (c⁄° 
u_ch¨
 *, const u_char **,

504 c⁄° 
u_ch¨
 **Ë
__THROW
;

505 
	$ns_sign
 (
u_ch¨
 *, *, , , *,

506 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
Ë
__THROW
;

507 
	$ns_sign2
 (
u_ch¨
 *, *, , , *,

508 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
,

509 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

510 
	$ns_sign_t˝
 (
u_ch¨
 *, *, , ,

511 
ns_t˝_tsig_°©e
 *, Ë
__THROW
;

512 
	$ns_sign_t˝2
 (
u_ch¨
 *, *, , ,

513 
ns_t˝_tsig_°©e
 *, ,

514 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

515 
	$ns_sign_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

516 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

517 
u_ch¨
 *
	$ns_föd_tsig
 (
u_ch¨
 *, u_ch¨ *Ë
__THROW
;

518 
	$ns_vîify
 (
u_ch¨
 *, *, *, const u_char *, ,

519 
u_ch¨
 *, *, 
time_t
 *, Ë
__THROW
;

520 
	$ns_vîify_t˝
 (
u_ch¨
 *, *, 
ns_t˝_tsig_°©e
 *, )

521 
__THROW
;

522 
	$ns_vîify_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

523 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

524 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

525 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

526 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

527 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

528 
__END_DECLS


530 #ifde‡
BIND_4_COMPAT


531 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/byteswap.h

18 #i‚de‡
_BYTESWAP_H


19 
	#_BYTESWAP_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/byãsw≠.h
>

31 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

34 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

39 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

40 
	#BPF_LD
 0x00

	)

41 
	#BPF_LDX
 0x01

	)

42 
	#BPF_ST
 0x02

	)

43 
	#BPF_STX
 0x03

	)

44 
	#BPF_ALU
 0x04

	)

45 
	#BPF_JMP
 0x05

	)

46 
	#BPF_RET
 0x06

	)

47 
	#BPF_MISC
 0x07

	)

50 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

51 
	#BPF_W
 0x00

	)

52 
	#BPF_H
 0x08

	)

53 
	#BPF_B
 0x10

	)

54 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

55 
	#BPF_IMM
 0x00

	)

56 
	#BPF_ABS
 0x20

	)

57 
	#BPF_IND
 0x40

	)

58 
	#BPF_MEM
 0x60

	)

59 
	#BPF_LEN
 0x80

	)

60 
	#BPF_MSH
 0xa0

	)

63 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

64 
	#BPF_ADD
 0x00

	)

65 
	#BPF_SUB
 0x10

	)

66 
	#BPF_MUL
 0x20

	)

67 
	#BPF_DIV
 0x30

	)

68 
	#BPF_OR
 0x40

	)

69 
	#BPF_AND
 0x50

	)

70 
	#BPF_LSH
 0x60

	)

71 
	#BPF_RSH
 0x70

	)

72 
	#BPF_NEG
 0x80

	)

73 
	#BPF_MOD
 0x90

	)

74 
	#BPF_XOR
 0xa0

	)

76 
	#BPF_JA
 0x00

	)

77 
	#BPF_JEQ
 0x10

	)

78 
	#BPF_JGT
 0x20

	)

79 
	#BPF_JGE
 0x30

	)

80 
	#BPF_JSET
 0x40

	)

81 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

82 
	#BPF_K
 0x00

	)

83 
	#BPF_X
 0x08

	)

86 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

87 
	#BPF_A
 0x10

	)

90 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

91 
	#BPF_TAX
 0x00

	)

92 
	#BPF_TXA
 0x80

	)

94 #i‚de‡
BPF_MAXINSNS


95 
	#BPF_MAXINSNS
 4096

	)

101 #i‚de‡
BPF_STMT


102 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

104 #i‚de‡
BPF_JUMP


105 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

111 
	#BPF_MEMWORDS
 16

	)

118 
	#SKF_AD_OFF
 (-0x1000)

	)

119 
	#SKF_AD_PROTOCOL
 0

	)

120 
	#SKF_AD_PKTTYPE
 4

	)

121 
	#SKF_AD_IFINDEX
 8

	)

122 
	#SKF_AD_NLATTR
 12

	)

123 
	#SKF_AD_NLATTR_NEST
 16

	)

124 
	#SKF_AD_MARK
 20

	)

125 
	#SKF_AD_QUEUE
 24

	)

126 
	#SKF_AD_HATYPE
 28

	)

127 
	#SKF_AD_RXHASH
 32

	)

128 
	#SKF_AD_CPU
 36

	)

129 
	#SKF_AD_ALU_XOR_X
 40

	)

130 
	#SKF_AD_VLAN_TAG
 44

	)

131 
	#SKF_AD_VLAN_TAG_PRESENT
 48

	)

132 
	#SKF_AD_PAY_OFFSET
 52

	)

133 
	#SKF_AD_MAX
 56

	)

134 
	#SKF_NET_OFF
 (-0x100000)

	)

135 
	#SKF_LL_OFF
 (-0x200000)

	)

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	mRTM_NEWNETCONF
 = 80,

124 
	#RTM_NEWNETCONF
 
RTM_NEWNETCONF


	)

125 
	mRTM_GETNETCONF
 = 82,

126 
	#RTM_GETNETCONF
 
RTM_GETNETCONF


	)

128 
	mRTM_NEWMDB
 = 84,

129 
	#RTM_NEWMDB
 
RTM_NEWMDB


	)

130 
	mRTM_DELMDB
 = 85,

131 
	#RTM_DELMDB
 
RTM_DELMDB


	)

132 
	mRTM_GETMDB
 = 86,

133 
	#RTM_GETMDB
 
RTM_GETMDB


	)

135 
	m__RTM_MAX
,

136 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

139 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

140 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

141 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

149 
	sπ©å
 {

150 
	mπa_Àn
;

151 
	mπa_ty≥
;

156 
	#RTA_ALIGNTO
 4

	)

157 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

158 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

159 (
πa
)->
πa_Àn
 >(
π©å
) && \

160 (
πa
)->
πa_Àn
 <(
Àn
))

	)

161 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

162 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

163 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

164 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

165 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

166 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

175 
	sπmsg
 {

176 
	mπm_Ámûy
;

177 
	mπm_d°_Àn
;

178 
	mπm_§c_Àn
;

179 
	mπm_tos
;

181 
	mπm_èbÀ
;

182 
	mπm_¥Ÿocﬁ
;

183 
	mπm_sc›e
;

184 
	mπm_ty≥
;

186 
	mπm_Êags
;

192 
	mRTN_UNSPEC
,

193 
	mRTN_UNICAST
,

194 
	mRTN_LOCAL
,

195 
	mRTN_BROADCAST
,

197 
	mRTN_ANYCAST
,

199 
	mRTN_MULTICAST
,

200 
	mRTN_BLACKHOLE
,

201 
	mRTN_UNREACHABLE
,

202 
	mRTN_PROHIBIT
,

203 
	mRTN_THROW
,

204 
	mRTN_NAT
,

205 
	mRTN_XRESOLVE
,

206 
	m__RTN_MAX


209 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

214 
	#RTPROT_UNSPEC
 0

	)

215 
	#RTPROT_REDIRECT
 1

	)

217 
	#RTPROT_KERNEL
 2

	)

218 
	#RTPROT_BOOT
 3

	)

219 
	#RTPROT_STATIC
 4

	)

228 
	#RTPROT_GATED
 8

	)

229 
	#RTPROT_RA
 9

	)

230 
	#RTPROT_MRT
 10

	)

231 
	#RTPROT_ZEBRA
 11

	)

232 
	#RTPROT_BIRD
 12

	)

233 
	#RTPROT_DNROUTED
 13

	)

234 
	#RTPROT_XORP
 14

	)

235 
	#RTPROT_NTK
 15

	)

236 
	#RTPROT_DHCP
 16

	)

237 
	#RTPROT_MROUTED
 17

	)

250 
	eπ_sc›e_t
 {

251 
	mRT_SCOPE_UNIVERSE
=0,

253 
	mRT_SCOPE_SITE
=200,

254 
	mRT_SCOPE_LINK
=253,

255 
	mRT_SCOPE_HOST
=254,

256 
	mRT_SCOPE_NOWHERE
=255

261 
	#RTM_F_NOTIFY
 0x100

	)

262 
	#RTM_F_CLONED
 0x200

	)

263 
	#RTM_F_EQUALIZE
 0x400

	)

264 
	#RTM_F_PREFIX
 0x800

	)

268 
	eπ_˛ass_t
 {

269 
	mRT_TABLE_UNSPEC
=0,

271 
	mRT_TABLE_COMPAT
=252,

272 
	mRT_TABLE_DEFAULT
=253,

273 
	mRT_TABLE_MAIN
=254,

274 
	mRT_TABLE_LOCAL
=255,

275 
	mRT_TABLE_MAX
=0xFFFFFFFF

281 
	eπ©å_ty≥_t
 {

282 
	mRTA_UNSPEC
,

283 
	mRTA_DST
,

284 
	mRTA_SRC
,

285 
	mRTA_IIF
,

286 
	mRTA_OIF
,

287 
	mRTA_GATEWAY
,

288 
	mRTA_PRIORITY
,

289 
	mRTA_PREFSRC
,

290 
	mRTA_METRICS
,

291 
	mRTA_MULTIPATH
,

292 
	mRTA_PROTOINFO
,

293 
	mRTA_FLOW
,

294 
	mRTA_CACHEINFO
,

295 
	mRTA_SESSION
,

296 
	mRTA_MP_ALGO
,

297 
	mRTA_TABLE
,

298 
	mRTA_MARK
,

299 
	mRTA_MFC_STATS
,

300 
	m__RTA_MAX


303 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

305 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

306 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

317 
	sπ√xth›
 {

318 
	mπnh_Àn
;

319 
	mπnh_Êags
;

320 
	mπnh_h›s
;

321 
	mπnh_ifödex
;

326 
	#RTNH_F_DEAD
 1

	)

327 
	#RTNH_F_PERVASIVE
 2

	)

328 
	#RTNH_F_ONLINK
 4

	)

332 
	#RTNH_ALIGNTO
 4

	)

333 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

334 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

335 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

336 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

337 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

338 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

339 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

343 
	sπa_ˇcheöfo
 {

344 
__u32
 
	mπa_˛¡ªf
;

345 
__u32
 
	mπa_œ°u£
;

346 
__s32
 
	mπa_expúes
;

347 
__u32
 
	mπa_îr‹
;

348 
__u32
 
	mπa_u£d
;

350 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

351 
__u32
 
	mπa_id
;

352 
__u32
 
	mπa_ts
;

353 
__u32
 
	mπa_tßge
;

359 
	mRTAX_UNSPEC
,

360 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

361 
	mRTAX_LOCK
,

362 
	#RTAX_LOCK
 
RTAX_LOCK


	)

363 
	mRTAX_MTU
,

364 
	#RTAX_MTU
 
RTAX_MTU


	)

365 
	mRTAX_WINDOW
,

366 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

367 
	mRTAX_RTT
,

368 
	#RTAX_RTT
 
RTAX_RTT


	)

369 
	mRTAX_RTTVAR
,

370 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

371 
	mRTAX_SSTHRESH
,

372 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

373 
	mRTAX_CWND
,

374 
	#RTAX_CWND
 
RTAX_CWND


	)

375 
	mRTAX_ADVMSS
,

376 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

377 
	mRTAX_REORDERING
,

378 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

379 
	mRTAX_HOPLIMIT
,

380 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

381 
	mRTAX_INITCWND
,

382 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

383 
	mRTAX_FEATURES
,

384 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

385 
	mRTAX_RTO_MIN
,

386 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

387 
	mRTAX_INITRWND
,

388 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

389 
	mRTAX_QUICKACK
,

390 
	#RTAX_QUICKACK
 
RTAX_QUICKACK


	)

391 
	m__RTAX_MAX


394 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

396 
	#RTAX_FEATURE_ECN
 0x00000001

	)

397 
	#RTAX_FEATURE_SACK
 0x00000002

	)

398 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

399 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

401 
	sπa_£ssi⁄
 {

402 
__u8
 
	m¥Ÿo
;

403 
__u8
 
	m∑d1
;

404 
__u16
 
	m∑d2
;

408 
__u16
 
	m•‹t
;

409 
__u16
 
	mdp‹t
;

410 } 
	mp‹ts
;

413 
__u8
 
	mty≥
;

414 
__u8
 
	mcode
;

415 
__u16
 
	midít
;

416 } 
	micm±
;

418 
__u32
 
	m•i
;

419 } 
	mu
;

422 
	sπa_mfc_°©s
 {

423 
__u64
 
	mmfcs_∑ckës
;

424 
__u64
 
	mmfcs_byãs
;

425 
__u64
 
	mmfcs_wr⁄g_if
;

432 
	sπgímsg
 {

433 
	mπgí_Ámûy
;

445 
	siföfomsg
 {

446 
	mifi_Ámûy
;

447 
	m__ifi_∑d
;

448 
	mifi_ty≥
;

449 
	mifi_ödex
;

450 
	mifi_Êags
;

451 
	mifi_ch™ge
;

458 
	s¥efixmsg
 {

459 
	m¥efix_Ámûy
;

460 
	m¥efix_∑d1
;

461 
	m¥efix_∑d2
;

462 
	m¥efix_ifödex
;

463 
	m¥efix_ty≥
;

464 
	m¥efix_Àn
;

465 
	m¥efix_Êags
;

466 
	m¥efix_∑d3
;

471 
	mPREFIX_UNSPEC
,

472 
	mPREFIX_ADDRESS
,

473 
	mPREFIX_CACHEINFO
,

474 
	m__PREFIX_MAX


477 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

479 
	s¥efix_ˇcheöfo
 {

480 
__u32
 
	m¥e„ºed_time
;

481 
__u32
 
	mvÆid_time
;

489 
	stcmsg
 {

490 
	mtcm_Ámûy
;

491 
	mtcm__∑d1
;

492 
	mtcm__∑d2
;

493 
	mtcm_ifödex
;

494 
__u32
 
	mtcm_h™dÀ
;

495 
__u32
 
	mtcm_∑ª¡
;

496 
__u32
 
	mtcm_öfo
;

500 
	mTCA_UNSPEC
,

501 
	mTCA_KIND
,

502 
	mTCA_OPTIONS
,

503 
	mTCA_STATS
,

504 
	mTCA_XSTATS
,

505 
	mTCA_RATE
,

506 
	mTCA_FCNT
,

507 
	mTCA_STATS2
,

508 
	mTCA_STAB
,

509 
	m__TCA_MAX


512 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

514 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

515 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

521 
	sndu£r›tmsg
 {

522 
	mndu£r›t_Ámûy
;

523 
	mndu£r›t_∑d1
;

524 
	mndu£r›t_›ts_Àn
;

525 
	mndu£r›t_ifödex
;

526 
__u8
 
	mndu£r›t_icmp_ty≥
;

527 
__u8
 
	mndu£r›t_icmp_code
;

528 
	mndu£r›t_∑d2
;

529 
	mndu£r›t_∑d3
;

534 
	mNDUSEROPT_UNSPEC
,

535 
	mNDUSEROPT_SRCADDR
,

536 
	m__NDUSEROPT_MAX


539 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

542 
	#RTMGRP_LINK
 1

	)

543 
	#RTMGRP_NOTIFY
 2

	)

544 
	#RTMGRP_NEIGH
 4

	)

545 
	#RTMGRP_TC
 8

	)

547 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

548 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

549 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

550 
	#RTMGRP_IPV4_RULE
 0x80

	)

552 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

553 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

554 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

555 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

557 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

558 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

560 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

563 
	eπ√éök_groups
 {

564 
	mRTNLGRP_NONE
,

565 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

566 
	mRTNLGRP_LINK
,

567 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

568 
	mRTNLGRP_NOTIFY
,

569 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

570 
	mRTNLGRP_NEIGH
,

571 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

572 
	mRTNLGRP_TC
,

573 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

574 
	mRTNLGRP_IPV4_IFADDR
,

575 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

576 
	mRTNLGRP_IPV4_MROUTE
,

577 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

578 
	mRTNLGRP_IPV4_ROUTE
,

579 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

580 
	mRTNLGRP_IPV4_RULE
,

581 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

582 
	mRTNLGRP_IPV6_IFADDR
,

583 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

584 
	mRTNLGRP_IPV6_MROUTE
,

585 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

586 
	mRTNLGRP_IPV6_ROUTE
,

587 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

588 
	mRTNLGRP_IPV6_IFINFO
,

589 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

590 
	mRTNLGRP_DEC√t_IFADDR
,

591 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

592 
	mRTNLGRP_NOP2
,

593 
	mRTNLGRP_DEC√t_ROUTE
,

594 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

595 
	mRTNLGRP_DEC√t_RULE
,

596 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

597 
	mRTNLGRP_NOP4
,

598 
	mRTNLGRP_IPV6_PREFIX
,

599 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

600 
	mRTNLGRP_IPV6_RULE
,

601 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

602 
	mRTNLGRP_ND_USEROPT
,

603 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

604 
	mRTNLGRP_PHONET_IFADDR
,

605 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

606 
	mRTNLGRP_PHONET_ROUTE
,

607 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

608 
	mRTNLGRP_DCB
,

609 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

610 
	mRTNLGRP_IPV4_NETCONF
,

611 
	#RTNLGRP_IPV4_NETCONF
 
RTNLGRP_IPV4_NETCONF


	)

612 
	mRTNLGRP_IPV6_NETCONF
,

613 
	#RTNLGRP_IPV6_NETCONF
 
RTNLGRP_IPV6_NETCONF


	)

614 
	mRTNLGRP_MDB
,

615 
	#RTNLGRP_MDB
 
RTNLGRP_MDB


	)

616 
	m__RTNLGRP_MAX


618 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

621 
	stˇmsg
 {

622 
	mtˇ_Ámûy
;

623 
	mtˇ__∑d1
;

624 
	mtˇ__∑d2
;

626 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

627 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

628 
	#TCA_ACT_TAB
 1

	)

629 
	#TCAA_MAX
 1

	)

632 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

633 
	#RTEXT_FILTER_BRVLAN
 (1 << 1)

	)

	@/usr/include/net/ethernet.h

21 #i‚de‡
__NET_ETHERNET_H


22 
	#__NET_ETHERNET_H
 1

	)

24 
	~<sys/cdefs.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<löux/if_ëhî.h
>

28 
__BEGIN_DECLS


32 
	sëhî_addr


34 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

35 } 
__©åibuã__
 ((
__∑cked__
));

38 
	sëhî_hódî


40 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

41 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

42 
u_öt16_t
 
	mëhî_ty≥
;

43 } 
__©åibuã__
 ((
__∑cked__
));

46 
	#ETHERTYPE_PUP
 0x0200

	)

47 
	#ETHERTYPE_SPRITE
 0x0500

	)

48 
	#ETHERTYPE_IP
 0x0800

	)

49 
	#ETHERTYPE_ARP
 0x0806

	)

50 
	#ETHERTYPE_REVARP
 0x8035

	)

51 
	#ETHERTYPE_AT
 0x809B

	)

52 
	#ETHERTYPE_AARP
 0x80F3

	)

53 
	#ETHERTYPE_VLAN
 0x8100

	)

54 
	#ETHERTYPE_IPX
 0x8137

	)

55 
	#ETHERTYPE_IPV6
 0x86dd

	)

56 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

59 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

60 
	#ETHER_TYPE_LEN
 2

	)

61 
	#ETHER_CRC_LEN
 4

	)

62 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

63 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

64 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

67 
	#ETHER_IS_VALID_LEN
(
foo
) \

68 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

75 
	#ETHERTYPE_TRAIL
 0x1000

	)

76 
	#ETHERTYPE_NTRAILER
 16

	)

78 
	#ETHERMTU
 
ETH_DATA_LEN


	)

79 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

81 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/net/if_arp.h

22 #i‚de‡
_NET_IF_ARP_H


24 
	#_NET_IF_ARP_H
 1

	)

25 
	~<sys/cdefs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/sockë.h
>

30 
	g__BEGIN_DECLS


33 
	#MAX_ADDR_LEN
 7

	)

39 
	#ARPOP_REQUEST
 1

	)

40 
	#ARPOP_REPLY
 2

	)

41 
	#ARPOP_RREQUEST
 3

	)

42 
	#ARPOP_RREPLY
 4

	)

43 
	#ARPOP_InREQUEST
 8

	)

44 
	#ARPOP_InREPLY
 9

	)

45 
	#ARPOP_NAK
 10

	)

54 
	s¨phdr


56 
	m¨_hrd
;

57 
	m¨_¥o
;

58 
	m¨_h 
;

59 
	m¨_∂n
;

60 
	m¨_›
;

64 
	m__¨_sha
[
ETH_ALEN
];

65 
	m__¨_sù
[4];

66 
	m__¨_tha
[
ETH_ALEN
];

67 
	m__¨_tù
[4];

73 
	#ARPHRD_NETROM
 0

	)

74 
	#ARPHRD_ETHER
 1

	)

75 
	#ARPHRD_EETHER
 2

	)

76 
	#ARPHRD_AX25
 3

	)

77 
	#ARPHRD_PRONET
 4

	)

78 
	#ARPHRD_CHAOS
 5

	)

79 
	#ARPHRD_IEEE802
 6

	)

80 
	#ARPHRD_ARCNET
 7

	)

81 
	#ARPHRD_APPLETLK
 8

	)

82 
	#ARPHRD_DLCI
 15

	)

83 
	#ARPHRD_ATM
 19

	)

84 
	#ARPHRD_METRICOM
 23

	)

85 
	#ARPHRD_IEEE1394
 24

	)

86 
	#ARPHRD_EUI64
 27

	)

87 
	#ARPHRD_INFINIBAND
 32

	)

90 
	#ARPHRD_SLIP
 256

	)

91 
	#ARPHRD_CSLIP
 257

	)

92 
	#ARPHRD_SLIP6
 258

	)

93 
	#ARPHRD_CSLIP6
 259

	)

94 
	#ARPHRD_RSRVD
 260

	)

95 
	#ARPHRD_ADAPT
 264

	)

96 
	#ARPHRD_ROSE
 270

	)

97 
	#ARPHRD_X25
 271

	)

98 
	#ARPHRD_HWX25
 272

	)

99 
	#ARPHRD_PPP
 512

	)

100 
	#ARPHRD_CISCO
 513

	)

101 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

102 
	#ARPHRD_LAPB
 516

	)

103 
	#ARPHRD_DDCMP
 517

	)

104 
	#ARPHRD_RAWHDLC
 518

	)

106 
	#ARPHRD_TUNNEL
 768

	)

107 
	#ARPHRD_TUNNEL6
 769

	)

108 
	#ARPHRD_FRAD
 770

	)

109 
	#ARPHRD_SKIP
 771

	)

110 
	#ARPHRD_LOOPBACK
 772

	)

111 
	#ARPHRD_LOCALTLK
 773

	)

112 
	#ARPHRD_FDDI
 774

	)

113 
	#ARPHRD_BIF
 775

	)

114 
	#ARPHRD_SIT
 776

	)

115 
	#ARPHRD_IPDDP
 777

	)

116 
	#ARPHRD_IPGRE
 778

	)

117 
	#ARPHRD_PIMREG
 779

	)

118 
	#ARPHRD_HIPPI
 780

	)

119 
	#ARPHRD_ASH
 781

	)

120 
	#ARPHRD_ECONET
 782

	)

121 
	#ARPHRD_IRDA
 783

	)

122 
	#ARPHRD_FCPP
 784

	)

123 
	#ARPHRD_FCAL
 785

	)

124 
	#ARPHRD_FCPL
 786

	)

125 
	#ARPHRD_FCFABRIC
 787

	)

126 
	#ARPHRD_IEEE802_TR
 800

	)

127 
	#ARPHRD_IEEE80211
 801

	)

128 
	#ARPHRD_IEEE80211_PRISM
 802

	)

129 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

130 
	#ARPHRD_IEEE802154
 804

	)

131 
	#ARPHRD_IEEE802154_PHY
 805

	)

133 
	#ARPHRD_VOID
 0xFFFF

	)

134 
	#ARPHRD_NONE
 0xFFFE

	)

138 
	s¨¥eq


140 
sockaddr
 
	m¨p_∑
;

141 
sockaddr
 
	m¨p_ha
;

142 
	m¨p_Êags
;

143 
sockaddr
 
	m¨p_√tmask
;

144 
	m¨p_dev
[16];

147 
	s¨¥eq_ﬁd


149 
sockaddr
 
	m¨p_∑
;

150 
sockaddr
 
	m¨p_ha
;

151 
	m¨p_Êags
;

152 
sockaddr
 
	m¨p_√tmask
;

156 
	#ATF_COM
 0x02

	)

157 
	#ATF_PERM
 0x04

	)

158 
	#ATF_PUBL
 0x08

	)

159 
	#ATF_USETRAILERS
 0x10

	)

160 
	#ATF_NETMASK
 0x20

	)

162 
	#ATF_DONTPUB
 0x40

	)

163 
	#ATF_MAGIC
 0x80

	)

167 
	#ARPD_UPDATE
 0x01

	)

168 
	#ARPD_LOOKUP
 0x02

	)

169 
	#ARPD_FLUSH
 0x03

	)

171 
	s¨pd_ªque°


173 
	mªq
;

174 
u_öt32_t
 
	mù
;

175 
	mdev
;

176 
	m°amp
;

177 
	mupd©ed
;

178 
	mha
[
MAX_ADDR_LEN
];

181 
	g__END_DECLS


	@/usr/include/net/route.h

20 #i‚de‡
_NET_ROUTE_H


21 
	#_NET_ROUTE_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<√töë/ö.h
>

27 
	~<bôs/w‹dsize.h
>

31 
	sπíåy


33 
	mπ_∑d1
;

34 
sockaddr
 
	mπ_d°
;

35 
sockaddr
 
	mπ_g©eway
;

36 
sockaddr
 
	mπ_gímask
;

37 
	mπ_Êags
;

38 
	mπ_∑d2
;

39 
	mπ_∑d3
;

40 
	mπ_tos
;

41 
	mπ_˛ass
;

42 #i‡
__WORDSIZE
 == 64

43 
	mπ_∑d4
[3];

45 
	mπ_∑d4
;

47 
	mπ_mëric
;

48 *
	mπ_dev
;

49 
	mπ_mtu
;

50 
	mπ_wödow
;

51 
	mπ_úâ
;

54 
	#π_mss
 
π_mtu


	)

57 
	sö6_πmsg


59 
ö6_addr
 
	mπmsg_d°
;

60 
ö6_addr
 
	mπmsg_§c
;

61 
ö6_addr
 
	mπmsg_g©eway
;

62 
u_öt32_t
 
	mπmsg_ty≥
;

63 
u_öt16_t
 
	mπmsg_d°_Àn
;

64 
u_öt16_t
 
	mπmsg_§c_Àn
;

65 
u_öt32_t
 
	mπmsg_mëric
;

66 
	mπmsg_öfo
;

67 
u_öt32_t
 
	mπmsg_Êags
;

68 
	mπmsg_ifödex
;

72 
	#RTF_UP
 0x0001

	)

73 
	#RTF_GATEWAY
 0x0002

	)

75 
	#RTF_HOST
 0x0004

	)

76 
	#RTF_REINSTATE
 0x0008

	)

77 
	#RTF_DYNAMIC
 0x0010

	)

78 
	#RTF_MODIFIED
 0x0020

	)

79 
	#RTF_MTU
 0x0040

	)

80 
	#RTF_MSS
 
RTF_MTU


	)

81 
	#RTF_WINDOW
 0x0080

	)

82 
	#RTF_IRTT
 0x0100

	)

83 
	#RTF_REJECT
 0x0200

	)

84 
	#RTF_STATIC
 0x0400

	)

85 
	#RTF_XRESOLVE
 0x0800

	)

86 
	#RTF_NOFORWARD
 0x1000

	)

87 
	#RTF_THROW
 0x2000

	)

88 
	#RTF_NOPMTUDISC
 0x4000

	)

91 
	#RTF_DEFAULT
 0x00010000

	)

92 
	#RTF_ALLONLINK
 0x00020000

	)

93 
	#RTF_ADDRCONF
 0x00040000

	)

95 
	#RTF_LINKRT
 0x00100000

	)

96 
	#RTF_NONEXTHOP
 0x00200000

	)

98 
	#RTF_CACHE
 0x01000000

	)

99 
	#RTF_FLOW
 0x02000000

	)

100 
	#RTF_POLICY
 0x04000000

	)

102 
	#RTCF_VALVE
 0x00200000

	)

103 
	#RTCF_MASQ
 0x00400000

	)

104 
	#RTCF_NAT
 0x00800000

	)

105 
	#RTCF_DOREDIRECT
 0x01000000

	)

106 
	#RTCF_LOG
 0x02000000

	)

107 
	#RTCF_DIRECTSRC
 0x04000000

	)

109 
	#RTF_LOCAL
 0x80000000

	)

110 
	#RTF_INTERFACE
 0x40000000

	)

111 
	#RTF_MULTICAST
 0x20000000

	)

112 
	#RTF_BROADCAST
 0x10000000

	)

113 
	#RTF_NAT
 0x08000000

	)

115 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

116 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

118 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

120 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

121 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

123 
	#RT_CLASS_UNSPEC
 0

	)

124 
	#RT_CLASS_DEFAULT
 253

	)

126 
	#RT_CLASS_MAIN
 254

	)

127 
	#RT_CLASS_LOCAL
 255

	)

128 
	#RT_CLASS_MAX
 255

	)

131 
	#RTMSG_ACK
 
NLMSG_ACK


	)

132 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

134 
	#RTMSG_NEWDEVICE
 0x11

	)

135 
	#RTMSG_DELDEVICE
 0x12

	)

136 
	#RTMSG_NEWROUTE
 0x21

	)

137 
	#RTMSG_DELROUTE
 0x22

	)

138 
	#RTMSG_NEWRULE
 0x31

	)

139 
	#RTMSG_DELRULE
 0x32

	)

140 
	#RTMSG_CONTROL
 0x40

	)

142 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/ether.h

19 #i‚de‡
_NETINET_ETHER_H


20 
	#_NETINET_ETHER_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<√töë/if_ëhî.h
>

27 
__BEGIN_DECLS


30 *
	$ëhî_¡ﬂ
 (c⁄° 
ëhî_addr
 *
__addr
Ë
__THROW
;

31 *
	$ëhî_¡ﬂ_r
 (c⁄° 
ëhî_addr
 *
__addr
, *
__buf
)

32 
__THROW
;

35 
ëhî_addr
 *
	$ëhî_©⁄
 (c⁄° *
__asc
Ë
__THROW
;

36 
ëhî_addr
 *
	$ëhî_©⁄_r
 (c⁄° *
__asc
,

37 
ëhî_addr
 *
__addr
Ë
__THROW
;

40 
	$ëhî_¡oho°
 (*
__ho°«me
, c⁄° 
ëhî_addr
 *
__addr
)

41 
__THROW
;

44 
	$ëhî_ho°t⁄
 (c⁄° *
__ho°«me
, 
ëhî_addr
 *
__addr
)

45 
__THROW
;

48 
	$ëhî_löe
 (c⁄° *
__löe
, 
ëhî_addr
 *
__addr
,

49 *
__ho°«me
Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/netinet/icmp6.h

18 #i‚de‡
_NETINET_ICMP6_H


19 
	#_NETINET_ICMP6_H
 1

	)

21 
	~<öây≥s.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
	#ICMP6_FILTER
 1

	)

28 
	#ICMP6_FILTER_BLOCK
 1

	)

29 
	#ICMP6_FILTER_PASS
 2

	)

30 
	#ICMP6_FILTER_BLOCKOTHERS
 3

	)

31 
	#ICMP6_FILTER_PASSONLY
 4

	)

33 
	sicmp6_fûãr


35 
uöt32_t
 
	micmp6_fût
[8];

38 
	sicmp6_hdr


40 
uöt8_t
 
	micmp6_ty≥
;

41 
uöt8_t
 
	micmp6_code
;

42 
uöt16_t
 
	micmp6_cksum
;

45 
uöt32_t
 
	micmp6_un_d©a32
[1];

46 
uöt16_t
 
	micmp6_un_d©a16
[2];

47 
uöt8_t
 
	micmp6_un_d©a8
[4];

48 } 
	micmp6_d©aun
;

51 
	#icmp6_d©a32
 
icmp6_d©aun
.
icmp6_un_d©a32


	)

52 
	#icmp6_d©a16
 
icmp6_d©aun
.
icmp6_un_d©a16


	)

53 
	#icmp6_d©a8
 
icmp6_d©aun
.
icmp6_un_d©a8


	)

54 
	#icmp6_µå
 
icmp6_d©a32
[0]

	)

55 
	#icmp6_mtu
 
icmp6_d©a32
[0]

	)

56 
	#icmp6_id
 
icmp6_d©a16
[0]

	)

57 
	#icmp6_£q
 
icmp6_d©a16
[1]

	)

58 
	#icmp6_maxdñay
 
icmp6_d©a16
[0]

	)

60 
	#ICMP6_DST_UNREACH
 1

	)

61 
	#ICMP6_PACKET_TOO_BIG
 2

	)

62 
	#ICMP6_TIME_EXCEEDED
 3

	)

63 
	#ICMP6_PARAM_PROB
 4

	)

65 
	#ICMP6_INFOMSG_MASK
 0x80

	)

67 
	#ICMP6_ECHO_REQUEST
 128

	)

68 
	#ICMP6_ECHO_REPLY
 129

	)

69 
	#MLD_LISTENER_QUERY
 130

	)

70 
	#MLD_LISTENER_REPORT
 131

	)

71 
	#MLD_LISTENER_REDUCTION
 132

	)

73 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

74 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

76 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

77 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

78 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

80 
	#ICMP6_TIME_EXCEED_TRANSIT
 0

	)

81 
	#ICMP6_TIME_EXCEED_REASSEMBLY
 1

	)

83 
	#ICMP6_PARAMPROB_HEADER
 0

	)

84 
	#ICMP6_PARAMPROB_NEXTHEADER
 1

	)

85 
	#ICMP6_PARAMPROB_OPTION
 2

	)

87 
	#ICMP6_FILTER_WILLPASS
(
ty≥
, 
fûãΩ
) \

88 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë=0)

	)

90 
	#ICMP6_FILTER_WILLBLOCK
(
ty≥
, 
fûãΩ
) \

91 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë!0)

	)

93 
	#ICMP6_FILTER_SETPASS
(
ty≥
, 
fûãΩ
) \

94 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë&~(1 << (—y≥Ë& 31))))

	)

96 
	#ICMP6_FILTER_SETBLOCK
(
ty≥
, 
fûãΩ
) \

97 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë|(1 << (—y≥Ë& 31))))

	)

99 
	#ICMP6_FILTER_SETPASSALL
(
fûãΩ
) \

100 
	`mem£t
 (
fûãΩ
, 0,  (
icmp6_fûãr
));

	)

102 
	#ICMP6_FILTER_SETBLOCKALL
(
fûãΩ
) \

103 
	`mem£t
 (
fûãΩ
, 0xFF,  (
icmp6_fûãr
));

	)

105 
	#ND_ROUTER_SOLICIT
 133

	)

106 
	#ND_ROUTER_ADVERT
 134

	)

107 
	#ND_NEIGHBOR_SOLICIT
 135

	)

108 
	#ND_NEIGHBOR_ADVERT
 136

	)

109 
	#ND_REDIRECT
 137

	)

111 
	snd_rouãr_sﬁicô


113 
icmp6_hdr
 
	mnd_rs_hdr
;

117 
	#nd_rs_ty≥
 
nd_rs_hdr
.
icmp6_ty≥


	)

118 
	#nd_rs_code
 
nd_rs_hdr
.
icmp6_code


	)

119 
	#nd_rs_cksum
 
nd_rs_hdr
.
icmp6_cksum


	)

120 
	#nd_rs_ª£rved
 
nd_rs_hdr
.
icmp6_d©a32
[0]

	)

122 
	snd_rouãr_advît


124 
icmp6_hdr
 
	mnd_ø_hdr
;

125 
uöt32_t
 
	mnd_ø_ªachabÀ
;

126 
uöt32_t
 
	mnd_ø_ªå™smô
;

130 
	#nd_ø_ty≥
 
nd_ø_hdr
.
icmp6_ty≥


	)

131 
	#nd_ø_code
 
nd_ø_hdr
.
icmp6_code


	)

132 
	#nd_ø_cksum
 
nd_ø_hdr
.
icmp6_cksum


	)

133 
	#nd_ø_curh›limô
 
nd_ø_hdr
.
icmp6_d©a8
[0]

	)

134 
	#nd_ø_Êags_ª£rved
 
nd_ø_hdr
.
icmp6_d©a8
[1]

	)

135 
	#ND_RA_FLAG_MANAGED
 0x80

	)

136 
	#ND_RA_FLAG_OTHER
 0x40

	)

137 
	#ND_RA_FLAG_HOME_AGENT
 0x20

	)

138 
	#nd_ø_rouãr_li„time
 
nd_ø_hdr
.
icmp6_d©a16
[1]

	)

140 
	snd_√ighb‹_sﬁicô


142 
icmp6_hdr
 
	mnd_ns_hdr
;

143 
ö6_addr
 
	mnd_ns_èrgë
;

147 
	#nd_ns_ty≥
 
nd_ns_hdr
.
icmp6_ty≥


	)

148 
	#nd_ns_code
 
nd_ns_hdr
.
icmp6_code


	)

149 
	#nd_ns_cksum
 
nd_ns_hdr
.
icmp6_cksum


	)

150 
	#nd_ns_ª£rved
 
nd_ns_hdr
.
icmp6_d©a32
[0]

	)

152 
	snd_√ighb‹_advît


154 
icmp6_hdr
 
	mnd_«_hdr
;

155 
ö6_addr
 
	mnd_«_èrgë
;

159 
	#nd_«_ty≥
 
nd_«_hdr
.
icmp6_ty≥


	)

160 
	#nd_«_code
 
nd_«_hdr
.
icmp6_code


	)

161 
	#nd_«_cksum
 
nd_«_hdr
.
icmp6_cksum


	)

162 
	#nd_«_Êags_ª£rved
 
nd_«_hdr
.
icmp6_d©a32
[0]

	)

163 #i‡ 
BYTE_ORDER
 =
BIG_ENDIAN


164 
	#ND_NA_FLAG_ROUTER
 0x80000000

	)

165 
	#ND_NA_FLAG_SOLICITED
 0x40000000

	)

166 
	#ND_NA_FLAG_OVERRIDE
 0x20000000

	)

168 
	#ND_NA_FLAG_ROUTER
 0x00000080

	)

169 
	#ND_NA_FLAG_SOLICITED
 0x00000040

	)

170 
	#ND_NA_FLAG_OVERRIDE
 0x00000020

	)

173 
	snd_ªdúe˘


175 
icmp6_hdr
 
	mnd_rd_hdr
;

176 
ö6_addr
 
	mnd_rd_èrgë
;

177 
ö6_addr
 
	mnd_rd_d°
;

181 
	#nd_rd_ty≥
 
nd_rd_hdr
.
icmp6_ty≥


	)

182 
	#nd_rd_code
 
nd_rd_hdr
.
icmp6_code


	)

183 
	#nd_rd_cksum
 
nd_rd_hdr
.
icmp6_cksum


	)

184 
	#nd_rd_ª£rved
 
nd_rd_hdr
.
icmp6_d©a32
[0]

	)

186 
	snd_›t_hdr


188 
uöt8_t
 
	mnd_›t_ty≥
;

189 
uöt8_t
 
	mnd_›t_Àn
;

193 
	#ND_OPT_SOURCE_LINKADDR
 1

	)

194 
	#ND_OPT_TARGET_LINKADDR
 2

	)

195 
	#ND_OPT_PREFIX_INFORMATION
 3

	)

196 
	#ND_OPT_REDIRECTED_HEADER
 4

	)

197 
	#ND_OPT_MTU
 5

	)

198 
	#ND_OPT_RTR_ADV_INTERVAL
 7

	)

199 
	#ND_OPT_HOME_AGENT_INFO
 8

	)

201 
	snd_›t_¥efix_öfo


203 
uöt8_t
 
	mnd_›t_pi_ty≥
;

204 
uöt8_t
 
	mnd_›t_pi_Àn
;

205 
uöt8_t
 
	mnd_›t_pi_¥efix_Àn
;

206 
uöt8_t
 
	mnd_›t_pi_Êags_ª£rved
;

207 
uöt32_t
 
	mnd_›t_pi_vÆid_time
;

208 
uöt32_t
 
	mnd_›t_pi_¥e„ºed_time
;

209 
uöt32_t
 
	mnd_›t_pi_ª£rved2
;

210 
ö6_addr
 
	mnd_›t_pi_¥efix
;

213 
	#ND_OPT_PI_FLAG_ONLINK
 0x80

	)

214 
	#ND_OPT_PI_FLAG_AUTO
 0x40

	)

215 
	#ND_OPT_PI_FLAG_RADDR
 0x20

	)

217 
	snd_›t_rd_hdr


219 
uöt8_t
 
	mnd_›t_rh_ty≥
;

220 
uöt8_t
 
	mnd_›t_rh_Àn
;

221 
uöt16_t
 
	mnd_›t_rh_ª£rved1
;

222 
uöt32_t
 
	mnd_›t_rh_ª£rved2
;

226 
	snd_›t_mtu


228 
uöt8_t
 
	mnd_›t_mtu_ty≥
;

229 
uöt8_t
 
	mnd_›t_mtu_Àn
;

230 
uöt16_t
 
	mnd_›t_mtu_ª£rved
;

231 
uöt32_t
 
	mnd_›t_mtu_mtu
;

234 
	smld_hdr


236 
icmp6_hdr
 
	mmld_icmp6_hdr
;

237 
ö6_addr
 
	mmld_addr
;

240 
	#mld_ty≥
 
mld_icmp6_hdr
.
icmp6_ty≥


	)

241 
	#mld_code
 
mld_icmp6_hdr
.
icmp6_code


	)

242 
	#mld_cksum
 
mld_icmp6_hdr
.
icmp6_cksum


	)

243 
	#mld_maxdñay
 
mld_icmp6_hdr
.
icmp6_d©a16
[0]

	)

244 
	#mld_ª£rved
 
mld_icmp6_hdr
.
icmp6_d©a16
[1]

	)

246 
	#ICMP6_ROUTER_RENUMBERING
 138

	)

248 
	sicmp6_rouãr_ªnum


250 
icmp6_hdr
 
	mº_hdr
;

251 
uöt8_t
 
	mº_£gnum
;

252 
uöt8_t
 
	mº_Êags
;

253 
uöt16_t
 
	mº_maxdñay
;

254 
uöt32_t
 
	mº_ª£rved
;

257 
	#º_ty≥
 
º_hdr
.
icmp6_ty≥


	)

258 
	#º_code
 
º_hdr
.
icmp6_code


	)

259 
	#º_cksum
 
º_hdr
.
icmp6_cksum


	)

260 
	#º_£qnum
 
º_hdr
.
icmp6_d©a32
[0]

	)

263 
	#ICMP6_RR_FLAGS_TEST
 0x80

	)

264 
	#ICMP6_RR_FLAGS_REQRESULT
 0x40

	)

265 
	#ICMP6_RR_FLAGS_FORCEAPPLY
 0x20

	)

266 
	#ICMP6_RR_FLAGS_SPECSITE
 0x10

	)

267 
	#ICMP6_RR_FLAGS_PREVDONE
 0x08

	)

269 
	sº_pco_m©ch


271 
uöt8_t
 
	mΩm_code
;

272 
uöt8_t
 
	mΩm_Àn
;

273 
uöt8_t
 
	mΩm_‹döÆ
;

274 
uöt8_t
 
	mΩm_m©chÀn
;

275 
uöt8_t
 
	mΩm_möÀn
;

276 
uöt8_t
 
	mΩm_maxÀn
;

277 
uöt16_t
 
	mΩm_ª£rved
;

278 
ö6_addr
 
	mΩm_¥efix
;

282 
	#RPM_PCO_ADD
 1

	)

283 
	#RPM_PCO_CHANGE
 2

	)

284 
	#RPM_PCO_SETGLOBAL
 3

	)

286 
	sº_pco_u£


288 
uöt8_t
 
	mΩu_u£Àn
;

289 
uöt8_t
 
	mΩu_kì∂í
;

290 
uöt8_t
 
	mΩu_ømask
;

291 
uöt8_t
 
	mΩu_øÊags
;

292 
uöt32_t
 
	mΩu_v…ime
;

293 
uöt32_t
 
	mΩu_∂time
;

294 
uöt32_t
 
	mΩu_Êags
;

295 
ö6_addr
 
	mΩu_¥efix
;

298 
	#ICMP6_RR_PCOUSE_RAFLAGS_ONLINK
 0x20

	)

299 
	#ICMP6_RR_PCOUSE_RAFLAGS_AUTO
 0x10

	)

301 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


302 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80000000

	)

303 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40000000

	)

304 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


305 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80

	)

306 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40

	)

309 
	sº_ªsu…


311 
uöt16_t
 
	mºr_Êags
;

312 
uöt8_t
 
	mºr_‹döÆ
;

313 
uöt8_t
 
	mºr_m©chedÀn
;

314 
uöt32_t
 
	mºr_ifid
;

315 
ö6_addr
 
	mºr_¥efix
;

318 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


319 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0002

	)

320 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0001

	)

321 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


322 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0200

	)

323 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0100

	)

327 
	snd_›t_adv_öãrvÆ


329 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_ty≥
;

330 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_Àn
;

331 
uöt16_t
 
	mnd_›t_adv_öãrvÆ_ª£rved
;

332 
uöt32_t
 
	mnd_›t_adv_öãrvÆ_ivÆ
;

336 
	snd_›t_home_agít_öfo


338 
uöt8_t
 
	mnd_›t_home_agít_öfo_ty≥
;

339 
uöt8_t
 
	mnd_›t_home_agít_öfo_Àn
;

340 
uöt16_t
 
	mnd_›t_home_agít_öfo_ª£rved
;

341 
uöt16_t
 
	mnd_›t_home_agít_öfo_¥e„ªn˚
;

342 
uöt16_t
 
	mnd_›t_home_agít_öfo_li„time
;

	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/netinet/ip.h

18 #i‚de‡
__NETINET_IP_H


19 
	#__NETINET_IP_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
__BEGIN_DECLS


28 
	stime°amp


30 
u_öt8_t
 
	mÀn
;

31 
u_öt8_t
 
	m±r
;

32 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


33 
	mÊags
:4;

34 
	movîÊow
:4;

35 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


36 
	movîÊow
:4;

37 
	mÊags
:4;

41 
u_öt32_t
 
	md©a
[9];

44 
	sùhdr


46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	mihl
:4;

48 
	mvîsi⁄
:4;

49 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


50 
	mvîsi⁄
:4;

51 
	mihl
:4;

55 
u_öt8_t
 
	mtos
;

56 
u_öt16_t
 
	mtŸ_Àn
;

57 
u_öt16_t
 
	mid
;

58 
u_öt16_t
 
	m‰ag_off
;

59 
u_öt8_t
 
	mâl
;

60 
u_öt8_t
 
	m¥Ÿocﬁ
;

61 
u_öt16_t
 
	mcheck
;

62 
u_öt32_t
 
	mßddr
;

63 
u_öt32_t
 
	mdaddr
;

67 #ifde‡
__USE_BSD


107 
	sù


109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
	mù_hl
:4;

111 
	mù_v
:4;

113 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


114 
	mù_v
:4;

115 
	mù_hl
:4;

117 
u_öt8_t
 
	mù_tos
;

118 
u_sh‹t
 
	mù_Àn
;

119 
u_sh‹t
 
	mù_id
;

120 
u_sh‹t
 
	mù_off
;

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

125 
u_öt8_t
 
	mù_âl
;

126 
u_öt8_t
 
	mù_p
;

127 
u_sh‹t
 
	mù_sum
;

128 
ö_addr
 
	mù_§c
, 
	mù_d°
;

134 
	sù_time°amp


136 
u_öt8_t
 
	mùt_code
;

137 
u_öt8_t
 
	mùt_Àn
;

138 
u_öt8_t
 
	mùt_±r
;

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	mùt_Êg
:4;

141 
	mùt_oÊw
:4;

143 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
	mùt_oÊw
:4;

145 
	mùt_Êg
:4;

147 
u_öt32_t
 
	md©a
[9];

151 
	#IPVERSION
 4

	)

152 
	#IP_MAXPACKET
 65535

	)

160 
	#IPTOS_ECN_MASK
 0x03

	)

161 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

162 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

163 
	#IPTOS_ECN_ECT1
 0x01

	)

164 
	#IPTOS_ECN_ECT0
 0x02

	)

165 
	#IPTOS_ECN_CE
 0x03

	)

173 
	#IPTOS_DSCP_MASK
 0xfc

	)

174 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

175 
	#IPTOS_DSCP_AF11
 0x28

	)

176 
	#IPTOS_DSCP_AF12
 0x30

	)

177 
	#IPTOS_DSCP_AF13
 0x38

	)

178 
	#IPTOS_DSCP_AF21
 0x48

	)

179 
	#IPTOS_DSCP_AF22
 0x50

	)

180 
	#IPTOS_DSCP_AF23
 0x58

	)

181 
	#IPTOS_DSCP_AF31
 0x68

	)

182 
	#IPTOS_DSCP_AF32
 0x70

	)

183 
	#IPTOS_DSCP_AF33
 0x78

	)

184 
	#IPTOS_DSCP_AF41
 0x88

	)

185 
	#IPTOS_DSCP_AF42
 0x90

	)

186 
	#IPTOS_DSCP_AF43
 0x98

	)

187 
	#IPTOS_DSCP_EF
 0xb8

	)

194 
	#IPTOS_CLASS_MASK
 0xe0

	)

195 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

196 
	#IPTOS_CLASS_CS0
 0x00

	)

197 
	#IPTOS_CLASS_CS1
 0x20

	)

198 
	#IPTOS_CLASS_CS2
 0x40

	)

199 
	#IPTOS_CLASS_CS3
 0x60

	)

200 
	#IPTOS_CLASS_CS4
 0x80

	)

201 
	#IPTOS_CLASS_CS5
 0xa0

	)

202 
	#IPTOS_CLASS_CS6
 0xc0

	)

203 
	#IPTOS_CLASS_CS7
 0xe0

	)

205 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

211 
	#IPTOS_TOS_MASK
 0x1E

	)

212 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

213 
	#IPTOS_LOWDELAY
 0x10

	)

214 
	#IPTOS_THROUGHPUT
 0x08

	)

215 
	#IPTOS_RELIABILITY
 0x04

	)

216 
	#IPTOS_LOWCOST
 0x02

	)

217 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

222 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

223 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

224 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

225 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

226 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

227 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

228 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

229 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

230 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

231 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

236 
	#IPOPT_COPY
 0x80

	)

237 
	#IPOPT_CLASS_MASK
 0x60

	)

238 
	#IPOPT_NUMBER_MASK
 0x1f

	)

240 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

241 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

242 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

244 
	#IPOPT_CONTROL
 0x00

	)

245 
	#IPOPT_RESERVED1
 0x20

	)

246 
	#IPOPT_DEBMEAS
 0x40

	)

247 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

248 
	#IPOPT_RESERVED2
 0x60

	)

250 
	#IPOPT_EOL
 0

	)

251 
	#IPOPT_END
 
IPOPT_EOL


	)

252 
	#IPOPT_NOP
 1

	)

253 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

255 
	#IPOPT_RR
 7

	)

256 
	#IPOPT_TS
 68

	)

257 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

258 
	#IPOPT_SECURITY
 130

	)

259 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

260 
	#IPOPT_LSRR
 131

	)

261 
	#IPOPT_SATID
 136

	)

262 
	#IPOPT_SID
 
IPOPT_SATID


	)

263 
	#IPOPT_SSRR
 137

	)

264 
	#IPOPT_RA
 148

	)

269 
	#IPOPT_OPTVAL
 0

	)

270 
	#IPOPT_OLEN
 1

	)

271 
	#IPOPT_OFFSET
 2

	)

272 
	#IPOPT_MINOFF
 4

	)

274 
	#MAX_IPOPTLEN
 40

	)

277 
	#IPOPT_TS_TSONLY
 0

	)

278 
	#IPOPT_TS_TSANDADDR
 1

	)

279 
	#IPOPT_TS_PRESPEC
 3

	)

282 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

283 
	#IPOPT_SECUR_CONFID
 0xf135

	)

284 
	#IPOPT_SECUR_EFTO
 0x789a

	)

285 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

286 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

287 
	#IPOPT_SECUR_SECRET
 0xd788

	)

288 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

293 
	#MAXTTL
 255

	)

294 
	#IPDEFTTL
 64

	)

295 
	#IPFRAGTTL
 60

	)

296 
	#IPTTLDEC
 1

	)

298 
	#IP_MSS
 576

	)

300 
	g__END_DECLS


	@/usr/include/netinet/ip6.h

18 #i‚de‡
_NETINET_IP6_H


19 
	#_NETINET_IP6_H
 1

	)

21 
	~<öây≥s.h
>

22 
	~<√töë/ö.h
>

24 
	sù6_hdr


28 
	sù6_hdr˘l


30 
uöt32_t
 
	mù6_un1_Êow
;

32 
uöt16_t
 
	mù6_un1_∂í
;

33 
uöt8_t
 
	mù6_un1_nxt
;

34 
uöt8_t
 
	mù6_un1_hlim
;

35 } 
	mù6_un1
;

36 
uöt8_t
 
	mù6_un2_vfc
;

37 } 
	mù6_˘lun
;

38 
ö6_addr
 
	mù6_§c
;

39 
ö6_addr
 
	mù6_d°
;

42 
	#ù6_vfc
 
ù6_˘lun
.
ù6_un2_vfc


	)

43 
	#ù6_Êow
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_Êow


	)

44 
	#ù6_∂í
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_∂í


	)

45 
	#ù6_nxt
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_nxt


	)

46 
	#ù6_hlim
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

47 
	#ù6_h›s
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

50 
	sù6_ext


52 
uöt8_t
 
	mù6e_nxt
;

53 
uöt8_t
 
	mù6e_Àn
;

57 
	sù6_hbh


59 
uöt8_t
 
	mù6h_nxt
;

60 
uöt8_t
 
	mù6h_Àn
;

65 
	sù6_de°


67 
uöt8_t
 
	mù6d_nxt
;

68 
uöt8_t
 
	mù6d_Àn
;

73 
	sù6_πhdr


75 
uöt8_t
 
	mù6r_nxt
;

76 
uöt8_t
 
	mù6r_Àn
;

77 
uöt8_t
 
	mù6r_ty≥
;

78 
uöt8_t
 
	mù6r_£gÀ·
;

83 
	sù6_πhdr0


85 
uöt8_t
 
	mù6r0_nxt
;

86 
uöt8_t
 
	mù6r0_Àn
;

87 
uöt8_t
 
	mù6r0_ty≥
;

88 
uöt8_t
 
	mù6r0_£gÀ·
;

89 
uöt8_t
 
	mù6r0_ª£rved
;

90 
uöt8_t
 
	mù6r0_¶m≠
[3];

92 
ö6_addr
 
	mù6r0_addr
[0];

96 
	sù6_‰ag


98 
uöt8_t
 
	mù6f_nxt
;

99 
uöt8_t
 
	mù6f_ª£rved
;

100 
uöt16_t
 
	mù6f_ofÊg
;

101 
uöt32_t
 
	mù6f_idít
;

104 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


105 
	#IP6F_OFF_MASK
 0xfff8

	)

106 
	#IP6F_RESERVED_MASK
 0x0006

	)

107 
	#IP6F_MORE_FRAG
 0x0001

	)

109 
	#IP6F_OFF_MASK
 0xf8f‡

	)

110 
	#IP6F_RESERVED_MASK
 0x0600

	)

111 
	#IP6F_MORE_FRAG
 0x0100

	)

115 
	sù6_›t


117 
uöt8_t
 
	mù6o_ty≥
;

118 
uöt8_t
 
	mù6o_Àn
;

125 
	#IP6OPT_TYPE
(
o
Ë((oË& 0xc0)

	)

126 
	#IP6OPT_TYPE_SKIP
 0x00

	)

127 
	#IP6OPT_TYPE_DISCARD
 0x40

	)

128 
	#IP6OPT_TYPE_FORCEICMP
 0x80

	)

129 
	#IP6OPT_TYPE_ICMP
 0xc0

	)

130 
	#IP6OPT_TYPE_MUTABLE
 0x20

	)

133 
	#IP6OPT_PAD1
 0

	)

134 
	#IP6OPT_PADN
 1

	)

136 
	#IP6OPT_JUMBO
 0xc2

	)

137 
	#IP6OPT_NSAP_ADDR
 0xc3

	)

138 
	#IP6OPT_TUNNEL_LIMIT
 0x04

	)

139 
	#IP6OPT_ROUTER_ALERT
 0x05

	)

142 
	sù6_›t_jumbo


144 
uöt8_t
 
	mù6oj_ty≥
;

145 
uöt8_t
 
	mù6oj_Àn
;

146 
uöt8_t
 
	mù6oj_jumbo_Àn
[4];

148 
	#IP6OPT_JUMBO_LEN
 6

	)

151 
	sù6_›t_nßp


153 
uöt8_t
 
	mù6⁄_ty≥
;

154 
uöt8_t
 
	mù6⁄_Àn
;

155 
uöt8_t
 
	mù6⁄_§c_nßp_Àn
;

156 
uöt8_t
 
	mù6⁄_d°_nßp_Àn
;

162 
	sù6_›t_tu¬ñ


164 
uöt8_t
 
	mù6Ÿ_ty≥
;

165 
uöt8_t
 
	mù6Ÿ_Àn
;

166 
uöt8_t
 
	mù6Ÿ_íˇp_limô
;

170 
	sù6_›t_rouãr


172 
uöt8_t
 
	mù6‹_ty≥
;

173 
uöt8_t
 
	mù6‹_Àn
;

174 
uöt8_t
 
	mù6‹_vÆue
[2];

178 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


179 
	#IP6_ALERT_MLD
 0x0000

	)

180 
	#IP6_ALERT_RSVP
 0x0001

	)

181 
	#IP6_ALERT_AN
 0x0002

	)

183 
	#IP6_ALERT_MLD
 0x0000

	)

184 
	#IP6_ALERT_RSVP
 0x0100

	)

185 
	#IP6_ALERT_AN
 0x0200

	)

	@/usr/include/netpacket/packet.h

19 #i‚de‡
__NETPACKET_PACKET_H


20 
	#__NETPACKET_PACKET_H
 1

	)

22 
	ssockaddr_Œ


24 
	m¶l_Ámûy
;

25 
	m¶l_¥Ÿocﬁ
;

26 
	m¶l_ifödex
;

27 
	m¶l_h©y≥
;

28 
	m¶l_pkây≥
;

29 
	m¶l_hÆí
;

30 
	m¶l_addr
[8];

35 
	#PACKET_HOST
 0

	)

36 
	#PACKET_BROADCAST
 1

	)

37 
	#PACKET_MULTICAST
 2

	)

38 
	#PACKET_OTHERHOST
 3

	)

39 
	#PACKET_OUTGOING
 4

	)

40 
	#PACKET_LOOPBACK
 5

	)

41 
	#PACKET_FASTROUTE
 6

	)

45 
	#PACKET_ADD_MEMBERSHIP
 1

	)

46 
	#PACKET_DROP_MEMBERSHIP
 2

	)

47 
	#PACKET_RECV_OUTPUT
 3

	)

48 
	#PACKET_RX_RING
 5

	)

49 
	#PACKET_STATISTICS
 6

	)

51 
	s∑ckë_mªq


53 
	mmr_ifödex
;

54 
	mmr_ty≥
;

55 
	mmr_Æí
;

56 
	mmr_addªss
[8];

59 
	#PACKET_MR_MULTICAST
 0

	)

60 
	#PACKET_MR_PROMISC
 1

	)

61 
	#PACKET_MR_ALLMULTI
 2

	)

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/resolv.h

52 #i‚de‡
_RESOLV_H_


56 
	~<sys/ty≥s.h
>

57 
	~<√töë/ö.h
>

59 #i‚de‡
__√ed_ªs_°©e


60 
	#_RESOLV_H_


	)

62 
	~<sys/∑øm.h
>

63 
	~<sys/cdefs.h
>

64 
	~<°dio.h
>

65 
	~<¨∑/«me£r.h
>

68 #i‚de‡
__ªs_°©e_deföed


69 
	#__ªs_°©e_deföed


	)

71 íum { 
	mªs_gﬂhód
, 
	mªs_√xäs
, 
	mªs_modifõd
, 
	mªs_d⁄e
, 
	mªs_îr‹
 }

72 
	tªs_£ndhooka˘
;

74 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_qhook
Ë(
	tsockaddr_ö
 * c⁄° *
	t__ns
,

75 c⁄° 
	tu_ch¨
 **
	t__quîy
,

76 *
	t__quîyÀn
,

77 
	tu_ch¨
 *
	t__™s
,

78 
	t__™ssiz
,

79 *
	t__ª•Àn
);

81 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_rhook
Ë(c⁄° 
	tsockaddr_ö
 *
	t__ns
,

82 c⁄° 
	tu_ch¨
 *
	t__quîy
,

83 
	t__quîyÀn
,

84 
	tu_ch¨
 *
	t__™s
,

85 
	t__™ssiz
,

86 *
	t__ª•Àn
);

91 
	#MAXNS
 3

	)

92 
	#MAXDFLSRCH
 3

	)

93 
	#MAXDNSRCH
 6

	)

94 
	#LOCALDOMAINPARTS
 2

	)

96 
	#RES_TIMEOUT
 5

	)

97 
	#MAXRESOLVSORT
 10

	)

98 
	#RES_MAXNDOTS
 15

	)

99 
	#RES_MAXRETRANS
 30

	)

100 
	#RES_MAXRETRY
 5

	)

101 
	#RES_DFLRETRY
 2

	)

102 
	#RES_MAXTIME
 65535

	)

104 
	s__ªs_°©e
 {

105 
ªå™s
;

106 
ªåy
;

107 
u_l⁄g
 
›ti⁄s
;

108 
nscou¡
;

109 
sockaddr_ö


110 
nßddr_li°
[
MAXNS
];

111 
	#nßddr
 
nßddr_li°
[0]

	)

112 
u_sh‹t
 
id
;

114 *
dn§ch
[
MAXDNSRCH
+1];

115 
defd«me
[256];

116 
u_l⁄g
 
pfcode
;

117 
ndŸs
:4;

118 
ns‹t
:4;

119 
ùv6_u«vaû
:1;

120 
unu£d
:23;

122 
ö_addr
 
addr
;

123 
u_öt32_t
 
mask
;

124 } 
s‹t_li°
[
MAXRESOLVSORT
];

126 
ªs_£nd_qhook
 
qhook
;

127 
ªs_£nd_rhook
 
rhook
;

128 
ªs_h_î∫o
;

129 
_vcsock
;

130 
u_öt
 
_Êags
;

133 
∑d
[52];

135 
u_öt16_t
 
nscou¡
;

136 
u_öt16_t
 
nsm≠
[
MAXNS
];

137 
nssocks
[
MAXNS
];

138 
u_öt16_t
 
nscou¡6
;

139 
u_öt16_t
 
nsöô
;

140 
sockaddr_ö6
 *
nßddrs
[
MAXNS
];

141 #ifde‡
_LIBC


142 
öô°amp


143 
	`__©åibuã__
((
∑cked
));

145 
_öô°amp
[2];

147 } 
_ext
;

148 } 
_u
;

151 
__ªs_°©e
 *
	tªs_°©e
;

152 #unde‡
__√ed_ªs_°©e


155 #ifde‡
_RESOLV_H_


164 
	#__RES
 19991006

	)

172 #i‚de‡
_PATH_RESCONF


173 
	#_PATH_RESCONF
 "/ëc/ªsﬁv.c⁄f"

	)

176 
	sªs_sym
 {

177 
numbî
;

178 * 
«me
;

179 * 
hum™«me
;

185 
	#RES_F_VC
 0x00000001

	)

186 
	#RES_F_CONN
 0x00000002

	)

187 
	#RES_F_EDNS0ERR
 0x00000004

	)

190 
	#RES_EXHAUSTIVE
 0x00000001

	)

195 
	#RES_INIT
 0x00000001

	)

196 
	#RES_DEBUG
 0x00000002

	)

197 
	#RES_AAONLY
 0x00000004

	)

198 
	#RES_USEVC
 0x00000008

	)

199 
	#RES_PRIMARY
 0x00000010

	)

200 
	#RES_IGNTC
 0x00000020

	)

201 
	#RES_RECURSE
 0x00000040

	)

202 
	#RES_DEFNAMES
 0x00000080

	)

203 
	#RES_STAYOPEN
 0x00000100

	)

204 
	#RES_DNSRCH
 0x00000200

	)

205 
	#RES_INSECURE1
 0x00000400

	)

206 
	#RES_INSECURE2
 0x00000800

	)

207 
	#RES_NOALIASES
 0x00001000

	)

208 
	#RES_USE_INET6
 0x00002000

	)

209 
	#RES_ROTATE
 0x00004000

	)

210 
	#RES_NOCHECKNAME
 0x00008000

	)

211 
	#RES_KEEPTSIG
 0x00010000

	)

212 
	#RES_BLAST
 0x00020000

	)

213 
	#RES_USEBSTRING
 0x00040000

	)

215 
	#RES_NOIP6DOTINT
 0x00080000

	)

217 
	#RES_USE_EDNS0
 0x00100000

	)

218 
	#RES_SNGLKUP
 0x00200000

	)

219 
	#RES_SNGLKUPREOP
 0x00400000

	)

221 
	#RES_USE_DNSSEC
 0x00800000

	)

222 
	#RES_NOTLDQUERY
 0x01000000

	)

225 
	#RES_DEFAULT
 (
RES_RECURSE
|
RES_DEFNAMES
|
RES_DNSRCH
|
RES_NOIP6DOTINT
)

	)

230 
	#RES_PRF_STATS
 0x00000001

	)

231 
	#RES_PRF_UPDATE
 0x00000002

	)

232 
	#RES_PRF_CLASS
 0x00000004

	)

233 
	#RES_PRF_CMD
 0x00000008

	)

234 
	#RES_PRF_QUES
 0x00000010

	)

235 
	#RES_PRF_ANS
 0x00000020

	)

236 
	#RES_PRF_AUTH
 0x00000040

	)

237 
	#RES_PRF_ADD
 0x00000080

	)

238 
	#RES_PRF_HEAD1
 0x00000100

	)

239 
	#RES_PRF_HEAD2
 0x00000200

	)

240 
	#RES_PRF_TTLID
 0x00000400

	)

241 
	#RES_PRF_HEADX
 0x00000800

	)

242 
	#RES_PRF_QUERY
 0x00001000

	)

243 
	#RES_PRF_REPLY
 0x00002000

	)

244 
	#RES_PRF_INIT
 0x00004000

	)

248 
__BEGIN_DECLS


249 
__ªs_°©e
 *
	$__ªs_°©e
(Ë
	`__©åibuã__
 ((
__c⁄°__
));

250 
__END_DECLS


251 
	#_ªs
 (*
	`__ªs_°©e
())

	)

253 #i‚de‡
__BIND_NOSTATIC


254 
	#Â_nquîy
 
__Â_nquîy


	)

255 
	#Â_quîy
 
__Â_quîy


	)

256 
	#ho°Æüs
 
__ho°Æüs


	)

257 
	#p_quîy
 
__p_quîy


	)

258 
	#ªs_˛o£
 
__ªs_˛o£


	)

259 
	#ªs_öô
 
__ªs_öô


	)

260 
	#ªs_isour£rvî
 
__ªs_isour£rvî


	)

261 
	#ªs_mkquîy
 
__ªs_mkquîy


	)

262 
	#ªs_quîy
 
__ªs_quîy


	)

263 
	#ªs_quîydomaö
 
__ªs_quîydomaö


	)

264 
	#ªs_£¨ch
 
__ªs_£¨ch


	)

265 
	#ªs_£nd
 
__ªs_£nd


	)

267 
__BEGIN_DECLS


268 
	$Â_nquîy
 (c⁄° 
u_ch¨
 *, , 
FILE
 *Ë
__THROW
;

269 
	$Â_quîy
 (c⁄° 
u_ch¨
 *, 
FILE
 *Ë
__THROW
;

270 c⁄° * 
	$ho°Æüs
 (c⁄° *Ë
__THROW
;

271 
	$p_quîy
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

272 
	$ªs_˛o£
 (Ë
__THROW
;

273 
	$ªs_öô
 (Ë
__THROW
;

274 
	$ªs_isour£rvî
 (c⁄° 
sockaddr_ö
 *Ë
__THROW
;

275 
	$ªs_mkquîy
 (, c⁄° *, , , c⁄° 
u_ch¨
 *,

276 , c⁄° 
u_ch¨
 *, u_ch¨ *, Ë
__THROW
;

277 
	$ªs_quîy
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

278 
	$ªs_quîydomaö
 (const *, const *, , ,

279 
u_ch¨
 *, Ë
__THROW
;

280 
	$ªs_£¨ch
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

281 
	$ªs_£nd
 (c⁄° 
u_ch¨
 *, , u_ch¨ *, Ë
__THROW
;

282 
__END_DECLS


285 
	#b64_¡›
 
__b64_¡›


	)

286 
	#b64_±⁄
 
__b64_±⁄


	)

287 
	#dn_comp
 
__dn_comp


	)

288 
	#dn_cou¡_œbñs
 
__dn_cou¡_œbñs


	)

289 
	#dn_ex∑nd
 
__dn_ex∑nd


	)

290 
	#dn_skù«me
 
__dn_skù«me


	)

291 
	#Â_ªs°©
 
__Â_ªs°©


	)

292 
	#loc_©⁄
 
__loc_©⁄


	)

293 
	#loc_¡ﬂ
 
__loc_¡ﬂ


	)

294 
	#p_cd«me
 
__p_cd«me


	)

295 
	#p_cd¬ame
 
__p_cd¬ame


	)

296 
	#p_˛ass
 
__p_˛ass


	)

297 
	#p_fq«me
 
__p_fq«me


	)

298 
	#p_fq¬ame
 
__p_fq¬ame


	)

299 
	#p_›ti⁄
 
__p_›ti⁄


	)

300 
	#p_£c°od©e
 
__p_£c°od©e


	)

301 
	#p_£˘i⁄
 
__p_£˘i⁄


	)

302 
	#p_time
 
__p_time


	)

303 
	#p_ty≥
 
__p_ty≥


	)

304 
	#p_rcode
 
__p_rcode


	)

305 
	#pué⁄g
 
__pué⁄g


	)

306 
	#putsh‹t
 
__putsh‹t


	)

307 
	#ªs_dnok
 
__ªs_dnok


	)

308 
	#ªs_hnok
 
__ªs_hnok


	)

309 
	#ªs_ho°Æüs
 
__ªs_ho°Æüs


	)

310 
	#ªs_maûok
 
__ªs_maûok


	)

311 
	#ªs_«meöquîy
 
__ªs_«meöquîy


	)

312 
	#ªs_n˛o£
 
__ªs_n˛o£


	)

313 
	#ªs_nöô
 
__ªs_nöô


	)

314 
	#ªs_nmkquîy
 
__ªs_nmkquîy


	)

315 
	#ªs_≈quîy
 
__ªs_≈quîy


	)

316 
	#ªs_nquîy
 
__ªs_nquîy


	)

317 
	#ªs_nquîydomaö
 
__ªs_nquîydomaö


	)

318 
	#ªs_n£¨ch
 
__ªs_n£¨ch


	)

319 
	#ªs_n£nd
 
__ªs_n£nd


	)

320 
	#ªs_nisour£rvî
 
__ªs_nisour£rvî


	)

321 
	#ªs_ownok
 
__ªs_ownok


	)

322 
	#ªs_quîõsm©ch
 
__ªs_quîõsm©ch


	)

323 
	#ªs_øndomid
 
__ªs_øndomid


	)

324 
	#sym_¡›
 
__sym_¡›


	)

325 
	#sym_¡os
 
__sym_¡os


	)

326 
	#sym_°⁄
 
__sym_°⁄


	)

327 
__BEGIN_DECLS


328 
	$ªs_hnok
 (c⁄° *Ë
__THROW
;

329 
	$ªs_ownok
 (c⁄° *Ë
__THROW
;

330 
	$ªs_maûok
 (c⁄° *Ë
__THROW
;

331 
	$ªs_dnok
 (c⁄° *Ë
__THROW
;

332 
	$sym_°⁄
 (c⁄° 
ªs_sym
 *, c⁄° *, *Ë
__THROW
;

333 c⁄° * 
	$sym_¡os
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

334 c⁄° * 
	$sym_¡›
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

335 
	$b64_¡›
 (
u_ch¨
 c⁄° *, 
size_t
, *, size_tË
__THROW
;

336 
	$b64_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

337 
	$loc_©⁄
 (c⁄° *
__ascii
, 
u_ch¨
 *
__bö¨y
Ë
__THROW
;

338 c⁄° * 
	$loc_¡ﬂ
 (c⁄° 
u_ch¨
 *
__bö¨y
, *
__ascii
Ë
__THROW
;

339 
	$dn_skù«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

340 
	$pué⁄g
 (
u_öt32_t
, 
u_ch¨
 *Ë
__THROW
;

341 
	$putsh‹t
 (
u_öt16_t
, 
u_ch¨
 *Ë
__THROW
;

342 c⁄° * 
	$p_˛ass
 (Ë
__THROW
;

343 c⁄° * 
	$p_time
 (
u_öt32_t
Ë
__THROW
;

344 c⁄° * 
	$p_ty≥
 (Ë
__THROW
;

345 c⁄° * 
	$p_rcode
 (Ë
__THROW
;

346 c⁄° 
u_ch¨
 * 
	$p_cd¬ame
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, , 
FILE
 *)

347 
__THROW
;

348 c⁄° 
u_ch¨
 * 
	$p_cd«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

349 c⁄° 
u_ch¨
 * 
	$p_fq¬ame
 (c⁄° 
u_ch¨
 *
__˝
, c⁄° u_ch¨ *
__msg
,

350 , *, Ë
__THROW
;

351 c⁄° 
u_ch¨
 * 
	$p_fq«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

352 c⁄° * 
	$p_›ti⁄
 (
u_l⁄g
 
__›ti⁄
Ë
__THROW
;

353 * 
	$p_£c°od©e
 (
u_l⁄g
Ë
__THROW
;

354 
	$dn_cou¡_œbñs
 (c⁄° *Ë
__THROW
;

355 
	$dn_comp
 (c⁄° *, 
u_ch¨
 *, , u_char **, u_char **)

356 
__THROW
;

357 
	$dn_ex∑nd
 (c⁄° 
u_ch¨
 *, const u_char *, const u_char *,

358 *, Ë
__THROW
;

359 
u_öt
 
	$ªs_øndomid
 (Ë
__THROW
;

360 
	$ªs_«meöquîy
 (const *, , ,

361 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

362 
	$ªs_quîõsm©ch
 (c⁄° 
u_ch¨
 *, const u_char *,

363 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

364 c⁄° * 
	$p_£˘i⁄
 (
__£˘i⁄
, 
__›code
Ë
__THROW
;

366 
	$ªs_nöô
 (
ªs_°©e
Ë
__THROW
;

367 
	$ªs_nisour£rvî
 (c⁄° 
ªs_°©e
,

368 c⁄° 
sockaddr_ö
 *Ë
__THROW
;

369 
	$Â_ªs°©
 (c⁄° 
ªs_°©e
, 
FILE
 *Ë
__THROW
;

370 
	$ªs_≈quîy
 (c⁄° 
ªs_°©e
, c⁄° 
u_ch¨
 *, , 
FILE
 *)

371 
__THROW
;

372 c⁄° * 
	$ªs_ho°Æüs
 (c⁄° 
ªs_°©e
, c⁄° *, *, 
size_t
)

373 
__THROW
;

374 
	$ªs_nquîy
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

375 
__THROW
;

376 
	$ªs_n£¨ch
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

377 
__THROW
;

378 
	$ªs_nquîydomaö
 (
ªs_°©e
, const *, const *, ,

379 , 
u_ch¨
 *, Ë
__THROW
;

380 
	$ªs_nmkquîy
 (
ªs_°©e
, , const *, , ,

381 c⁄° 
u_ch¨
 *, , const u_char *, u_char *,

382 Ë
__THROW
;

383 
	$ªs_n£nd
 (
ªs_°©e
, c⁄° 
u_ch¨
 *, , u_char *, )

384 
__THROW
;

385 
	$ªs_n˛o£
 (
ªs_°©e
Ë
__THROW
;

386 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/epoll.h

18 #i‚def 
_SYS_EPOLL_H


19 
	#_SYS_EPOLL_H
 1

	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

25 
	~<bôs/sig£t.h
>

27 #i‚de‡
__sig£t_t_deföed


28 
	#__sig£t_t_deföed


	)

29 
__sig£t_t
 
	tsig£t_t
;

33 
	~<bôs/ïﬁl.h
>

35 #i‚de‡
__EPOLL_PACKED


36 
	#__EPOLL_PACKED


	)

40 
	eEPOLL_EVENTS


42 
	mEPOLLIN
 = 0x001,

43 
	#EPOLLIN
 
EPOLLIN


	)

44 
	mEPOLLPRI
 = 0x002,

45 
	#EPOLLPRI
 
EPOLLPRI


	)

46 
	mEPOLLOUT
 = 0x004,

47 
	#EPOLLOUT
 
EPOLLOUT


	)

48 
	mEPOLLRDNORM
 = 0x040,

49 
	#EPOLLRDNORM
 
EPOLLRDNORM


	)

50 
	mEPOLLRDBAND
 = 0x080,

51 
	#EPOLLRDBAND
 
EPOLLRDBAND


	)

52 
	mEPOLLWRNORM
 = 0x100,

53 
	#EPOLLWRNORM
 
EPOLLWRNORM


	)

54 
	mEPOLLWRBAND
 = 0x200,

55 
	#EPOLLWRBAND
 
EPOLLWRBAND


	)

56 
	mEPOLLMSG
 = 0x400,

57 
	#EPOLLMSG
 
EPOLLMSG


	)

58 
	mEPOLLERR
 = 0x008,

59 
	#EPOLLERR
 
EPOLLERR


	)

60 
	mEPOLLHUP
 = 0x010,

61 
	#EPOLLHUP
 
EPOLLHUP


	)

62 
	mEPOLLRDHUP
 = 0x2000,

63 
	#EPOLLRDHUP
 
EPOLLRDHUP


	)

64 
	mEPOLLWAKEUP
 = 1u << 29,

65 
	#EPOLLWAKEUP
 
EPOLLWAKEUP


	)

66 
	mEPOLLONESHOT
 = 1u << 30,

67 
	#EPOLLONESHOT
 
EPOLLONESHOT


	)

68 
	mEPOLLET
 = 1u << 31

69 
	#EPOLLET
 
EPOLLET


	)

74 
	#EPOLL_CTL_ADD
 1

	)

75 
	#EPOLL_CTL_DEL
 2

	)

76 
	#EPOLL_CTL_MOD
 3

	)

79 
	uïﬁl_d©a


81 *
	m±r
;

82 
	mfd
;

83 
uöt32_t
 
	mu32
;

84 
uöt64_t
 
	mu64
;

85 } 
	tïﬁl_d©a_t
;

87 
	sïﬁl_evít


89 
uöt32_t
 
	mevíts
;

90 
ïﬁl_d©a_t
 
	md©a
;

91 } 
	g__EPOLL_PACKED
;

94 
__BEGIN_DECLS


100 
	$ïﬁl_¸óã
 (
__size
Ë
__THROW
;

104 
	$ïﬁl_¸óã1
 (
__Êags
Ë
__THROW
;

113 
	$ïﬁl_˘l
 (
__ïfd
, 
__›
, 
__fd
,

114 
ïﬁl_evít
 *
__evít
Ë
__THROW
;

127 
	`ïﬁl_waô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

128 
__maxevíts
, 
__timeout
);

136 
	`ïﬁl_pwaô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

137 
__maxevíts
, 
__timeout
,

138 c⁄° 
__sig£t_t
 *
__ss
);

140 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_BSD


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 c⁄° 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_BSD


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_BSD


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_BSD


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_BSD


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/un.h

18 #i‚def 
_SYS_UN_H


19 
	#_SYS_UN_H
 1

	)

21 
	~<sys/cdefs.h
>

24 
	~<bôs/sockaddr.h
>

26 
__BEGIN_DECLS


29 
	ssockaddr_un


31 
__SOCKADDR_COMMON
 (
sun_
);

32 
	msun_∑th
[108];

36 #ifde‡
__USE_MISC


37 
	~<°rög.h
>

40 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

41 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

44 
	g__END_DECLS


	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

37 #ifdef 
__USE_BSD


42 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


43 
	#__WAIT_INT
(
°©us
) \

44 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

45 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

47 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

55 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


56 
	#__WAIT_STATUS
 *

	)

57 
	#__WAIT_STATUS_DEFN
 *

	)

62 
waô
 *
	m__u±r
;

63 *
	m__ùå
;

64 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

71 
	#__WAIT_STATUS
 *

	)

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	~<bôs/waô°©us.h
>

79 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

80 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

85 #ifde‡
__WIFCONTINUED


86 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifdef 
__USE_BSD


91 
	#WCOREFLAG
 
__WCOREFLAG


	)

92 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

93 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

94 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

102 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

104 #ifdef 
__USE_BSD


106 
	#WAIT_ANY
 (-1Ë

	)

107 
	#WAIT_MYPGRP
 0

	)

125 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

127 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 #i‚de‡
__id_t_deföed


129 
	~<bôs/ty≥s.h
>

130 
__id_t
 
	tid_t
;

131 
	#__id_t_deföed


	)

134 
	#__√ed_sigöfo_t


	)

135 
	~<bôs/sigöfo.h
>

148 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

149 
__›ti⁄s
);

152 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


155 
	grußge
;

162 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

163 
rußge
 * 
__ußge
Ë
__THROWNL
;

166 #ifde‡
__USE_BSD


168 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

169 
rußge
 *
__ußge
Ë
__THROWNL
;

173 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/arpa/nameser_compat.h

34 #i‚de‡
_ARPA_NAMESER_COMPAT_


35 
	#_ARPA_NAMESER_COMPAT_


	)

37 
	#__BIND
 19950621

	)

39 
	~<ídün.h
>

49 
	mid
 :16;

50 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


52 
	mqr
: 1;

53 
	m›code
: 4;

54 
	mØ
: 1;

55 
	mtc
: 1;

56 
	mrd
: 1;

58 
	mø
: 1;

59 
	munu£d
 :1;

60 
	mad
: 1;

61 
	mcd
: 1;

62 
	mrcode
 :4;

64 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN
 || BYTE_ORDER =
PDP_ENDIAN


66 
	mrd
 :1;

67 
	mtc
 :1;

68 
	mØ
 :1;

69 
	m›code
 :4;

70 
	mqr
 :1;

72 
	mrcode
 :4;

73 
	mcd
: 1;

74 
	mad
: 1;

75 
	munu£d
 :1;

76 
	mø
 :1;

79 
	mqdcou¡
 :16;

80 
	m™cou¡
 :16;

81 
	mnscou¡
 :16;

82 
	m¨cou¡
 :16;

83 } 
	tHEADER
;

85 
	#PACKETSZ
 
NS_PACKETSZ


	)

86 
	#MAXDNAME
 
NS_MAXDNAME


	)

87 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

88 
	#MAXLABEL
 
NS_MAXLABEL


	)

89 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

90 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

91 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

92 
	#INT32SZ
 
NS_INT32SZ


	)

93 
	#INT16SZ
 
NS_INT16SZ


	)

94 
	#INT8SZ
 
NS_INT8SZ


	)

95 
	#INADDRSZ
 
NS_INADDRSZ


	)

96 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

97 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

98 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

100 
	#S_ZONE
 
ns_s_zn


	)

101 
	#S_PREREQ
 
ns_s_¥


	)

102 
	#S_UPDATE
 
ns_s_ud


	)

103 
	#S_ADDT
 
ns_s_¨


	)

105 
	#QUERY
 
ns_o_quîy


	)

106 
	#IQUERY
 
ns_o_iquîy


	)

107 
	#STATUS
 
ns_o_°©us


	)

108 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

109 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

111 
	#NOERROR
 
ns_r_n€º‹


	)

112 
	#FORMERR
 
ns_r_f‹mîr


	)

113 
	#SERVFAIL
 
ns_r_£rvÁû


	)

114 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

115 
	#NOTIMP
 
ns_r_nŸim∂


	)

116 
	#REFUSED
 
ns_r_ªfu£d


	)

117 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

118 
	#YXRRSET
 
ns_r_yxº£t


	)

119 
	#NXRRSET
 
ns_r_nxº£t


	)

120 
	#NOTAUTH
 
ns_r_nŸauth


	)

121 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

127 
	#DELETE
 
ns_u›_dñëe


	)

128 
	#ADD
 
ns_u›_add


	)

130 
	#T_A
 
ns_t_a


	)

131 
	#T_NS
 
ns_t_ns


	)

132 
	#T_MD
 
ns_t_md


	)

133 
	#T_MF
 
ns_t_mf


	)

134 
	#T_CNAME
 
ns_t_˙ame


	)

135 
	#T_SOA
 
ns_t_sﬂ


	)

136 
	#T_MB
 
ns_t_mb


	)

137 
	#T_MG
 
ns_t_mg


	)

138 
	#T_MR
 
ns_t_mr


	)

139 
	#T_NULL
 
ns_t_nuŒ


	)

140 
	#T_WKS
 
ns_t_wks


	)

141 
	#T_PTR
 
ns_t_±r


	)

142 
	#T_HINFO
 
ns_t_höfo


	)

143 
	#T_MINFO
 
ns_t_möfo


	)

144 
	#T_MX
 
ns_t_mx


	)

145 
	#T_TXT
 
ns_t_txt


	)

146 
	#T_RP
 
ns_t_Ω


	)

147 
	#T_AFSDB
 
ns_t_afsdb


	)

148 
	#T_X25
 
ns_t_x25


	)

149 
	#T_ISDN
 
ns_t_isdn


	)

150 
	#T_RT
 
ns_t_π


	)

151 
	#T_NSAP
 
ns_t_nßp


	)

152 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

153 
	#T_SIG
 
ns_t_sig


	)

154 
	#T_KEY
 
ns_t_key


	)

155 
	#T_PX
 
ns_t_px


	)

156 
	#T_GPOS
 
ns_t_gpos


	)

157 
	#T_AAAA
 
ns_t_ØØ


	)

158 
	#T_LOC
 
ns_t_loc


	)

159 
	#T_NXT
 
ns_t_nxt


	)

160 
	#T_EID
 
ns_t_eid


	)

161 
	#T_NIMLOC
 
ns_t_nimloc


	)

162 
	#T_SRV
 
ns_t_§v


	)

163 
	#T_ATMA
 
ns_t_©ma


	)

164 
	#T_NAPTR
 
ns_t_«±r


	)

165 
	#T_A6
 
ns_t_a6


	)

166 
	#T_DNAME
 
ns_t_d«me


	)

167 
	#T_TSIG
 
ns_t_tsig


	)

168 
	#T_IXFR
 
ns_t_ix‰


	)

169 
	#T_AXFR
 
ns_t_ax‰


	)

170 
	#T_MAILB
 
ns_t_maûb


	)

171 
	#T_MAILA
 
ns_t_maûa


	)

172 
	#T_ANY
 
ns_t_™y


	)

174 
	#C_IN
 
ns_c_ö


	)

175 
	#C_CHAOS
 
ns_c_chaos


	)

176 
	#C_HS
 
ns_c_hs


	)

178 
	#C_NONE
 
ns_c_n⁄e


	)

179 
	#C_ANY
 
ns_c_™y


	)

181 
	#GETSHORT
 
NS_GET16


	)

182 
	#GETLONG
 
NS_GET32


	)

183 
	#PUTSHORT
 
NS_PUT16


	)

184 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/epoll.h

18 #i‚def 
_SYS_EPOLL_H


25 
	mEPOLL_CLOEXEC
 = 02000000

26 
	#EPOLL_CLOEXEC
 
EPOLL_CLOEXEC


	)

29 
	#__EPOLL_PACKED
 
	`__©åibuã__
 ((
__∑cked__
))

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


29 #ifde‡
_UAPI_LINUX_IN6_H


33 
	#__USE_KERNEL_IPV6_DEFS


	)

39 
	#IP_OPTIONS
 4

	)

40 
	#IP_HDRINCL
 3

	)

41 
	#IP_TOS
 1

	)

42 
	#IP_TTL
 2

	)

43 
	#IP_RECVOPTS
 6

	)

45 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

46 
	#IP_RETOPTS
 7

	)

47 
	#IP_MULTICAST_IF
 32

	)

48 
	#IP_MULTICAST_TTL
 33

	)

49 
	#IP_MULTICAST_LOOP
 34

	)

50 
	#IP_ADD_MEMBERSHIP
 35

	)

51 
	#IP_DROP_MEMBERSHIP
 36

	)

52 
	#IP_UNBLOCK_SOURCE
 37

	)

53 
	#IP_BLOCK_SOURCE
 38

	)

54 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

55 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

56 
	#IP_MSFILTER
 41

	)

57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


58 
	#MCAST_JOIN_GROUP
 42

	)

59 
	#MCAST_BLOCK_SOURCE
 43

	)

60 
	#MCAST_UNBLOCK_SOURCE
 44

	)

61 
	#MCAST_LEAVE_GROUP
 45

	)

62 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

63 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

64 
	#MCAST_MSFILTER
 48

	)

65 
	#IP_MULTICAST_ALL
 49

	)

66 
	#IP_UNICAST_IF
 50

	)

68 
	#MCAST_EXCLUDE
 0

	)

69 
	#MCAST_INCLUDE
 1

	)

72 
	#IP_ROUTER_ALERT
 5

	)

73 
	#IP_PKTINFO
 8

	)

74 
	#IP_PKTOPTIONS
 9

	)

75 
	#IP_PMTUDISC
 10

	)

76 
	#IP_MTU_DISCOVER
 10

	)

77 
	#IP_RECVERR
 11

	)

78 
	#IP_RECVTTL
 12

	)

79 
	#IP_RECVTOS
 13

	)

80 
	#IP_MTU
 14

	)

81 
	#IP_FREEBIND
 15

	)

82 
	#IP_IPSEC_POLICY
 16

	)

83 
	#IP_XFRM_POLICY
 17

	)

84 
	#IP_PASSSEC
 18

	)

85 
	#IP_TRANSPARENT
 19

	)

86 
	#IP_MULTICAST_ALL
 49

	)

89 
	#IP_ORIGDSTADDR
 20

	)

90 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

92 
	#IP_MINTTL
 21

	)

96 
	#IP_PMTUDISC_DONT
 0

	)

97 
	#IP_PMTUDISC_WANT
 1

	)

98 
	#IP_PMTUDISC_DO
 2

	)

99 
	#IP_PMTUDISC_PROBE
 3

	)

102 
	#SOL_IP
 0

	)

104 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

105 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

106 
	#IP_MAX_MEMBERSHIPS
 20

	)

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


112 
	sù_›ts


114 
ö_addr
 
	mù_d°
;

115 
	mù_›ts
[40];

119 
	sù_mªqn


121 
ö_addr
 
	mimr_mu…üddr
;

122 
ö_addr
 
	mimr_addªss
;

123 
	mimr_ifödex
;

127 
	sö_pktöfo


129 
	mùi_ifödex
;

130 
ö_addr
 
	mùi_•ec_d°
;

131 
ö_addr
 
	mùi_addr
;

138 
	#IPV6_ADDRFORM
 1

	)

139 
	#IPV6_2292PKTINFO
 2

	)

140 
	#IPV6_2292HOPOPTS
 3

	)

141 
	#IPV6_2292DSTOPTS
 4

	)

142 
	#IPV6_2292RTHDR
 5

	)

143 
	#IPV6_2292PKTOPTIONS
 6

	)

144 
	#IPV6_CHECKSUM
 7

	)

145 
	#IPV6_2292HOPLIMIT
 8

	)

147 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

149 
	#IPV6_NEXTHOP
 9

	)

150 
	#IPV6_AUTHHDR
 10

	)

151 
	#IPV6_UNICAST_HOPS
 16

	)

152 
	#IPV6_MULTICAST_IF
 17

	)

153 
	#IPV6_MULTICAST_HOPS
 18

	)

154 
	#IPV6_MULTICAST_LOOP
 19

	)

155 
	#IPV6_JOIN_GROUP
 20

	)

156 
	#IPV6_LEAVE_GROUP
 21

	)

157 
	#IPV6_ROUTER_ALERT
 22

	)

158 
	#IPV6_MTU_DISCOVER
 23

	)

159 
	#IPV6_MTU
 24

	)

160 
	#IPV6_RECVERR
 25

	)

161 
	#IPV6_V6ONLY
 26

	)

162 
	#IPV6_JOIN_ANYCAST
 27

	)

163 
	#IPV6_LEAVE_ANYCAST
 28

	)

164 
	#IPV6_IPSEC_POLICY
 34

	)

165 
	#IPV6_XFRM_POLICY
 35

	)

167 
	#IPV6_RECVPKTINFO
 49

	)

168 
	#IPV6_PKTINFO
 50

	)

169 
	#IPV6_RECVHOPLIMIT
 51

	)

170 
	#IPV6_HOPLIMIT
 52

	)

171 
	#IPV6_RECVHOPOPTS
 53

	)

172 
	#IPV6_HOPOPTS
 54

	)

173 
	#IPV6_RTHDRDSTOPTS
 55

	)

174 
	#IPV6_RECVRTHDR
 56

	)

175 
	#IPV6_RTHDR
 57

	)

176 
	#IPV6_RECVDSTOPTS
 58

	)

177 
	#IPV6_DSTOPTS
 59

	)

179 
	#IPV6_RECVTCLASS
 66

	)

180 
	#IPV6_TCLASS
 67

	)

183 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

184 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

185 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

186 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

189 
	#IPV6_PMTUDISC_DONT
 0

	)

190 
	#IPV6_PMTUDISC_WANT
 1

	)

191 
	#IPV6_PMTUDISC_DO
 2

	)

192 
	#IPV6_PMTUDISC_PROBE
 3

	)

195 
	#SOL_IPV6
 41

	)

196 
	#SOL_ICMPV6
 58

	)

199 
	#IPV6_RTHDR_LOOSE
 0

	)

200 
	#IPV6_RTHDR_STRICT
 1

	)

202 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigÁu…
;

116 
si_b™d
;

117 
si_fd
;

118 } 
_sigpﬁl
;

123 *
_ˇŒ_addr
;

124 
_sysˇŒ
;

125 
_¨ch
;

126 } 
_sigsys
;

127 } 
_sifõlds
;

128 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

133 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

134 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

135 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

136 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

137 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

138 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

139 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

140 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

141 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

142 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

143 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

144 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

145 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #unde‡
__√ed_sigöfo_t


289 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

290 && !
deföed
 
__have_sigevít_t


291 
	#__have_sigevít_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #i‡
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

302 #i‚de‡
__have_±hªad_©å_t


303 
±hªad_©å_t
 
	t±hªad_©å_t
;

304 
	#__have_±hªad_©å_t
 1

	)

307 
	ssigevít


309 
sigvÆ_t
 
sigev_vÆue
;

310 
sigev_signo
;

311 
sigev_nŸify
;

315 
_∑d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

324 
±hªad_©å_t
 *
_©åibuã
;

325 } 
_sigev_thªad
;

326 } 
_sigev_un
;

327 } 
	tsigevít_t
;

330 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

331 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_CAN
 29

	)

72 
	#PF_TIPC
 30

	)

73 
	#PF_BLUETOOTH
 31

	)

74 
	#PF_IUCV
 32

	)

75 
	#PF_RXRPC
 33

	)

76 
	#PF_ISDN
 34

	)

77 
	#PF_PHONET
 35

	)

78 
	#PF_IEEE802154
 36

	)

79 
	#PF_CAIF
 37

	)

80 
	#PF_ALG
 38

	)

81 
	#PF_NFC
 39

	)

82 
	#PF_VSOCK
 40

	)

83 
	#PF_MAX
 41

	)

86 
	#AF_UNSPEC
 
PF_UNSPEC


	)

87 
	#AF_LOCAL
 
PF_LOCAL


	)

88 
	#AF_UNIX
 
PF_UNIX


	)

89 
	#AF_FILE
 
PF_FILE


	)

90 
	#AF_INET
 
PF_INET


	)

91 
	#AF_AX25
 
PF_AX25


	)

92 
	#AF_IPX
 
PF_IPX


	)

93 
	#AF_APPLETALK
 
PF_APPLETALK


	)

94 
	#AF_NETROM
 
PF_NETROM


	)

95 
	#AF_BRIDGE
 
PF_BRIDGE


	)

96 
	#AF_ATMPVC
 
PF_ATMPVC


	)

97 
	#AF_X25
 
PF_X25


	)

98 
	#AF_INET6
 
PF_INET6


	)

99 
	#AF_ROSE
 
PF_ROSE


	)

100 
	#AF_DEC√t
 
PF_DEC√t


	)

101 
	#AF_NETBEUI
 
PF_NETBEUI


	)

102 
	#AF_SECURITY
 
PF_SECURITY


	)

103 
	#AF_KEY
 
PF_KEY


	)

104 
	#AF_NETLINK
 
PF_NETLINK


	)

105 
	#AF_ROUTE
 
PF_ROUTE


	)

106 
	#AF_PACKET
 
PF_PACKET


	)

107 
	#AF_ASH
 
PF_ASH


	)

108 
	#AF_ECONET
 
PF_ECONET


	)

109 
	#AF_ATMSVC
 
PF_ATMSVC


	)

110 
	#AF_RDS
 
PF_RDS


	)

111 
	#AF_SNA
 
PF_SNA


	)

112 
	#AF_IRDA
 
PF_IRDA


	)

113 
	#AF_PPPOX
 
PF_PPPOX


	)

114 
	#AF_WANPIPE
 
PF_WANPIPE


	)

115 
	#AF_LLC
 
PF_LLC


	)

116 
	#AF_CAN
 
PF_CAN


	)

117 
	#AF_TIPC
 
PF_TIPC


	)

118 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

119 
	#AF_IUCV
 
PF_IUCV


	)

120 
	#AF_RXRPC
 
PF_RXRPC


	)

121 
	#AF_ISDN
 
PF_ISDN


	)

122 
	#AF_PHONET
 
PF_PHONET


	)

123 
	#AF_IEEE802154
 
PF_IEEE802154


	)

124 
	#AF_CAIF
 
PF_CAIF


	)

125 
	#AF_ALG
 
PF_ALG


	)

126 
	#AF_NFC
 
PF_NFC


	)

127 
	#AF_VSOCK
 
PF_VSOCK


	)

128 
	#AF_MAX
 
PF_MAX


	)

134 
	#SOL_RAW
 255

	)

135 
	#SOL_DECNET
 261

	)

136 
	#SOL_X25
 262

	)

137 
	#SOL_PACKET
 263

	)

138 
	#SOL_ATM
 264

	)

139 
	#SOL_AAL
 265

	)

140 
	#SOL_IRDA
 266

	)

143 
	#SOMAXCONN
 128

	)

146 
	~<bôs/sockaddr.h
>

149 
	ssockaddr


151 
__SOCKADDR_COMMON
 (
ß_
);

152 
	mß_d©a
[14];

158 
	#__ss_Æig¡y≥
 

	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000,

209 
	#MSG_MORE
 
MSG_MORE


	)

210 
	mMSG_WAITFORONE
 = 0x10000,

211 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

212 
	mMSG_FASTOPEN
 = 0x20000000,

213 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

215 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

218 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

224 
	smsghdr


226 *
	mmsg_«me
;

227 
sockÀn_t
 
	mmsg_«mñí
;

229 
iovec
 *
	mmsg_iov
;

230 
size_t
 
	mmsg_iovÀn
;

232 *
	mmsg_c⁄åﬁ
;

233 
size_t
 
	mmsg_c⁄åﬁÀn
;

238 
	mmsg_Êags
;

242 
	scmsghdr


244 
size_t
 
	mcmsg_Àn
;

249 
	mcmsg_Àvñ
;

250 
	mcmsg_ty≥
;

251 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

252 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

257 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

258 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

260 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

262 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

263 
	#CMSG_FIRSTHDR
(
mhdr
) \

264 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

265 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

266 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

267 & (
size_t
Ë~( (size_tË- 1))

	)

268 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

269 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

270 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

272 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

273 
cmsghdr
 *
__cmsg
Ë
__THROW
;

274 #ifde‡
__USE_EXTERN_INLINES


275 #i‚de‡
_EXTERN_INLINE


276 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

278 
_EXTERN_INLINE
 
cmsghdr
 *

279 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

281 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

283  (
cmsghdr
 *) 0;

285 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

286 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

287 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


288 + 
__mhdr
->
msg_c⁄åﬁÀn
)

289 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

290 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

292  (
cmsghdr
 *) 0;

293  
__cmsg
;

294 
	}
}

301 
	mSCM_RIGHTS
 = 0x01

302 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

303 #ifde‡
__USE_GNU


304 , 
	mSCM_CREDENTIALS
 = 0x02

305 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

309 #ifde‡
__USE_GNU


311 
	su¸ed


313 
pid_t
 
	mpid
;

314 
uid_t
 
	muid
;

315 
gid_t
 
	mgid
;

320 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


321 #i‚de‡
FIOGETOWN


322 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

324 #i‚de‡
FIOSETOWN


325 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

327 #i‚de‡
SIOCATMARK


328 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

330 #i‚de‡
SIOCGPGRP


331 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

333 #i‚de‡
SIOCGSTAMP


334 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

336 #i‚de‡
SIOCGSTAMPNS


337 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

339 #i‚de‡
SIOCSPGRP


340 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

345 
	~<asm/sockë.h
>

347 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


348 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


349 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


350 #unde‡
FIOGETOWN


352 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


354 #unde‡
FIOSETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


357 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


358 #unde‡
SIOCATMARK


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


361 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


362 #unde‡
SIOCGPGRP


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


366 #unde‡
SIOCGSTAMP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


370 #unde‡
SIOCGSTAMPNS


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


373 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


374 #unde‡
SIOCSPGRP


379 
	slögî


381 
	ml_⁄off
;

382 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

13 
	#SYS_ac˘
 
__NR_ac˘


	)

14 
	#SYS_add_key
 
__NR_add_key


	)

15 
	#SYS_adjtimex
 
__NR_adjtimex


	)

16 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

17 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

18 
	#SYS_bdÊush
 
__NR_bdÊush


	)

19 
	#SYS_bªak
 
__NR_bªak


	)

20 
	#SYS_brk
 
__NR_brk


	)

21 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

22 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

23 
	#SYS_chdú
 
__NR_chdú


	)

24 
	#SYS_chmod
 
__NR_chmod


	)

25 
	#SYS_chown
 
__NR_chown


	)

26 
	#SYS_chown32
 
__NR_chown32


	)

27 
	#SYS_chroŸ
 
__NR_chroŸ


	)

28 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

29 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

30 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

31 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

32 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

33 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

34 
	#SYS_˛o£
 
__NR_˛o£


	)

35 
	#SYS_¸ót
 
__NR_¸ót


	)

36 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

37 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

38 
	#SYS_dup
 
__NR_dup


	)

39 
	#SYS_dup2
 
__NR_dup2


	)

40 
	#SYS_dup3
 
__NR_dup3


	)

41 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

42 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

43 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

44 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

45 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

46 
	#SYS_evítfd
 
__NR_evítfd


	)

47 
	#SYS_evítfd2
 
__NR_evítfd2


	)

48 
	#SYS_execve
 
__NR_execve


	)

49 
	#SYS_exô
 
__NR_exô


	)

50 
	#SYS_exô_group
 
__NR_exô_group


	)

51 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

52 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

53 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

54 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

55 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

56 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

57 
	#SYS_fchdú
 
__NR_fchdú


	)

58 
	#SYS_fchmod
 
__NR_fchmod


	)

59 
	#SYS_fchmod©
 
__NR_fchmod©


	)

60 
	#SYS_fchown
 
__NR_fchown


	)

61 
	#SYS_fchown32
 
__NR_fchown32


	)

62 
	#SYS_fchow«t
 
__NR_fchow«t


	)

63 
	#SYS_f˙é
 
__NR_f˙é


	)

64 
	#SYS_f˙é64
 
__NR_f˙é64


	)

65 
	#SYS_fd©async
 
__NR_fd©async


	)

66 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

67 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

68 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

69 
	#SYS_Êock
 
__NR_Êock


	)

70 
	#SYS_f‹k
 
__NR_f‹k


	)

71 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

72 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

73 
	#SYS_f°©
 
__NR_f°©


	)

74 
	#SYS_f°©64
 
__NR_f°©64


	)

75 
	#SYS_f°©©64
 
__NR_f°©©64


	)

76 
	#SYS_f°©fs
 
__NR_f°©fs


	)

77 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

78 
	#SYS_fsync
 
__NR_fsync


	)

79 
	#SYS_·ime
 
__NR_·ime


	)

80 
	#SYS_·runˇã
 
__NR_·runˇã


	)

81 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

82 
	#SYS_fuãx
 
__NR_fuãx


	)

83 
	#SYS_futimeßt
 
__NR_futimeßt


	)

84 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

85 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

86 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

87 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

88 
	#SYS_gë˝u
 
__NR_gë˝u


	)

89 
	#SYS_gëcwd
 
__NR_gëcwd


	)

90 
	#SYS_gëdíts
 
__NR_gëdíts


	)

91 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

92 
	#SYS_gëegid
 
__NR_gëegid


	)

93 
	#SYS_gëegid32
 
__NR_gëegid32


	)

94 
	#SYS_gëeuid
 
__NR_gëeuid


	)

95 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

96 
	#SYS_gëgid
 
__NR_gëgid


	)

97 
	#SYS_gëgid32
 
__NR_gëgid32


	)

98 
	#SYS_gëgroups
 
__NR_gëgroups


	)

99 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

100 
	#SYS_gëôimî
 
__NR_gëôimî


	)

101 
	#SYS_gëpgid
 
__NR_gëpgid


	)

102 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

103 
	#SYS_gëpid
 
__NR_gëpid


	)

104 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

105 
	#SYS_gëµid
 
__NR_gëµid


	)

106 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

107 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

108 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

109 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

110 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

111 
	#SYS_gëæimô
 
__NR_gëæimô


	)

112 
	#SYS_gërußge
 
__NR_gërußge


	)

113 
	#SYS_gësid
 
__NR_gësid


	)

114 
	#SYS_gëtid
 
__NR_gëtid


	)

115 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

116 
	#SYS_gëuid
 
__NR_gëuid


	)

117 
	#SYS_gëuid32
 
__NR_gëuid32


	)

118 
	#SYS_gëx©å
 
__NR_gëx©å


	)

119 
	#SYS_gây
 
__NR_gây


	)

120 
	#SYS_idÀ
 
__NR_idÀ


	)

121 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

122 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

123 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

124 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

125 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

126 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

127 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

128 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

129 
	#SYS_io_£tup
 
__NR_io_£tup


	)

130 
	#SYS_io_submô
 
__NR_io_submô


	)

131 
	#SYS_io˘l
 
__NR_io˘l


	)

132 
	#SYS_i›îm
 
__NR_i›îm


	)

133 
	#SYS_i›l
 
__NR_i›l


	)

134 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

135 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

136 
	#SYS_ùc
 
__NR_ùc


	)

137 
	#SYS_kcmp
 
__NR_kcmp


	)

138 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

139 
	#SYS_key˘l
 
__NR_key˘l


	)

140 
	#SYS_kûl
 
__NR_kûl


	)

141 
	#SYS_lchown
 
__NR_lchown


	)

142 
	#SYS_lchown32
 
__NR_lchown32


	)

143 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

144 
	#SYS_lök
 
__NR_lök


	)

145 
	#SYS_lök©
 
__NR_lök©


	)

146 
	#SYS_li°x©å
 
__NR_li°x©å


	)

147 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

148 
	#SYS_lock
 
__NR_lock


	)

149 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

150 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

151 
	#SYS_l£ek
 
__NR_l£ek


	)

152 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

153 
	#SYS_l°©
 
__NR_l°©


	)

154 
	#SYS_l°©64
 
__NR_l°©64


	)

155 
	#SYS_madvi£
 
__NR_madvi£


	)

156 
	#SYS_mböd
 
__NR_mböd


	)

157 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

158 
	#SYS_möc‹e
 
__NR_möc‹e


	)

159 
	#SYS_mkdú
 
__NR_mkdú


	)

160 
	#SYS_mkdú©
 
__NR_mkdú©


	)

161 
	#SYS_mknod
 
__NR_mknod


	)

162 
	#SYS_mknod©
 
__NR_mknod©


	)

163 
	#SYS_mlock
 
__NR_mlock


	)

164 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

165 
	#SYS_mm≠
 
__NR_mm≠


	)

166 
	#SYS_mm≠2
 
__NR_mm≠2


	)

167 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

168 
	#SYS_mou¡
 
__NR_mou¡


	)

169 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

170 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

171 
	#SYS_mpx
 
__NR_mpx


	)

172 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

173 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

174 
	#SYS_mq_›í
 
__NR_mq_›í


	)

175 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

176 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

177 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

178 
	#SYS_mªm≠
 
__NR_mªm≠


	)

179 
	#SYS_msync
 
__NR_msync


	)

180 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

181 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

182 
	#SYS_munm≠
 
__NR_munm≠


	)

183 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

184 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

185 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

186 
	#SYS_ni˚
 
__NR_ni˚


	)

187 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

188 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

189 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

190 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

191 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

192 
	#SYS_›í
 
__NR_›í


	)

193 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

194 
	#SYS_›í©
 
__NR_›í©


	)

195 
	#SYS_∑u£
 
__NR_∑u£


	)

196 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

197 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

198 
	#SYS_pùe
 
__NR_pùe


	)

199 
	#SYS_pùe2
 
__NR_pùe2


	)

200 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

201 
	#SYS_pﬁl
 
__NR_pﬁl


	)

202 
	#SYS_µﬁl
 
__NR_µﬁl


	)

203 
	#SYS_¥˘l
 
__NR_¥˘l


	)

204 
	#SYS_¥ód64
 
__NR_¥ód64


	)

205 
	#SYS_¥ódv
 
__NR_¥ódv


	)

206 
	#SYS_¥limô64
 
__NR_¥limô64


	)

207 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

208 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

209 
	#SYS_¥of
 
__NR_¥of


	)

210 
	#SYS_¥ofû
 
__NR_¥ofû


	)

211 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

212 
	#SYS_±ø˚
 
__NR_±ø˚


	)

213 
	#SYS_puçmsg
 
__NR_puçmsg


	)

214 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

215 
	#SYS_pwrôev
 
__NR_pwrôev


	)

216 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

217 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

218 
	#SYS_ªad
 
__NR_ªad


	)

219 
	#SYS_ªadahód
 
__NR_ªadahód


	)

220 
	#SYS_ªaddú
 
__NR_ªaddú


	)

221 
	#SYS_ªadlök
 
__NR_ªadlök


	)

222 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

223 
	#SYS_ªadv
 
__NR_ªadv


	)

224 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

225 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

226 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

227 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

228 
	#SYS_ª«me
 
__NR_ª«me


	)

229 
	#SYS_ª«mót
 
__NR_ª«mót


	)

230 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

231 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

232 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

233 
	#SYS_rmdú
 
__NR_rmdú


	)

234 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

235 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

236 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

237 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

238 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

239 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

240 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

241 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

242 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

243 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

244 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

245 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

246 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

247 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

248 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

249 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

250 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

251 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

252 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

253 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

254 
	#SYS_£ccomp
 
__NR_£ccomp


	)

255 
	#SYS_£À˘
 
__NR_£À˘


	)

256 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

257 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

258 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

259 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

260 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

261 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

262 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

263 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

264 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

265 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

266 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

267 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

268 
	#SYS_£tgid
 
__NR_£tgid


	)

269 
	#SYS_£tgid32
 
__NR_£tgid32


	)

270 
	#SYS_£tgroups
 
__NR_£tgroups


	)

271 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

272 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

273 
	#SYS_£tôimî
 
__NR_£tôimî


	)

274 
	#SYS_£äs
 
__NR_£äs


	)

275 
	#SYS_£çgid
 
__NR_£çgid


	)

276 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

277 
	#SYS_£åegid
 
__NR_£åegid


	)

278 
	#SYS_£åegid32
 
__NR_£åegid32


	)

279 
	#SYS_£åesgid
 
__NR_£åesgid


	)

280 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

281 
	#SYS_£åesuid
 
__NR_£åesuid


	)

282 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

283 
	#SYS_£åeuid
 
__NR_£åeuid


	)

284 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

285 
	#SYS_£ålimô
 
__NR_£ålimô


	)

286 
	#SYS_£tsid
 
__NR_£tsid


	)

287 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

288 
	#SYS_£tuid
 
__NR_£tuid


	)

289 
	#SYS_£tuid32
 
__NR_£tuid32


	)

290 
	#SYS_£tx©å
 
__NR_£tx©å


	)

291 
	#SYS_sgëmask
 
__NR_sgëmask


	)

292 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

293 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

294 
	#SYS_sig«l
 
__NR_sig«l


	)

295 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

296 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

297 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

298 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

299 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

300 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

301 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

302 
	#SYS_•li˚
 
__NR_•li˚


	)

303 
	#SYS_s£tmask
 
__NR_s£tmask


	)

304 
	#SYS_°©
 
__NR_°©


	)

305 
	#SYS_°©64
 
__NR_°©64


	)

306 
	#SYS_°©fs
 
__NR_°©fs


	)

307 
	#SYS_°©fs64
 
__NR_°©fs64


	)

308 
	#SYS_°ime
 
__NR_°ime


	)

309 
	#SYS_°ty
 
__NR_°ty


	)

310 
	#SYS_sw≠off
 
__NR_sw≠off


	)

311 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

312 
	#SYS_symlök
 
__NR_symlök


	)

313 
	#SYS_symlök©
 
__NR_symlök©


	)

314 
	#SYS_sync
 
__NR_sync


	)

315 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

316 
	#SYS_syncfs
 
__NR_syncfs


	)

317 
	#SYS_sysfs
 
__NR_sysfs


	)

318 
	#SYS_sysöfo
 
__NR_sysöfo


	)

319 
	#SYS_sy¶og
 
__NR_sy¶og


	)

320 
	#SYS_ãe
 
__NR_ãe


	)

321 
	#SYS_tgkûl
 
__NR_tgkûl


	)

322 
	#SYS_time
 
__NR_time


	)

323 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

324 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

325 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

326 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

327 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

328 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

329 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

330 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

331 
	#SYS_times
 
__NR_times


	)

332 
	#SYS_tkûl
 
__NR_tkûl


	)

333 
	#SYS_åunˇã
 
__NR_åunˇã


	)

334 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

335 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

336 
	#SYS_ulimô
 
__NR_ulimô


	)

337 
	#SYS_umask
 
__NR_umask


	)

338 
	#SYS_umou¡
 
__NR_umou¡


	)

339 
	#SYS_umou¡2
 
__NR_umou¡2


	)

340 
	#SYS_u«me
 
__NR_u«me


	)

341 
	#SYS_u∆ök
 
__NR_u∆ök


	)

342 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

343 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

344 
	#SYS_u£lib
 
__NR_u£lib


	)

345 
	#SYS_u°©
 
__NR_u°©


	)

346 
	#SYS_utime
 
__NR_utime


	)

347 
	#SYS_utimíßt
 
__NR_utimíßt


	)

348 
	#SYS_utimes
 
__NR_utimes


	)

349 
	#SYS_vf‹k
 
__NR_vf‹k


	)

350 
	#SYS_vh™gup
 
__NR_vh™gup


	)

351 
	#SYS_vm86
 
__NR_vm86


	)

352 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

353 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

354 
	#SYS_v£rvî
 
__NR_v£rvî


	)

355 
	#SYS_waô4
 
__NR_waô4


	)

356 
	#SYS_waôid
 
__NR_waôid


	)

357 
	#SYS_waôpid
 
__NR_waôpid


	)

358 
	#SYS_wrôe
 
__NR_wrôe


	)

359 
	#SYS_wrôev
 
__NR_wrôev


	)

361 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


362 
	#SYS__sys˘l
 
__NR__sys˘l


	)

363 
	#SYS_ac˚±
 
__NR_ac˚±


	)

364 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

365 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

366 
	#SYS_ac˘
 
__NR_ac˘


	)

367 
	#SYS_add_key
 
__NR_add_key


	)

368 
	#SYS_adjtimex
 
__NR_adjtimex


	)

369 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

370 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

371 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

372 
	#SYS_böd
 
__NR_böd


	)

373 
	#SYS_brk
 
__NR_brk


	)

374 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

375 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

376 
	#SYS_chdú
 
__NR_chdú


	)

377 
	#SYS_chmod
 
__NR_chmod


	)

378 
	#SYS_chown
 
__NR_chown


	)

379 
	#SYS_chroŸ
 
__NR_chroŸ


	)

380 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

381 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

382 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

383 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

384 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

385 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

386 
	#SYS_˛o£
 
__NR_˛o£


	)

387 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

388 
	#SYS_¸ót
 
__NR_¸ót


	)

389 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

390 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

391 
	#SYS_dup
 
__NR_dup


	)

392 
	#SYS_dup2
 
__NR_dup2


	)

393 
	#SYS_dup3
 
__NR_dup3


	)

394 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

395 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

396 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

397 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

398 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

399 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

400 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

401 
	#SYS_evítfd
 
__NR_evítfd


	)

402 
	#SYS_evítfd2
 
__NR_evítfd2


	)

403 
	#SYS_execve
 
__NR_execve


	)

404 
	#SYS_exô
 
__NR_exô


	)

405 
	#SYS_exô_group
 
__NR_exô_group


	)

406 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

407 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

408 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

409 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

410 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

411 
	#SYS_fchdú
 
__NR_fchdú


	)

412 
	#SYS_fchmod
 
__NR_fchmod


	)

413 
	#SYS_fchmod©
 
__NR_fchmod©


	)

414 
	#SYS_fchown
 
__NR_fchown


	)

415 
	#SYS_fchow«t
 
__NR_fchow«t


	)

416 
	#SYS_f˙é
 
__NR_f˙é


	)

417 
	#SYS_fd©async
 
__NR_fd©async


	)

418 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

419 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

420 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

421 
	#SYS_Êock
 
__NR_Êock


	)

422 
	#SYS_f‹k
 
__NR_f‹k


	)

423 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

424 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

425 
	#SYS_f°©
 
__NR_f°©


	)

426 
	#SYS_f°©fs
 
__NR_f°©fs


	)

427 
	#SYS_fsync
 
__NR_fsync


	)

428 
	#SYS_·runˇã
 
__NR_·runˇã


	)

429 
	#SYS_fuãx
 
__NR_fuãx


	)

430 
	#SYS_futimeßt
 
__NR_futimeßt


	)

431 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

432 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

433 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

434 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

435 
	#SYS_gë˝u
 
__NR_gë˝u


	)

436 
	#SYS_gëcwd
 
__NR_gëcwd


	)

437 
	#SYS_gëdíts
 
__NR_gëdíts


	)

438 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

439 
	#SYS_gëegid
 
__NR_gëegid


	)

440 
	#SYS_gëeuid
 
__NR_gëeuid


	)

441 
	#SYS_gëgid
 
__NR_gëgid


	)

442 
	#SYS_gëgroups
 
__NR_gëgroups


	)

443 
	#SYS_gëôimî
 
__NR_gëôimî


	)

444 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

445 
	#SYS_gëpgid
 
__NR_gëpgid


	)

446 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

447 
	#SYS_gëpid
 
__NR_gëpid


	)

448 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

449 
	#SYS_gëµid
 
__NR_gëµid


	)

450 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

451 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

452 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

453 
	#SYS_gëæimô
 
__NR_gëæimô


	)

454 
	#SYS_gërußge
 
__NR_gërußge


	)

455 
	#SYS_gësid
 
__NR_gësid


	)

456 
	#SYS_gësock«me
 
__NR_gësock«me


	)

457 
	#SYS_gësock›t
 
__NR_gësock›t


	)

458 
	#SYS_gëtid
 
__NR_gëtid


	)

459 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

460 
	#SYS_gëuid
 
__NR_gëuid


	)

461 
	#SYS_gëx©å
 
__NR_gëx©å


	)

462 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

463 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

464 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

465 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

466 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

467 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

468 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

469 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

470 
	#SYS_io_£tup
 
__NR_io_£tup


	)

471 
	#SYS_io_submô
 
__NR_io_submô


	)

472 
	#SYS_io˘l
 
__NR_io˘l


	)

473 
	#SYS_i›îm
 
__NR_i›îm


	)

474 
	#SYS_i›l
 
__NR_i›l


	)

475 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

476 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

477 
	#SYS_kcmp
 
__NR_kcmp


	)

478 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

479 
	#SYS_key˘l
 
__NR_key˘l


	)

480 
	#SYS_kûl
 
__NR_kûl


	)

481 
	#SYS_lchown
 
__NR_lchown


	)

482 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

483 
	#SYS_lök
 
__NR_lök


	)

484 
	#SYS_lök©
 
__NR_lök©


	)

485 
	#SYS_li°í
 
__NR_li°í


	)

486 
	#SYS_li°x©å
 
__NR_li°x©å


	)

487 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

488 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

489 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

490 
	#SYS_l£ek
 
__NR_l£ek


	)

491 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

492 
	#SYS_l°©
 
__NR_l°©


	)

493 
	#SYS_madvi£
 
__NR_madvi£


	)

494 
	#SYS_mböd
 
__NR_mböd


	)

495 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

496 
	#SYS_möc‹e
 
__NR_möc‹e


	)

497 
	#SYS_mkdú
 
__NR_mkdú


	)

498 
	#SYS_mkdú©
 
__NR_mkdú©


	)

499 
	#SYS_mknod
 
__NR_mknod


	)

500 
	#SYS_mknod©
 
__NR_mknod©


	)

501 
	#SYS_mlock
 
__NR_mlock


	)

502 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

503 
	#SYS_mm≠
 
__NR_mm≠


	)

504 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

505 
	#SYS_mou¡
 
__NR_mou¡


	)

506 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

507 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

508 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

509 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

510 
	#SYS_mq_›í
 
__NR_mq_›í


	)

511 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

512 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

513 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

514 
	#SYS_mªm≠
 
__NR_mªm≠


	)

515 
	#SYS_msg˘l
 
__NR_msg˘l


	)

516 
	#SYS_msggë
 
__NR_msggë


	)

517 
	#SYS_msgrcv
 
__NR_msgrcv


	)

518 
	#SYS_msg¢d
 
__NR_msg¢d


	)

519 
	#SYS_msync
 
__NR_msync


	)

520 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

521 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

522 
	#SYS_munm≠
 
__NR_munm≠


	)

523 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

524 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

525 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

526 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

527 
	#SYS_›í
 
__NR_›í


	)

528 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

529 
	#SYS_›í©
 
__NR_›í©


	)

530 
	#SYS_∑u£
 
__NR_∑u£


	)

531 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

532 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

533 
	#SYS_pùe
 
__NR_pùe


	)

534 
	#SYS_pùe2
 
__NR_pùe2


	)

535 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

536 
	#SYS_pﬁl
 
__NR_pﬁl


	)

537 
	#SYS_µﬁl
 
__NR_µﬁl


	)

538 
	#SYS_¥˘l
 
__NR_¥˘l


	)

539 
	#SYS_¥ód64
 
__NR_¥ód64


	)

540 
	#SYS_¥ódv
 
__NR_¥ódv


	)

541 
	#SYS_¥limô64
 
__NR_¥limô64


	)

542 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

543 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

544 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

545 
	#SYS_±ø˚
 
__NR_±ø˚


	)

546 
	#SYS_puçmsg
 
__NR_puçmsg


	)

547 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

548 
	#SYS_pwrôev
 
__NR_pwrôev


	)

549 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

550 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

551 
	#SYS_ªad
 
__NR_ªad


	)

552 
	#SYS_ªadahód
 
__NR_ªadahód


	)

553 
	#SYS_ªadlök
 
__NR_ªadlök


	)

554 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

555 
	#SYS_ªadv
 
__NR_ªadv


	)

556 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

557 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

558 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

559 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

560 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

561 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

562 
	#SYS_ª«me
 
__NR_ª«me


	)

563 
	#SYS_ª«mót
 
__NR_ª«mót


	)

564 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

565 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

566 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

567 
	#SYS_rmdú
 
__NR_rmdú


	)

568 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

569 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

570 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

571 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

572 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

573 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

574 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

575 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

576 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

577 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

578 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

579 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

580 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

581 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

582 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

583 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

584 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

585 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

586 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

587 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

588 
	#SYS_£ccomp
 
__NR_£ccomp


	)

589 
	#SYS_£curôy
 
__NR_£curôy


	)

590 
	#SYS_£À˘
 
__NR_£À˘


	)

591 
	#SYS_£m˘l
 
__NR_£m˘l


	)

592 
	#SYS_£mgë
 
__NR_£mgë


	)

593 
	#SYS_£m›
 
__NR_£m›


	)

594 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

595 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

596 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

597 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

598 
	#SYS_£ndto
 
__NR_£ndto


	)

599 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

600 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

601 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

602 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

603 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

604 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

605 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

606 
	#SYS_£tgid
 
__NR_£tgid


	)

607 
	#SYS_£tgroups
 
__NR_£tgroups


	)

608 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

609 
	#SYS_£tôimî
 
__NR_£tôimî


	)

610 
	#SYS_£äs
 
__NR_£äs


	)

611 
	#SYS_£çgid
 
__NR_£çgid


	)

612 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

613 
	#SYS_£åegid
 
__NR_£åegid


	)

614 
	#SYS_£åesgid
 
__NR_£åesgid


	)

615 
	#SYS_£åesuid
 
__NR_£åesuid


	)

616 
	#SYS_£åeuid
 
__NR_£åeuid


	)

617 
	#SYS_£ålimô
 
__NR_£ålimô


	)

618 
	#SYS_£tsid
 
__NR_£tsid


	)

619 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

620 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

621 
	#SYS_£tuid
 
__NR_£tuid


	)

622 
	#SYS_£tx©å
 
__NR_£tx©å


	)

623 
	#SYS_shm©
 
__NR_shm©


	)

624 
	#SYS_shm˘l
 
__NR_shm˘l


	)

625 
	#SYS_shmdt
 
__NR_shmdt


	)

626 
	#SYS_shmgë
 
__NR_shmgë


	)

627 
	#SYS_shutdown
 
__NR_shutdown


	)

628 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

629 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

630 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

631 
	#SYS_sockë
 
__NR_sockë


	)

632 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

633 
	#SYS_•li˚
 
__NR_•li˚


	)

634 
	#SYS_°©
 
__NR_°©


	)

635 
	#SYS_°©fs
 
__NR_°©fs


	)

636 
	#SYS_sw≠off
 
__NR_sw≠off


	)

637 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

638 
	#SYS_symlök
 
__NR_symlök


	)

639 
	#SYS_symlök©
 
__NR_symlök©


	)

640 
	#SYS_sync
 
__NR_sync


	)

641 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

642 
	#SYS_syncfs
 
__NR_syncfs


	)

643 
	#SYS_sysfs
 
__NR_sysfs


	)

644 
	#SYS_sysöfo
 
__NR_sysöfo


	)

645 
	#SYS_sy¶og
 
__NR_sy¶og


	)

646 
	#SYS_ãe
 
__NR_ãe


	)

647 
	#SYS_tgkûl
 
__NR_tgkûl


	)

648 
	#SYS_time
 
__NR_time


	)

649 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

650 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

651 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

652 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

653 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

654 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

655 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

656 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

657 
	#SYS_times
 
__NR_times


	)

658 
	#SYS_tkûl
 
__NR_tkûl


	)

659 
	#SYS_åunˇã
 
__NR_åunˇã


	)

660 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

661 
	#SYS_umask
 
__NR_umask


	)

662 
	#SYS_umou¡2
 
__NR_umou¡2


	)

663 
	#SYS_u«me
 
__NR_u«me


	)

664 
	#SYS_u∆ök
 
__NR_u∆ök


	)

665 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

666 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

667 
	#SYS_u£lib
 
__NR_u£lib


	)

668 
	#SYS_u°©
 
__NR_u°©


	)

669 
	#SYS_utime
 
__NR_utime


	)

670 
	#SYS_utimíßt
 
__NR_utimíßt


	)

671 
	#SYS_utimes
 
__NR_utimes


	)

672 
	#SYS_vf‹k
 
__NR_vf‹k


	)

673 
	#SYS_vh™gup
 
__NR_vh™gup


	)

674 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

675 
	#SYS_v£rvî
 
__NR_v£rvî


	)

676 
	#SYS_waô4
 
__NR_waô4


	)

677 
	#SYS_waôid
 
__NR_waôid


	)

678 
	#SYS_wrôe
 
__NR_wrôe


	)

679 
	#SYS_wrôev
 
__NR_wrôev


	)

681 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


682 
	#SYS_ac˚±
 
__NR_ac˚±


	)

683 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

684 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

685 
	#SYS_ac˘
 
__NR_ac˘


	)

686 
	#SYS_add_key
 
__NR_add_key


	)

687 
	#SYS_adjtimex
 
__NR_adjtimex


	)

688 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

689 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

690 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

691 
	#SYS_böd
 
__NR_böd


	)

692 
	#SYS_brk
 
__NR_brk


	)

693 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

694 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

695 
	#SYS_chdú
 
__NR_chdú


	)

696 
	#SYS_chmod
 
__NR_chmod


	)

697 
	#SYS_chown
 
__NR_chown


	)

698 
	#SYS_chroŸ
 
__NR_chroŸ


	)

699 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

700 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

701 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

702 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

703 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

704 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

705 
	#SYS_˛o£
 
__NR_˛o£


	)

706 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

707 
	#SYS_¸ót
 
__NR_¸ót


	)

708 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

709 
	#SYS_dup
 
__NR_dup


	)

710 
	#SYS_dup2
 
__NR_dup2


	)

711 
	#SYS_dup3
 
__NR_dup3


	)

712 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

713 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

714 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

715 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

716 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

717 
	#SYS_evítfd
 
__NR_evítfd


	)

718 
	#SYS_evítfd2
 
__NR_evítfd2


	)

719 
	#SYS_execve
 
__NR_execve


	)

720 
	#SYS_exô
 
__NR_exô


	)

721 
	#SYS_exô_group
 
__NR_exô_group


	)

722 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

723 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

724 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

725 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

726 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

727 
	#SYS_fchdú
 
__NR_fchdú


	)

728 
	#SYS_fchmod
 
__NR_fchmod


	)

729 
	#SYS_fchmod©
 
__NR_fchmod©


	)

730 
	#SYS_fchown
 
__NR_fchown


	)

731 
	#SYS_fchow«t
 
__NR_fchow«t


	)

732 
	#SYS_f˙é
 
__NR_f˙é


	)

733 
	#SYS_fd©async
 
__NR_fd©async


	)

734 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

735 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

736 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

737 
	#SYS_Êock
 
__NR_Êock


	)

738 
	#SYS_f‹k
 
__NR_f‹k


	)

739 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

740 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

741 
	#SYS_f°©
 
__NR_f°©


	)

742 
	#SYS_f°©fs
 
__NR_f°©fs


	)

743 
	#SYS_fsync
 
__NR_fsync


	)

744 
	#SYS_·runˇã
 
__NR_·runˇã


	)

745 
	#SYS_fuãx
 
__NR_fuãx


	)

746 
	#SYS_futimeßt
 
__NR_futimeßt


	)

747 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

748 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

749 
	#SYS_gë˝u
 
__NR_gë˝u


	)

750 
	#SYS_gëcwd
 
__NR_gëcwd


	)

751 
	#SYS_gëdíts
 
__NR_gëdíts


	)

752 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

753 
	#SYS_gëegid
 
__NR_gëegid


	)

754 
	#SYS_gëeuid
 
__NR_gëeuid


	)

755 
	#SYS_gëgid
 
__NR_gëgid


	)

756 
	#SYS_gëgroups
 
__NR_gëgroups


	)

757 
	#SYS_gëôimî
 
__NR_gëôimî


	)

758 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

759 
	#SYS_gëpgid
 
__NR_gëpgid


	)

760 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

761 
	#SYS_gëpid
 
__NR_gëpid


	)

762 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

763 
	#SYS_gëµid
 
__NR_gëµid


	)

764 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

765 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

766 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

767 
	#SYS_gëæimô
 
__NR_gëæimô


	)

768 
	#SYS_gërußge
 
__NR_gërußge


	)

769 
	#SYS_gësid
 
__NR_gësid


	)

770 
	#SYS_gësock«me
 
__NR_gësock«me


	)

771 
	#SYS_gësock›t
 
__NR_gësock›t


	)

772 
	#SYS_gëtid
 
__NR_gëtid


	)

773 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

774 
	#SYS_gëuid
 
__NR_gëuid


	)

775 
	#SYS_gëx©å
 
__NR_gëx©å


	)

776 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

777 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

778 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

779 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

780 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

781 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

782 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

783 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

784 
	#SYS_io_£tup
 
__NR_io_£tup


	)

785 
	#SYS_io_submô
 
__NR_io_submô


	)

786 
	#SYS_io˘l
 
__NR_io˘l


	)

787 
	#SYS_i›îm
 
__NR_i›îm


	)

788 
	#SYS_i›l
 
__NR_i›l


	)

789 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

790 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

791 
	#SYS_kcmp
 
__NR_kcmp


	)

792 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

793 
	#SYS_key˘l
 
__NR_key˘l


	)

794 
	#SYS_kûl
 
__NR_kûl


	)

795 
	#SYS_lchown
 
__NR_lchown


	)

796 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

797 
	#SYS_lök
 
__NR_lök


	)

798 
	#SYS_lök©
 
__NR_lök©


	)

799 
	#SYS_li°í
 
__NR_li°í


	)

800 
	#SYS_li°x©å
 
__NR_li°x©å


	)

801 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

802 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

803 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

804 
	#SYS_l£ek
 
__NR_l£ek


	)

805 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

806 
	#SYS_l°©
 
__NR_l°©


	)

807 
	#SYS_madvi£
 
__NR_madvi£


	)

808 
	#SYS_mböd
 
__NR_mböd


	)

809 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

810 
	#SYS_möc‹e
 
__NR_möc‹e


	)

811 
	#SYS_mkdú
 
__NR_mkdú


	)

812 
	#SYS_mkdú©
 
__NR_mkdú©


	)

813 
	#SYS_mknod
 
__NR_mknod


	)

814 
	#SYS_mknod©
 
__NR_mknod©


	)

815 
	#SYS_mlock
 
__NR_mlock


	)

816 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

817 
	#SYS_mm≠
 
__NR_mm≠


	)

818 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

819 
	#SYS_mou¡
 
__NR_mou¡


	)

820 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

821 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

822 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

823 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

824 
	#SYS_mq_›í
 
__NR_mq_›í


	)

825 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

826 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

827 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

828 
	#SYS_mªm≠
 
__NR_mªm≠


	)

829 
	#SYS_msg˘l
 
__NR_msg˘l


	)

830 
	#SYS_msggë
 
__NR_msggë


	)

831 
	#SYS_msgrcv
 
__NR_msgrcv


	)

832 
	#SYS_msg¢d
 
__NR_msg¢d


	)

833 
	#SYS_msync
 
__NR_msync


	)

834 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

835 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

836 
	#SYS_munm≠
 
__NR_munm≠


	)

837 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

838 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

839 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

840 
	#SYS_›í
 
__NR_›í


	)

841 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

842 
	#SYS_›í©
 
__NR_›í©


	)

843 
	#SYS_∑u£
 
__NR_∑u£


	)

844 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

845 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

846 
	#SYS_pùe
 
__NR_pùe


	)

847 
	#SYS_pùe2
 
__NR_pùe2


	)

848 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

849 
	#SYS_pﬁl
 
__NR_pﬁl


	)

850 
	#SYS_µﬁl
 
__NR_µﬁl


	)

851 
	#SYS_¥˘l
 
__NR_¥˘l


	)

852 
	#SYS_¥ód64
 
__NR_¥ód64


	)

853 
	#SYS_¥ódv
 
__NR_¥ódv


	)

854 
	#SYS_¥limô64
 
__NR_¥limô64


	)

855 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

856 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

857 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

858 
	#SYS_±ø˚
 
__NR_±ø˚


	)

859 
	#SYS_puçmsg
 
__NR_puçmsg


	)

860 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

861 
	#SYS_pwrôev
 
__NR_pwrôev


	)

862 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

863 
	#SYS_ªad
 
__NR_ªad


	)

864 
	#SYS_ªadahód
 
__NR_ªadahód


	)

865 
	#SYS_ªadlök
 
__NR_ªadlök


	)

866 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

867 
	#SYS_ªadv
 
__NR_ªadv


	)

868 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

869 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

870 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

871 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

872 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

873 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

874 
	#SYS_ª«me
 
__NR_ª«me


	)

875 
	#SYS_ª«mót
 
__NR_ª«mót


	)

876 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

877 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

878 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

879 
	#SYS_rmdú
 
__NR_rmdú


	)

880 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

881 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

882 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

883 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

884 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

885 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

886 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

887 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

888 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

889 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

890 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

891 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

892 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

893 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

894 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

895 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

896 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

897 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

898 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

899 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

900 
	#SYS_£ccomp
 
__NR_£ccomp


	)

901 
	#SYS_£curôy
 
__NR_£curôy


	)

902 
	#SYS_£À˘
 
__NR_£À˘


	)

903 
	#SYS_£m˘l
 
__NR_£m˘l


	)

904 
	#SYS_£mgë
 
__NR_£mgë


	)

905 
	#SYS_£m›
 
__NR_£m›


	)

906 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

907 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

908 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

909 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

910 
	#SYS_£ndto
 
__NR_£ndto


	)

911 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

912 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

913 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

914 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

915 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

916 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

917 
	#SYS_£tgid
 
__NR_£tgid


	)

918 
	#SYS_£tgroups
 
__NR_£tgroups


	)

919 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

920 
	#SYS_£tôimî
 
__NR_£tôimî


	)

921 
	#SYS_£äs
 
__NR_£äs


	)

922 
	#SYS_£çgid
 
__NR_£çgid


	)

923 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

924 
	#SYS_£åegid
 
__NR_£åegid


	)

925 
	#SYS_£åesgid
 
__NR_£åesgid


	)

926 
	#SYS_£åesuid
 
__NR_£åesuid


	)

927 
	#SYS_£åeuid
 
__NR_£åeuid


	)

928 
	#SYS_£ålimô
 
__NR_£ålimô


	)

929 
	#SYS_£tsid
 
__NR_£tsid


	)

930 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

931 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

932 
	#SYS_£tuid
 
__NR_£tuid


	)

933 
	#SYS_£tx©å
 
__NR_£tx©å


	)

934 
	#SYS_shm©
 
__NR_shm©


	)

935 
	#SYS_shm˘l
 
__NR_shm˘l


	)

936 
	#SYS_shmdt
 
__NR_shmdt


	)

937 
	#SYS_shmgë
 
__NR_shmgë


	)

938 
	#SYS_shutdown
 
__NR_shutdown


	)

939 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

940 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

941 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

942 
	#SYS_sockë
 
__NR_sockë


	)

943 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

944 
	#SYS_•li˚
 
__NR_•li˚


	)

945 
	#SYS_°©
 
__NR_°©


	)

946 
	#SYS_°©fs
 
__NR_°©fs


	)

947 
	#SYS_sw≠off
 
__NR_sw≠off


	)

948 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

949 
	#SYS_symlök
 
__NR_symlök


	)

950 
	#SYS_symlök©
 
__NR_symlök©


	)

951 
	#SYS_sync
 
__NR_sync


	)

952 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

953 
	#SYS_syncfs
 
__NR_syncfs


	)

954 
	#SYS_sysfs
 
__NR_sysfs


	)

955 
	#SYS_sysöfo
 
__NR_sysöfo


	)

956 
	#SYS_sy¶og
 
__NR_sy¶og


	)

957 
	#SYS_ãe
 
__NR_ãe


	)

958 
	#SYS_tgkûl
 
__NR_tgkûl


	)

959 
	#SYS_time
 
__NR_time


	)

960 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

961 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

962 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

963 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

964 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

965 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

966 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

967 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

968 
	#SYS_times
 
__NR_times


	)

969 
	#SYS_tkûl
 
__NR_tkûl


	)

970 
	#SYS_åunˇã
 
__NR_åunˇã


	)

971 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

972 
	#SYS_umask
 
__NR_umask


	)

973 
	#SYS_umou¡2
 
__NR_umou¡2


	)

974 
	#SYS_u«me
 
__NR_u«me


	)

975 
	#SYS_u∆ök
 
__NR_u∆ök


	)

976 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

977 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

978 
	#SYS_u°©
 
__NR_u°©


	)

979 
	#SYS_utime
 
__NR_utime


	)

980 
	#SYS_utimíßt
 
__NR_utimíßt


	)

981 
	#SYS_utimes
 
__NR_utimes


	)

982 
	#SYS_vf‹k
 
__NR_vf‹k


	)

983 
	#SYS_vh™gup
 
__NR_vh™gup


	)

984 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

985 
	#SYS_waô4
 
__NR_waô4


	)

986 
	#SYS_waôid
 
__NR_waôid


	)

987 
	#SYS_wrôe
 
__NR_wrôe


	)

988 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

23 
	mIFA_UNSPEC
,

24 
	mIFA_ADDRESS
,

25 
	mIFA_LOCAL
,

26 
	mIFA_LABEL
,

27 
	mIFA_BROADCAST
,

28 
	mIFA_ANYCAST
,

29 
	mIFA_CACHEINFO
,

30 
	mIFA_MULTICAST
,

31 
	m__IFA_MAX
,

34 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

37 
	#IFA_F_SECONDARY
 0x01

	)

38 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

40 
	#IFA_F_NODAD
 0x02

	)

41 
	#IFA_F_OPTIMISTIC
 0x04

	)

42 
	#IFA_F_DADFAILED
 0x08

	)

43 
	#IFA_F_HOMEADDRESS
 0x10

	)

44 
	#IFA_F_DEPRECATED
 0x20

	)

45 
	#IFA_F_TENTATIVE
 0x40

	)

46 
	#IFA_F_PERMANENT
 0x80

	)

48 
	siÁ_ˇcheöfo
 {

49 
__u32
 
	miÁ_¥e„ªd
;

50 
__u32
 
	miÁ_vÆid
;

51 
__u32
 
	mc°amp
;

52 
__u32
 
	mt°amp
;

56 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

57 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_BATMAN
 0x4305

	)

52 
	#ETH_P_DEC
 0x6000

	)

53 
	#ETH_P_DNA_DL
 0x6001

	)

54 
	#ETH_P_DNA_RC
 0x6002

	)

55 
	#ETH_P_DNA_RT
 0x6003

	)

56 
	#ETH_P_LAT
 0x6004

	)

57 
	#ETH_P_DIAG
 0x6005

	)

58 
	#ETH_P_CUST
 0x6006

	)

59 
	#ETH_P_SCA
 0x6007

	)

60 
	#ETH_P_TEB
 0x6558

	)

61 
	#ETH_P_RARP
 0x8035

	)

62 
	#ETH_P_ATALK
 0x809B

	)

63 
	#ETH_P_AARP
 0x80F3

	)

64 
	#ETH_P_8021Q
 0x8100

	)

65 
	#ETH_P_IPX
 0x8137

	)

66 
	#ETH_P_IPV6
 0x86DD

	)

67 
	#ETH_P_PAUSE
 0x8808

	)

68 
	#ETH_P_SLOW
 0x8809

	)

69 
	#ETH_P_WCCP
 0x883E

	)

71 
	#ETH_P_PPP_DISC
 0x8863

	)

72 
	#ETH_P_PPP_SES
 0x8864

	)

73 
	#ETH_P_MPLS_UC
 0x8847

	)

74 
	#ETH_P_MPLS_MC
 0x8848

	)

75 
	#ETH_P_ATMMPOA
 0x884¯

	)

76 
	#ETH_P_LINK_CTL
 0x886¯

	)

77 
	#ETH_P_ATMFATE
 0x8884

	)

80 
	#ETH_P_PAE
 0x888E

	)

81 
	#ETH_P_AOE
 0x88A2

	)

82 
	#ETH_P_8021AD
 0x88A8

	)

83 
	#ETH_P_802_EX1
 0x88B5

	)

84 
	#ETH_P_TIPC
 0x88CA

	)

85 
	#ETH_P_8021AH
 0x88E7

	)

86 
	#ETH_P_MVRP
 0x88F5

	)

87 
	#ETH_P_1588
 0x88F7

	)

88 
	#ETH_P_PRP
 0x88FB

	)

89 
	#ETH_P_FCOE
 0x8906

	)

90 
	#ETH_P_TDLS
 0x890D

	)

91 
	#ETH_P_FIP
 0x8914

	)

92 
	#ETH_P_QINQ1
 0x9100

	)

93 
	#ETH_P_QINQ2
 0x9200

	)

94 
	#ETH_P_QINQ3
 0x9300

	)

95 
	#ETH_P_EDSA
 0xDADA

	)

96 
	#ETH_P_AF_IUCV
 0xFBFB

	)

98 
	#ETH_P_802_3_MIN
 0x0600

	)

105 
	#ETH_P_802_3
 0x0001

	)

106 
	#ETH_P_AX25
 0x0002

	)

107 
	#ETH_P_ALL
 0x0003

	)

108 
	#ETH_P_802_2
 0x0004

	)

109 
	#ETH_P_SNAP
 0x0005

	)

110 
	#ETH_P_DDCMP
 0x0006

	)

111 
	#ETH_P_WAN_PPP
 0x0007

	)

112 
	#ETH_P_PPP_MP
 0x0008

	)

113 
	#ETH_P_LOCALTALK
 0x0009

	)

114 
	#ETH_P_CAN
 0x000C

	)

115 
	#ETH_P_CANFD
 0x000D

	)

116 
	#ETH_P_PPPTALK
 0x0010

	)

117 
	#ETH_P_TR_802_2
 0x0011

	)

118 
	#ETH_P_MOBITEX
 0x0015

	)

119 
	#ETH_P_CONTROL
 0x0016

	)

120 
	#ETH_P_IRDA
 0x0017

	)

121 
	#ETH_P_ECONET
 0x0018

	)

122 
	#ETH_P_HDLC
 0x0019

	)

123 
	#ETH_P_ARCNET
 0x001A

	)

124 
	#ETH_P_DSA
 0x001B

	)

125 
	#ETH_P_TRAILER
 0x001C

	)

126 
	#ETH_P_PHONET
 0x00F5

	)

127 
	#ETH_P_IEEE802154
 0x00F6

	)

128 
	#ETH_P_CAIF
 0x00F7

	)

134 
	sëhhdr
 {

135 
	mh_de°
[
ETH_ALEN
];

136 
	mh_sour˚
[
ETH_ALEN
];

137 
__be16
 
	mh_¥Ÿo
;

138 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	mIFLA_NUM_TX_QUEUES
,

144 
	mIFLA_NUM_RX_QUEUES
,

145 
	mIFLA_CARRIER
,

146 
	mIFLA_PHYS_PORT_ID
,

147 
	m__IFLA_MAX


151 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

154 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

155 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

158 
	mIFLA_INET_UNSPEC
,

159 
	mIFLA_INET_CONF
,

160 
	m__IFLA_INET_MAX
,

163 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

196 
	mIFLA_INET6_UNSPEC
,

197 
	mIFLA_INET6_FLAGS
,

198 
	mIFLA_INET6_CONF
,

199 
	mIFLA_INET6_STATS
,

200 
	mIFLA_INET6_MCAST
,

201 
	mIFLA_INET6_CACHEINFO
,

202 
	mIFLA_INET6_ICMP6STATS
,

203 
	mIFLA_INET6_TOKEN
,

204 
	m__IFLA_INET6_MAX


207 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

210 
	mBRIDGE_MODE_UNSPEC
,

211 
	mBRIDGE_MODE_HAIRPIN
,

215 
	mIFLA_BRPORT_UNSPEC
,

216 
	mIFLA_BRPORT_STATE
,

217 
	mIFLA_BRPORT_PRIORITY
,

218 
	mIFLA_BRPORT_COST
,

219 
	mIFLA_BRPORT_MODE
,

220 
	mIFLA_BRPORT_GUARD
,

221 
	mIFLA_BRPORT_PROTECT
,

222 
	mIFLA_BRPORT_FAST_LEAVE
,

223 
	mIFLA_BRPORT_LEARNING
,

224 
	mIFLA_BRPORT_UNICAST_FLOOD
,

225 
	m__IFLA_BRPORT_MAX


227 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

229 
	siÊa_ˇcheöfo
 {

230 
__u32
 
	mmax_ªasm_Àn
;

231 
__u32
 
	mt°amp
;

232 
__u32
 
	mªachabÀ_time
;

233 
__u32
 
	mªå™s_time
;

237 
	mIFLA_INFO_UNSPEC
,

238 
	mIFLA_INFO_KIND
,

239 
	mIFLA_INFO_DATA
,

240 
	mIFLA_INFO_XSTATS
,

241 
	m__IFLA_INFO_MAX
,

244 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

249 
	mIFLA_VLAN_UNSPEC
,

250 
	mIFLA_VLAN_ID
,

251 
	mIFLA_VLAN_FLAGS
,

252 
	mIFLA_VLAN_EGRESS_QOS
,

253 
	mIFLA_VLAN_INGRESS_QOS
,

254 
	mIFLA_VLAN_PROTOCOL
,

255 
	m__IFLA_VLAN_MAX
,

258 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

260 
	siÊa_vœn_Êags
 {

261 
__u32
 
	mÊags
;

262 
__u32
 
	mmask
;

266 
	mIFLA_VLAN_QOS_UNSPEC
,

267 
	mIFLA_VLAN_QOS_MAPPING
,

268 
	m__IFLA_VLAN_QOS_MAX


271 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

273 
	siÊa_vœn_qos_m≠pög
 {

274 
__u32
 
	m‰om
;

275 
__u32
 
	mto
;

280 
	mIFLA_MACVLAN_UNSPEC
,

281 
	mIFLA_MACVLAN_MODE
,

282 
	mIFLA_MACVLAN_FLAGS
,

283 
	m__IFLA_MACVLAN_MAX
,

286 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

288 
	emacvœn_mode
 {

289 
	mMACVLAN_MODE_PRIVATE
 = 1,

290 
	mMACVLAN_MODE_VEPA
 = 2,

291 
	mMACVLAN_MODE_BRIDGE
 = 4,

292 
	mMACVLAN_MODE_PASSTHRU
 = 8,

295 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

299 
	mIFLA_VXLAN_UNSPEC
,

300 
	mIFLA_VXLAN_ID
,

301 
	mIFLA_VXLAN_GROUP
,

302 
	mIFLA_VXLAN_LINK
,

303 
	mIFLA_VXLAN_LOCAL
,

304 
	mIFLA_VXLAN_TTL
,

305 
	mIFLA_VXLAN_TOS
,

306 
	mIFLA_VXLAN_LEARNING
,

307 
	mIFLA_VXLAN_AGEING
,

308 
	mIFLA_VXLAN_LIMIT
,

309 
	mIFLA_VXLAN_PORT_RANGE
,

310 
	mIFLA_VXLAN_PROXY
,

311 
	mIFLA_VXLAN_RSC
,

312 
	mIFLA_VXLAN_L2MISS
,

313 
	mIFLA_VXLAN_L3MISS
,

314 
	mIFLA_VXLAN_PORT
,

315 
	mIFLA_VXLAN_GROUP6
,

316 
	mIFLA_VXLAN_LOCAL6
,

317 
	m__IFLA_VXLAN_MAX


319 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

321 
	siÊa_vxœn_p‹t_ønge
 {

322 
__be16
 
	mlow
;

323 
__be16
 
	mhigh
;

329 
	mIFLA_BOND_UNSPEC
,

330 
	mIFLA_BOND_MODE
,

331 
	mIFLA_BOND_ACTIVE_SLAVE
,

332 
	m__IFLA_BOND_MAX
,

335 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

340 
	mIFLA_VF_INFO_UNSPEC
,

341 
	mIFLA_VF_INFO
,

342 
	m__IFLA_VF_INFO_MAX
,

345 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

348 
	mIFLA_VF_UNSPEC
,

349 
	mIFLA_VF_MAC
,

350 
	mIFLA_VF_VLAN
,

351 
	mIFLA_VF_TX_RATE
,

352 
	mIFLA_VF_SPOOFCHK
,

353 
	mIFLA_VF_LINK_STATE
,

354 
	m__IFLA_VF_MAX
,

357 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

359 
	siÊa_vf_mac
 {

360 
__u32
 
	mvf
;

361 
__u8
 
	mmac
[32];

364 
	siÊa_vf_vœn
 {

365 
__u32
 
	mvf
;

366 
__u32
 
	mvœn
;

367 
__u32
 
	mqos
;

370 
	siÊa_vf_tx_øã
 {

371 
__u32
 
	mvf
;

372 
__u32
 
	møã
;

375 
	siÊa_vf_•oofchk
 {

376 
__u32
 
	mvf
;

377 
__u32
 
	m£âög
;

381 
	mIFLA_VF_LINK_STATE_AUTO
,

382 
	mIFLA_VF_LINK_STATE_ENABLE
,

383 
	mIFLA_VF_LINK_STATE_DISABLE
,

384 
	m__IFLA_VF_LINK_STATE_MAX
,

387 
	siÊa_vf_lök_°©e
 {

388 
__u32
 
	mvf
;

389 
__u32
 
	mlök_°©e
;

408 
	mIFLA_VF_PORT_UNSPEC
,

409 
	mIFLA_VF_PORT
,

410 
	m__IFLA_VF_PORT_MAX
,

413 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

416 
	mIFLA_PORT_UNSPEC
,

417 
	mIFLA_PORT_VF
,

418 
	mIFLA_PORT_PROFILE
,

419 
	mIFLA_PORT_VSI_TYPE
,

420 
	mIFLA_PORT_INSTANCE_UUID
,

421 
	mIFLA_PORT_HOST_UUID
,

422 
	mIFLA_PORT_REQUEST
,

423 
	mIFLA_PORT_RESPONSE
,

424 
	m__IFLA_PORT_MAX
,

427 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

429 
	#PORT_PROFILE_MAX
 40

	)

430 
	#PORT_UUID_MAX
 16

	)

431 
	#PORT_SELF_VF
 -1

	)

434 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

435 
	mPORT_REQUEST_PREASSOCIATE_RR
,

436 
	mPORT_REQUEST_ASSOCIATE
,

437 
	mPORT_REQUEST_DISASSOCIATE
,

441 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

442 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

443 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

444 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

445 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

446 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

447 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

449 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

450 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

451 
	mPORT_PROFILE_RESPONSE_INVALID
,

452 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

453 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

454 
	mPORT_PROFILE_RESPONSE_ERROR
,

457 
	siÊa_p‹t_vsi
 {

458 
__u8
 
	mvsi_mgr_id
;

459 
__u8
 
	mvsi_ty≥_id
[3];

460 
__u8
 
	mvsi_ty≥_vîsi⁄
;

461 
__u8
 
	m∑d
[3];

468 
	mIFLA_IPOIB_UNSPEC
,

469 
	mIFLA_IPOIB_PKEY
,

470 
	mIFLA_IPOIB_MODE
,

471 
	mIFLA_IPOIB_UMCAST
,

472 
	m__IFLA_IPOIB_MAX


476 
	mIPOIB_MODE_DATAGRAM
 = 0,

477 
	mIPOIB_MODE_CONNECTED
 = 1,

480 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

486 
	mIFLA_HSR_UNSPEC
,

487 
	mIFLA_HSR_SLAVE1
,

488 
	mIFLA_HSR_SLAVE2
,

489 
	mIFLA_HSR_MULTICAST_SPEC
,

490 
	mIFLA_HSR_SUPERVISION_ADDR
,

491 
	mIFLA_HSR_SEQ_NR
,

492 
	m__IFLA_HSR_MAX
,

495 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	mNDA_VLAN
,

24 
	mNDA_PORT
,

25 
	mNDA_VNI
,

26 
	mNDA_IFINDEX
,

27 
	m__NDA_MAX


30 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

36 
	#NTF_USE
 0x01

	)

37 
	#NTF_PROXY
 0x08

	)

38 
	#NTF_ROUTER
 0x80

	)

40 
	#NTF_SELF
 0x02

	)

41 
	#NTF_MASTER
 0x04

	)

47 
	#NUD_INCOMPLETE
 0x01

	)

48 
	#NUD_REACHABLE
 0x02

	)

49 
	#NUD_STALE
 0x04

	)

50 
	#NUD_DELAY
 0x08

	)

51 
	#NUD_PROBE
 0x10

	)

52 
	#NUD_FAILED
 0x20

	)

55 
	#NUD_NOARP
 0x40

	)

56 
	#NUD_PERMANENT
 0x80

	)

57 
	#NUD_NONE
 0x00

	)

64 
	snda_ˇcheöfo
 {

65 
__u32
 
	mndm_c⁄fúmed
;

66 
__u32
 
	mndm_u£d
;

67 
__u32
 
	mndm_upd©ed
;

68 
__u32
 
	mndm_ªf˙t
;

96 
	sndt_°©s
 {

97 
__u64
 
	mndts_Ælocs
;

98 
__u64
 
	mndts_de°roys
;

99 
__u64
 
	mndts_hash_grows
;

100 
__u64
 
	mndts_ªs_Áûed
;

101 
__u64
 
	mndts_lookups
;

102 
__u64
 
	mndts_hôs
;

103 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

104 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

105 
__u64
 
	mndts_≥riodic_gc_runs
;

106 
__u64
 
	mndts_f‹˚d_gc_runs
;

110 
	mNDTPA_UNSPEC
,

111 
	mNDTPA_IFINDEX
,

112 
	mNDTPA_REFCNT
,

113 
	mNDTPA_REACHABLE_TIME
,

114 
	mNDTPA_BASE_REACHABLE_TIME
,

115 
	mNDTPA_RETRANS_TIME
,

116 
	mNDTPA_GC_STALETIME
,

117 
	mNDTPA_DELAY_PROBE_TIME
,

118 
	mNDTPA_QUEUE_LEN
,

119 
	mNDTPA_APP_PROBES
,

120 
	mNDTPA_UCAST_PROBES
,

121 
	mNDTPA_MCAST_PROBES
,

122 
	mNDTPA_ANYCAST_DELAY
,

123 
	mNDTPA_PROXY_DELAY
,

124 
	mNDTPA_PROXY_QLEN
,

125 
	mNDTPA_LOCKTIME
,

126 
	mNDTPA_QUEUE_LENBYTES
,

127 
	m__NDTPA_MAX


129 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

131 
	sndtmsg
 {

132 
__u8
 
	mndtm_Ámûy
;

133 
__u8
 
	mndtm_∑d1
;

134 
__u16
 
	mndtm_∑d2
;

137 
	sndt_c⁄fig
 {

138 
__u16
 
	mndtc_key_Àn
;

139 
__u16
 
	mndtc_íåy_size
;

140 
__u32
 
	mndtc_íåõs
;

141 
__u32
 
	mndtc_œ°_Êush
;

142 
__u32
 
	mndtc_œ°_ønd
;

143 
__u32
 
	mndtc_hash_∫d
;

144 
__u32
 
	mndtc_hash_mask
;

145 
__u32
 
	mndtc_hash_chaö_gc
;

146 
__u32
 
	mndtc_¥oxy_qÀn
;

150 
	mNDTA_UNSPEC
,

151 
	mNDTA_NAME
,

152 
	mNDTA_THRESH1
,

153 
	mNDTA_THRESH2
,

154 
	mNDTA_THRESH3
,

155 
	mNDTA_CONFIG
,

156 
	mNDTA_PARMS
,

157 
	mNDTA_STATS
,

158 
	mNDTA_GC_INTERVAL
,

159 
	m__NDTA_MAX


161 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

59 
	#NLM_F_ROOT
 0x100

	)

60 
	#NLM_F_MATCH
 0x200

	)

61 
	#NLM_F_ATOMIC
 0x400

	)

62 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

65 
	#NLM_F_REPLACE
 0x100

	)

66 
	#NLM_F_EXCL
 0x200

	)

67 
	#NLM_F_CREATE
 0x400

	)

68 
	#NLM_F_APPEND
 0x800

	)

79 
	#NLMSG_ALIGNTO
 4U

	)

80 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

81 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

82 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

83 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

84 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

85 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

86 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

87 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

88 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

90 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

92 
	#NLMSG_NOOP
 0x1

	)

93 
	#NLMSG_ERROR
 0x2

	)

94 
	#NLMSG_DONE
 0x3

	)

95 
	#NLMSG_OVERRUN
 0x4

	)

97 
	#NLMSG_MIN_TYPE
 0x10

	)

99 
	s∆msgîr
 {

100 
	mîr‹
;

101 
∆msghdr
 
	mmsg
;

104 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

105 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

106 
	#NETLINK_PKTINFO
 3

	)

107 
	#NETLINK_BROADCAST_ERROR
 4

	)

108 
	#NETLINK_NO_ENOBUFS
 5

	)

109 
	#NETLINK_RX_RING
 6

	)

110 
	#NETLINK_TX_RING
 7

	)

112 
	s∆_pktöfo
 {

113 
__u32
 
	mgroup
;

116 
	s∆_mm≠_ªq
 {

117 
	mnm_block_size
;

118 
	mnm_block_ƒ
;

119 
	mnm_‰ame_size
;

120 
	mnm_‰ame_ƒ
;

123 
	s∆_mm≠_hdr
 {

124 
	mnm_°©us
;

125 
	mnm_Àn
;

126 
__u32
 
	mnm_group
;

128 
__u32
 
	mnm_pid
;

129 
__u32
 
	mnm_uid
;

130 
__u32
 
	mnm_gid
;

133 
	e∆_mm≠_°©us
 {

134 
	mNL_MMAP_STATUS_UNUSED
,

135 
	mNL_MMAP_STATUS_RESERVED
,

136 
	mNL_MMAP_STATUS_VALID
,

137 
	mNL_MMAP_STATUS_COPY
,

138 
	mNL_MMAP_STATUS_SKIP
,

141 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

142 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

143 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

145 
	#NET_MAJOR
 36

	)

148 
	mNETLINK_UNCONNECTED
 = 0,

149 
	mNETLINK_CONNECTED
,

161 
	s∆©å
 {

162 
__u16
 
	m∆a_Àn
;

163 
__u16
 
	m∆a_ty≥
;

176 
	#NLA_F_NESTED
 (1 << 15)

	)

177 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

178 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

180 
	#NLA_ALIGNTO
 4

	)

181 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

182 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/netinet/if_ether.h

18 #i‚de‡
__NETINET_IF_ETHER_H


20 
	#__NETINET_IF_ETHER_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

25 
	~<löux/if_ëhî.h
>

27 #ifde‡
__USE_BSD


60 
	~<√t/ëhî√t.h
>

61 
	~<√t/if_¨p.h
>

63 
__BEGIN_DECLS


71 
	sëhî_¨p
 {

72 
¨phdr
 
	mó_hdr
;

73 
u_öt8_t
 
	m¨p_sha
[
ETH_ALEN
];

74 
u_öt8_t
 
	m¨p_•a
[4];

75 
u_öt8_t
 
	m¨p_tha
[
ETH_ALEN
];

76 
u_öt8_t
 
	m¨p_ça
[4];

78 
	#¨p_hrd
 
ó_hdr
.
¨_hrd


	)

79 
	#¨p_¥o
 
ó_hdr
.
¨_¥o


	)

80 
	#¨p_h 
 
ó_hdr
.
¨_h 


	)

81 
	#¨p_∂n
 
ó_hdr
.
¨_∂n


	)

82 
	#¨p_›
 
ó_hdr
.
¨_›


	)

89 
	#ETHER_MAP_IP_MULTICAST
(
ùaddr
, 
íaddr
) \

93 (
íaddr
)[0] = 0x01; \

94 (
íaddr
)[1] = 0x00; \

95 (
íaddr
)[2] = 0x5e; \

96 (
íaddr
)[3] = ((
u_öt8_t
 *)
ùaddr
)[1] & 0x7f; \

97 (
íaddr
)[4] = ((
u_öt8_t
 *)
ùaddr
)[2]; \

98 (
íaddr
)[5] = ((
u_öt8_t
 *)
ùaddr
)[3]; \

99 }

	)

101 
	g__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sys/bitypes.h

3 
	~<sys/ty≥s.h
>

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
f˘

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
f˘

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
f˘

82 
	#__P
(
¨gs
Ë
	)
¨gs

83 
	#__PMT
(
¨gs
Ë
	)
¨gs

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
˙ame

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
¥Ÿo

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
¥Ÿo

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‚de‡
NCARGS


54 #ifde‡
ARG_MAX


55 
	#NCARGS
 
ARG_MAX


	)

59 
	#NCARGS
 
INT_MAX


	)

65 #i‚de‡
NOGROUP


66 
	#NOGROUP
 65535

	)

68 #i‚de‡
NODEV


69 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

74 #i‚de‡
DEV_BSIZE


75 
	#DEV_BSIZE
 512

	)

80 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

81 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

82 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

83 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

86 #i‚de‡
howm™y


87 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

89 #ifde‡
__GNUC__


90 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

91 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

92 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

94 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

96 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

99 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

100 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
 << 3, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (c⁄° *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_BSD


200 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_BSD


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

279 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

280 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

281 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

282 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

283 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

284 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

285 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

286 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

287 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

288 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

289 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

290 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

291 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

292 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

293 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

294 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

295 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

296 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

297 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

298 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

299 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

300 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

301 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

302 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

303 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

304 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

305 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

306 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

307 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

308 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

309 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

310 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #i‡
deföed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #i‚de‡
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #i‚de‡
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #i‚de‡
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifde‡
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifde‡
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifde‡
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #i‚de‡
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #i‚de‡
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifde‡
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifde‡
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifde‡
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifde‡
__USE_GNU


241 
	e__pid_ty≥


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_ow√r_ex


252 
__pid_ty≥
 
	mty≥
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #i‚de‡
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifde‡
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifde‡
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfûe_h™dÀ


313 
	mh™dÀ_byãs
;

314 
	mh™dÀ_ty≥
;

316 
	mf_h™dÀ
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

324 #ifde‡
__USE_ATFILE


325 
	#AT_FDCWD
 -100

	)

328 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

329 
	#AT_REMOVEDIR
 0x200

	)

331 
	#AT_SYMLINK_FOLLOW
 0x400

	)

332 #ifde‡
__USE_GNU


333 
	#AT_NO_AUTOMOUNT
 0x800

	)

335 
	#AT_EMPTY_PATH
 0x1000

	)

337 
	#AT_EACCESS
 0x200

	)

341 
	g__BEGIN_DECLS


343 #ifde‡
__USE_GNU


346 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

347 
__THROW
;

354 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

355 
__Êags
);

362 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

363 
size_t
 
__cou¡
, 
__Êags
);

369 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

370 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

371 
__Êags
);

377 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

378 
__Êags
);

384 #i‚de‡
__USE_FILE_OFFSET64


385 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

387 #ifde‡
__REDIRECT


388 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

389 
__off64_t
 
__Àn
),

390 
ÁŒoˇã64
);

392 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

397 
__off64_t
 
__Àn
);

402 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

403 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

404 
__Êags
Ë
__THROW
;

410 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

411 
__Êags
);

415 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/syslog-ldbl.h

19 #i‚de‡
_SYS_SYSLOG_H


23 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

25 #ifde‡
__USE_BSD


26 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

29 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


30 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

32 #ifde‡
__USE_BSD


33 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

19 #i‚de‡
_SYS_SYSLOG_H


23 #i‚de‡
_BITS_SYSLOG_PATH_H


24 
	#_BITS_SYSLOG_PATH_H
 1

	)

26 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

19 #i‚de‡
_SYS_SYSLOG_H


24 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
, ...)

25 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

27 #ifde‡
__va_¨g_∑ck


28 
__f‹tify_fun˘i⁄
 

29 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

31 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

32 
	}
}

33 #ñi‡!
deföed
 
__˝lu•lus


34 
	#sy¶og
(
¥i
, ...) \

35 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

39 #ifde‡
__USE_BSD


40 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
,

41 
__gnuc_va_li°
 
__≠
)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

44 
__f‹tify_fun˘i⁄
 

45 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

47 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

48 
	}
}

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

27 #ifde‡
_LIBC


28 
	~<lowÀvñlock.h
>

29 
	~<és.h
>

30 
	~<±hªad-fun˘i⁄s.h
>

31 
	~<î∫o.h
>

32 
	~<gnu/›ti⁄-groups.h
>

36 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


37 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


38 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

40 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

43 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

53 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

59 #i‡
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

63 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

77 
	#__libc_lock_öô_ªcursive
(
NAME
) \

78 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock_öô_ªcursive
(
NAME
) \

82 i‡(
__±hªad_muãx_öô
 !
NULL
) \

84 
±hªad_muãx©å_t
 
__©å
; \

85 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

86 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

88 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

90 } 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

97 
	#__libc_lock_föi_ªcursive
(
NAME
) \

98 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

102 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

103 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

108 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

110 #i‡
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_ªcursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 i‡((
NAME
).
ow√r
 !
£lf
) \

116 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
ow√r
 = 
£lf
; \

119 ++(
NAME
).
˙t
; \

120 } 0)

	)

122 
	#__libc_lock_lock_ªcursive
(
NAME
) \

123 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

132 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

137 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

139 #i‡
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

142 
ªsu…
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 i‡((
NAME
).
ow√r
 !
£lf
) \

146 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
ow√r
 = 
£lf
; \

149 (
NAME
).
˙t
 = 1; \

152 
ªsu…
 = 
EBUSY
; \

155 ++(
NAME
).
˙t
; \

156 
ªsu…
; \

157 })

	)

159 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

160 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

163 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

164 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

168 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

169 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

174 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

176 #i‡
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

180 i‡(--(
NAME
).
˙t
 == 0) \

182 (
NAME
).
ow√r
 = 
NULL
; \

183 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

188 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

191 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

192 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

199 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

200 (*
routöe
Ë(*), *
¨g
);

201 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

202 
execuã
);

205 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

207 
_avaû
; \

208 i‡(
DOIT
) { \

209 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

210 i‡(
_avaû
) { \

211 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

212 
ARG
)); \

214 
_buf„r
.
__routöe
 = (
FCT
); \

215 
_buf„r
.
__¨g
 = (
ARG
); \

218 
_avaû
 = 0; \

219 }

	)

222 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

223 i‡(
_avaû
) { \

224 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

225 } i‡(
DOIT
) \

226 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

227 
	}

	)
}

232 #ifde‡
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/stddef.h

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LOCALES
 1

	)

34 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

35 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

36 
	#__OPTION_EGLIBC_NIS
 1

	)

37 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

38 
	#__OPTION_EGLIBC_RCMD
 1

	)

39 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

40 
	#__OPTION_EGLIBC_SPAWN
 1

	)

41 
	#__OPTION_EGLIBC_STREAMS
 1

	)

42 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

43 
	#__OPTION_EGLIBC_UTMP
 1

	)

44 
	#__OPTION_EGLIBC_UTMPX
 1

	)

45 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

46 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

47 
	#__OPTION_POSIX_REGEXP
 1

	)

48 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

49 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@
1
.
1
/usr/include
215
5314
blob.c
blob.h
blobmsg.c
blobmsg.h
config.c
config_bhu.bak.c
config_bhu.c
dhcpv4.c
dhcpv4.h
dhcpv6-ia.c
dhcpv6.c
dhcpv6.h
dn_comp.c
list.h
md5.c
md5.h
ndp.c
ndp.h
odhcpd.c
odhcpd.h
router.c
router.h
t.c
ubus.c
uloop.c
uloop.h
usock.c
usock.h
ustream-fd.c
ustream.c
ustream.h
utils.c
utils.h
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/arpa/nameser.h
/usr/include/byteswap.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/limits.h
/usr/include/linux/filter.h
/usr/include/linux/rtnetlink.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/net/route.h
/usr/include/netdb.h
/usr/include/netinet/ether.h
/usr/include/netinet/icmp6.h
/usr/include/netinet/in.h
/usr/include/netinet/ip.h
/usr/include/netinet/ip6.h
/usr/include/netpacket/packet.h
/usr/include/poll.h
/usr/include/resolv.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/epoll.h
/usr/include/sys/ioctl.h
/usr/include/sys/socket.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/un.h
/usr/include/sys/wait.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/arpa/nameser_compat.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/epoll.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/ctype.h
/usr/include/features.h
/usr/include/inttypes.h
/usr/include/libio.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_link.h
/usr/include/linux/neighbour.h
/usr/include/linux/netlink.h
/usr/include/linux/types.h
/usr/include/netinet/if_ether.h
/usr/include/rpc/netdb.h
/usr/include/sys/bitypes.h
/usr/include/sys/cdefs.h
/usr/include/sys/param.h
/usr/include/sys/poll.h
/usr/include/sys/select.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/socket.h
/usr/include/asm/types.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/param.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/socket_type.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/posix_types.h
/usr/include/linux/socket.h
/usr/include/stdc-predef.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/socket.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/stddef.h
/usr/include/linux/sysinfo.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/param.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/linux/ioctl.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/ioctl.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/ioctl.h
/usr/include/bits/sched.h
